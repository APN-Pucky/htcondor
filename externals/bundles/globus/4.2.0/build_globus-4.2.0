#!/bin/sh

. $EXTERNALS_CONFIG
FLAVOR=$GLOBUS_FLAVOR
cd $PACKAGE_BUILD_DIR

SOURCE_DIR="gt4.2.0-all-source-installer"

##
## For FreeBSD, we need to copy gmake into our local directory
## and rename it to make. Then set the path to point to this
## directory first so that gpt-build uses this copy of make
## We only attempt this if our environment points to the BSD
## version of make. This will not be executed in the NMI builds
## Andy Pavlo - 06.12.2006
##
cd $PACKAGE_BUILD_DIR
if [ `uname` = "FreeBSD" ]; then
   if [ -z `make -v 2>/dev/null | grep "GNU Make"` ]; then
      gmake_path=`which gmake`
      if [ -z "$gmake_path" ]; then
         echo "Missing GNU Make. Please install the gmake port"
         exit 1
      fi
      cp $gmake_path ./
      mv gmake make
      PATH="${PACKAGE_BUILD_DIR}:${PATH}"
      export PATH
   fi
   ##
   ## For some reason it dies unless this directory is created beforehand
   ##
   dir="${SOURCE_DIR}/gpt-3.2autotools2004/packaging_tools/etc/gpt"
   if [ ! -d "$dir" ]; then
      mkdir -p $dir
   fi
fi

# This patches a bug in the gram protocol library. It's taken from
# patch 026 in VDT 1.10.1.
patch -i gram-protocol.patch -p0
if [ $? -ne 0 ]
then
  echo "patch gram-protocol.patch failed"
  exit 1
fi

# This patches an annoying error message in C++ code with older gcc's.
# See http://bugzilla.globus.org/bugzilla/show_bug.cgi?id=4978 for details.
patch -i globus-object.patch -p0
if [ $? -ne 0 ]
then
  echo "patch globus-object.patch failed"
  exit 1
fi

# The XIO module usually wants to dlopen its GSI and popen drivers at
# runtime. Since we want to statically link in all of the Globus libraries,
# convince XIO to include these drivers as built-ins.
patch -i xio-plugins.patch -p0
if [ $? -ne 0 ]
then
  echo "patch xio-plugins.patch failed"
  exit 1
fi
cd $SOURCE_DIR/source-trees/xio/src/builtins
mkdir gsi popen
sed -e 's/globus_xio_gsi.h/globus_xio_gsi_driver.h/' ../../drivers/gsi/globus_i_xio_gsi.h >gsi/globus_i_xio_gsi.h
cp ../../drivers/gsi/globus_xio_gsi.c gsi/globus_xio_gsi_driver.c
cp ../../drivers/gsi/globus_xio_gsi.h gsi/globus_xio_gsi_driver.h
cp ../../drivers/popen/source/*.[hc] popen
sed -e 's/tcp/gsi/g' tcp/Makefile.am >gsi/Makefile.am
sed -e 's/tcp/gsi/g' tcp/Makefile.in >gsi/Makefile.in
sed -e 's/tcp/popen/g' tcp/Makefile.am >popen/Makefile.am
sed -e 's/tcp/popen/g' tcp/Makefile.in >popen/Makefile.in
cd $PACKAGE_BUILD_DIR

# MacOS doesn't like the duplication of symbols for the GSI and popen XIO
# plugins, so remove everything from the non-builtin driver libraries.
if [ `uname` = "Darwin" ] ; then
    patch -i xio-plugins-2.patch -p0
    if [ $? -ne 0 ]
    then
        echo "patch xio-plugins-2.patch failed"
        exit 1
    fi
 fi


# These variables will make Globus link against our OpenSSL external,
# rather than the system OpenSSL libraries.
CFLAGS=-I$EXT_INSTALL/$EXT_OPENSSL_VERSION/include
export CFLAGS
LDFLAGS=-L$EXT_INSTALL/$EXT_OPENSSL_VERSION/lib
export LDFLAGS
OPENSSL_CFLAGS=$CFLAGS
export OPENSSL_CFLAGS
OPENSSL_LDFLAGS=$LDFLAGS
export OPENSSL_LDFLAGS
if [ `uname` = "Linux" -o `uname` = "SunOS" ]; then
    OPENSSL_LIBS='-lssl -lcrypto -ldl'
    export OPENSSL_LIBS
elif [ `uname` = "Darwin" ] ; then
    # We want to use the first case below for all Darwin builds, but we
    # don't want to change how this external is already building on
    # Mac OS 10.4.
    uname -v | grep -q 'Version 9'
    if [ $? -eq 0 ] ; then
        # Mac OS 10.5
        OPENSSL_LDFLAGS="$OPENSSL_LDFLAGS -Wl,-search_paths_first"
        export OPENSSL_LDFLAGS
        OPENSSL_LIBS="-lssl -lcrypto"
        export OPENSSL_LIBS
    else
        # Mac OS 10.4 and below
        OPENSSL_LIBS="$EXT_INSTALL/$EXT_OPENSSL_VERSION/lib/libssl.a $EXT_INSTALL/$EXT_OPENSSL_VERSION/lib/libcrypto.a"
        export OPENSSL_LIBS
    fi
fi

cd $SOURCE_DIR

./configure --prefix=$PACKAGE_INSTALL_DIR --with-flavor=$FLAVOR
if [ $? -ne 0 ]
then
  echo "configure failed"
  exit 1
fi

# The Makefile dependencies for globus_xio are now wrong. Tossing in
# gssapi_error as a make target ensures everything's built in order.
make gpt gssapi_error globus-resource-management-sdk
if [ $? -ne 0 ]
then
  echo "make globus-resource-management-sdk failed"
  exit 1
fi

GLOBUS_LOCATION=$PACKAGE_INSTALL_DIR
export GLOBUS_LOCATION

# Now time to make the gridftp server
make globus_gridftp_server
if [ $? -ne 0 ]
then
  echo "make globus_gridftp_server failed"
  exit 1
fi

$GLOBUS_LOCATION/sbin/gpt-build -force -static -srcdir=source-trees/gridftp/server/src $FLAVOR
if [ $? -ne 0 ]
then
  echo "gpt-build static gridftp failed"
  exit 1
fi

mv $PACKAGE_INSTALL_DIR/sbin/globus-gridftp-server $PACKAGE_INSTALL_DIR/sbin/globus-gridftp-server.dynamic
if [ $? -ne 0 ]
then
  echo "mv globus-gridftp-server.dynamic failed"
  exit 1
fi

if [ $HAS_STATIC = YES ] ; then
  cd ..
  patch -i gridftp-static.patch -p0
  if [ $? -ne 0 ]
  then
    echo "patch gridftp-static failed"
    exit 1
  fi

  cd $SOURCE_DIR
  $GLOBUS_LOCATION/sbin/gpt-build -force -static -srcdir=source-trees/gridftp/server/src $FLAVOR
  if [ $? -ne 0 ]
  then
    echo "gpt-build really static gridftp failed"
    exit 1
  fi

  mv $PACKAGE_INSTALL_DIR/sbin/globus-gridftp-server $PACKAGE_INSTALL_DIR/sbin/globus-gridftp-server.static
  if [ $? -ne 0 ]
  then
    echo "mv globus-gridftp-server.static failed"
    exit 1
  fi
fi

cd $PACKAGE_INSTALL_DIR
tar zxvf $PACKAGE_BUILD_DIR/globus-4.0.7-java.tar.gz
tar zxvf $PACKAGE_BUILD_DIR/globus-4.2.0-java.tar.gz
