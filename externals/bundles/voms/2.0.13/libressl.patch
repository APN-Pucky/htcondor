diff -u -r voms-2.0.13/src/ac/extensions.c voms/src/ac/extensions.c
--- voms-2.0.13/src/ac/extensions.c	2016-02-11 08:02:37.000000000 -0600
+++ voms/src/ac/extensions.c	2018-05-15 12:47:22.000000000 -0500
@@ -42,6 +42,33 @@
 #include "attributes.h"
 #include <string.h>
 
+#if defined(LIBRESSL_VERSION_NUMBER)
+#define M_ASN1_New_Malloc(ret,type) \
+        if ((ret=(type *)OPENSSL_malloc(sizeof(type))) == NULL) \
+                { c.line=__LINE__; goto err2; }
+#define M_ASN1_New(arg,func) \
+        if (((arg)=func()) == NULL) return(NULL)
+#define M_ASN1_New_Error(a) \
+/*      err:    ASN1_MAC_H_err((a),ERR_R_NESTED_ASN1_ERROR,c.line); \
+                return(NULL);*/ \
+        err2:   ASN1_MAC_H_err((a),ERR_R_MALLOC_FAILURE,c.line); \
+                return(NULL)
+#define M_ASN1_D2I_get_imp_set(r,func,free_func,a,b) \
+        c.q=c.p; \
+        if (d2i_ASN1_SET(&(r),&c.p,c.slen,(char *(*)())func,\
+                (void (*)())free_func,a,b) == NULL) \
+                { c.line=__LINE__; goto err; } \
+        c.slen-=(c.p-c.q);
+#define M_ASN1_I2D_len_SEQUENCE(a,f) \
+                ret+=i2d_ASN1_SET(a,NULL,f,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL, \
+                                  IS_SEQUENCE);
+#define M_ASN1_I2D_put_SEQUENCE(a,f) i2d_ASN1_SET(a,&p,f,V_ASN1_SEQUENCE,\
+                                             V_ASN1_UNIVERSAL,IS_SEQUENCE)
+#define M_ASN1_D2I_get_seq(r,func,free_func) \
+                M_ASN1_D2I_get_imp_set(r,func,free_func,\
+                        V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
+#endif
+
 #ifndef VOMS_MAYBECONST
 #if defined(D2I_OF)
 #define VOMS_MAYBECONST const
diff -u -r voms-2.0.13/src/ac/newformat.c voms/src/ac/newformat.c
--- voms-2.0.13/src/ac/newformat.c	2016-02-11 08:02:37.000000000 -0600
+++ voms/src/ac/newformat.c	2018-05-15 14:34:48.000000000 -0500
@@ -39,6 +39,98 @@
 #include "acerrors.h"
 #include "attributes.h"
 
+#if defined(LIBRESSL_VERSION_NUMBER)
+#define M_ASN1_New_Malloc(ret,type) \
+        if ((ret=(type *)OPENSSL_malloc(sizeof(type))) == NULL) \
+                { c.line=__LINE__; goto err2; }
+#define M_ASN1_New(arg,func) \
+        if (((arg)=func()) == NULL) return(NULL)
+#define M_ASN1_New_Error(a) \
+/*      err:    ASN1_MAC_H_err((a),ERR_R_NESTED_ASN1_ERROR,c.line); \
+                return(NULL);*/ \
+        err2:   ASN1_MAC_H_err((a),ERR_R_MALLOC_FAILURE,c.line); \
+                return(NULL)
+#define M_ASN1_D2I_get_imp_set(r,func,free_func,a,b) \
+        c.q=c.p; \
+        if (d2i_ASN1_SET(&(r),&c.p,c.slen,(char *(*)())func,\
+                (void (*)())free_func,a,b) == NULL) \
+                { c.line=__LINE__; goto err; } \
+        c.slen-=(c.p-c.q);
+#define M_ASN1_D2I_get_seq_opt(r,func,free_func) \
+        if ((c.slen != 0) && (M_ASN1_next == (V_ASN1_UNIVERSAL| \
+                V_ASN1_CONSTRUCTED|V_ASN1_SEQUENCE)))\
+                { M_ASN1_D2I_get_seq(r,func,free_func); }
+#define M_ASN1_I2D_len_SEQUENCE(a,f) \
+                ret+=i2d_ASN1_SET(a,NULL,f,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL, \
+                                  IS_SEQUENCE);
+#define M_ASN1_I2D_put_SEQUENCE(a,f) i2d_ASN1_SET(a,&p,f,V_ASN1_SEQUENCE,\
+                                             V_ASN1_UNIVERSAL,IS_SEQUENCE)
+#define M_ASN1_D2I_get_seq(r,func,free_func) \
+                M_ASN1_D2I_get_imp_set(r,func,free_func,\
+                        V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
+#define M_ASN1_D2I_get_seq_opt_type(type,r,func,free_func) \
+        if ((c.slen != 0) && (M_ASN1_next == (V_ASN1_UNIVERSAL| \
+                V_ASN1_CONSTRUCTED|V_ASN1_SEQUENCE)))\
+                { M_ASN1_D2I_get_seq_type(type,r,func,free_func); }
+static int
+my_ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
+                char *data, EVP_PKEY *pkey)
+{
+    EVP_MD_CTX *ctx = EVP_MD_CTX_create();
+    const EVP_MD *type;
+    unsigned char *p, *buf_in = NULL;
+    int ret = -1, i, inl;
+
+    if (ctx == NULL) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ERR_R_MALLOC_FAILURE);
+        goto err;
+    }
+    i = OBJ_obj2nid(a->algorithm);
+    type = EVP_get_digestbyname(OBJ_nid2sn(i));
+    if (type == NULL) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
+        goto err;
+    }
+
+    if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);
+        goto err;
+    }
+
+    inl = i2d(data, NULL);
+    buf_in = OPENSSL_malloc((unsigned int)inl);
+    if (buf_in == NULL) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ERR_R_MALLOC_FAILURE);
+        goto err;
+    }
+    p = buf_in;
+
+    i2d(data, &p);
+    ret = EVP_VerifyInit_ex(ctx, type, NULL)
+        && EVP_VerifyUpdate(ctx, (unsigned char *)buf_in, inl);
+
+    memset(buf_in, 0, (size_t)inl);
+    OPENSSL_free(buf_in);
+
+    if (!ret) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ERR_R_EVP_LIB);
+        goto err;
+    }
+    ret = -1;
+
+    if (EVP_VerifyFinal(ctx, (unsigned char *)signature->data,
+                        (unsigned int)signature->length, pkey) <= 0) {
+        ASN1err(ASN1_F_ASN1_VERIFY, ERR_R_EVP_LIB);
+        ret = 0;
+        goto err;
+    }
+    ret = 1;
+ err:
+    EVP_MD_CTX_destroy(ctx);
+    return ret;
+}
+#endif
+
 #ifndef VOMS_MAYBECONST
 #if defined(D2I_OF)
 #define VOMS_MAYBECONST const
@@ -597,5 +689,9 @@
 
 int AC_verify(X509_ALGOR *algor1, ASN1_BIT_STRING *signature,char *data, EVP_PKEY *pkey)
 {
+#if defined(LIBRESSL_VERSION_NUMBER)
+  return my_ASN1_verify((int (*)())i2d_AC_INFO, algor1, signature, data, pkey);
+#else
   return ASN1_verify((int (*)())i2d_AC_INFO, algor1, signature, data, pkey);
+#endif
 }
diff -u -r voms-2.0.13/src/sslutils/proxycertinfo.c voms/src/sslutils/proxycertinfo.c
--- voms-2.0.13/src/sslutils/proxycertinfo.c	2016-02-11 08:02:37.000000000 -0600
+++ voms/src/sslutils/proxycertinfo.c	2018-05-15 12:30:14.000000000 -0500
@@ -34,6 +34,19 @@
 #include "myproxycertinfo.h"
 #include "doio.h"
 
+#if defined(LIBRESSL_VERSION_NUMBER)
+#define M_ASN1_New_Malloc(ret,type) \
+        if ((ret=(type *)OPENSSL_malloc(sizeof(type))) == NULL) \
+                { c.line=__LINE__; goto err2; }
+#define M_ASN1_New(arg,func) \
+        if (((arg)=func()) == NULL) return(NULL)
+#define M_ASN1_New_Error(a) \
+/*      err:    ASN1_MAC_H_err((a),ERR_R_NESTED_ASN1_ERROR,c.line); \
+                return(NULL);*/ \
+        err2:   ASN1_MAC_H_err((a),ERR_R_MALLOC_FAILURE,c.line); \
+                return(NULL)
+#endif
+
 /* myPROXYPOLICY function */
 
 myPROXYPOLICY * myPROXYPOLICY_new() 
diff -u -r voms-2.0.13/src/sslutils/sslutils.c voms/src/sslutils/sslutils.c
--- voms-2.0.13/src/sslutils/sslutils.c	2016-02-11 08:02:37.000000000 -0600
+++ voms/src/sslutils/sslutils.c	2018-05-15 14:36:54.000000000 -0500
@@ -120,6 +120,33 @@
 
 static int check_critical_extensions(X509 *cert, int itsaproxy);
 
+static int
+my_ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
+                unsigned char *md, unsigned int *len)
+{
+#if defined(LIBRESSL_VERSION_NUMBER)
+    int i;
+    unsigned char *str, *p;
+
+    i = i2d(data, NULL);
+    if ((str = OPENSSL_malloc(i)) == NULL) {
+        ASN1err(ASN1_F_ASN1_DIGEST, ERR_R_MALLOC_FAILURE);
+        return 0;
+    }
+    p = str;
+    i2d(data, &p);
+
+    if (!EVP_Digest(str, i, md, len, type, NULL)) {
+        OPENSSL_free(str);
+        return 0;
+    }
+    OPENSSL_free(str);
+    return 1;
+#else
+    return ASN1_digest(i2d, type, data, md, len);
+#endif
+}
+
 /**********************************************************************
                                Type definitions
 **********************************************************************/
@@ -481,7 +508,7 @@
             RAND_load_file(randfile,1024L*1024L);
         }
 
-#if SSLEAY_VERSION_NUMBER >=  0x0090581fL
+#if SSLEAY_VERSION_NUMBER >=  0x0090581fL && !defined(LIBRESSL_VERSION_NUMBER)
         /*
          * Try to use the Entropy Garthering Deamon
          * See the OpenSSL crypto/rand/rand_egd.c 
@@ -905,9 +932,9 @@
       req_public_key = X509_REQ_get_pubkey(req);
 
 #ifdef TYPEDEF_I2D_OF
-      ASN1_digest((i2d_of_void*)i2d_PUBKEY, cn_sig_algo, (char *) req_public_key, md, &len);
+      my_ASN1_digest((i2d_of_void*)i2d_PUBKEY, cn_sig_algo, (char *) req_public_key, md, &len);
 #else
-      ASN1_digest(i2d_PUBKEY, cn_sig_algo, (char *) req_public_key, md, &len);
+      my_ASN1_digest(i2d_PUBKEY, cn_sig_algo, (char *) req_public_key, md, &len);
 #endif
       EVP_PKEY_free(req_public_key);
 
@@ -1122,9 +1149,9 @@
           
       new_public_key = X509_REQ_get_pubkey(req);
 #ifdef TYPEDEF_I2D_OF
-      ASN1_digest((i2d_of_void*)i2d_PUBKEY, sig_algo, (char *) new_public_key, md, &len);
+      my_ASN1_digest((i2d_of_void*)i2d_PUBKEY, sig_algo, (char *) new_public_key, md, &len);
 #else
-      ASN1_digest(i2d_PUBKEY, sig_algo, (char *) new_public_key, md, &len);
+      my_ASN1_digest(i2d_PUBKEY, sig_algo, (char *) new_public_key, md, &len);
 #endif
       EVP_PKEY_free(new_public_key);
       new_public_key = NULL;
