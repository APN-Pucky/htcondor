.. admin_quick_start:

Administrative Quick Start Guide
================================

The purpose of this page is to guide you from a functioning single-machine
installation of HTCondor (as you may have obtained by
:ref:`getting_htcondor`) to a pool of machines working together to execute
your jobs.  The first step is to understand the different roles into which
HTCondor splits the responsibilities of managing jobs, so that you can
choose the appropriate machine for each role.  The second step is to install
HTCondor onto those machines, and the third step is to configure those machines
to work together and to communicate securely.

The Three Major Roles
---------------------

Even a single-machine installation of HTCondor performs all three of these
roles.

The Execute Role
################

The most common reason for adding a machine to an HTCondor pool is to make
another machine execute HTCondor jobs; the first major role, therefore, is
the execute role.  This role is responsible for the technical aspects of
actually running, monitoring, and managing the job's executable; transferring
the job's input and output; and advertising, monitoring, and managing the
resources of the execute machine.  HTCondor can manage pools containing
tens of thousands of execute machines, so this is by far the most common role.

The execute role uses resources very few resources, so almost any machine
can contribute to a pool in the execute role.  The execute role can run on
a machine with only outbound network connectivity, but being able to
accept inbound connections from the machine(s) performing the submit role
will simplify setup and reduce overhead.

The Submit Role
###############

We'll discuss what "advertising" a machine's resources means in the next
section, but the execute role leaves an obvious question unanswered: where
do the jobs come from?  The answer is the submit role.  This role is
responsible for accepting, monitoring, managing, scheduling jobs on its
assigned resources; transferring the input and output of jobs; and requesting
and accepting resource assignments.  (A "resource" is some reserved fraction
of an execute machine.)  HTCondor allows arbitrarily many submit roles in a
pool, but for administrative convenience, most pools only have one, or a
small number, of machines acting in the submit role.

A submit-role machine requires a bit under of a megabyte of RAM for each
running job, and its ability to transfer data to the execute-role machines
may be a performance bottleneck.  We typically recommend adding another submit
machine for every twenty thousand simultaneously running jobs.  A submit
machine must have outbound network connectivity, but a submit machine without
inbound network connectivity can't use execute-role machines without inbound
network connectivity.  As execute machines are more numerous, submit
machines typically allow inbound connections.

The Central Manager Role
########################

Only one machine in each HTCondor pool can perform this role (barring
certain high-availability configurations, where only one machine can
perform this role at a time).  A central manager matches resource requests --
generated by the submit role based on its jobs -- with the resources described
by the execute machines.  We refer to sending these (automatically-generated)
descriptions to the central manager as "advertising," because it's the
primary way execute machines get jobs to run.

A central manager must accept connections from each execute machine and each
submit machine in a pool.  However, users should never need access to the
central manager.  Every machine in the pool updates the central manager every
few minutes, and it answers both system and user queries about the status of
the pool's resources, so a fast network is important.  For very large pools,
memory may become a limiting factor, but any reasonably modern CPU should be
fine.

Security
--------

Although the next logical step is to assign roles to machines (installing
HTCondor as necessary), and after that, to configure those machines to
work together and communicate securely, we're going to discuss security
first, since doing all of the set-up for each role in one go will save you
some time.

Actually, we're mostly going to avoid discussing security, because HTCondor
supports a lot of different authentication methods and has a very fine-grained
authorization model that you'll hopefully never have to actually worry about.
If you're curious, you can read the [FIXME].

.. Instead, we're just going to tell you how to set up token-based security.  A
.. token is a crytographically-secured blob that operates like a passport: it
.. authenticates the holder, authorizes them to do certain things (e.g., enter
.. a foreign country), and is issued by a recognized authority.  In this case,
.. the recognized authority is the central manager.  On start-up, the central
.. manager generates a secret (if it doesn't know one already), which it can
.. then use to create tokens.  Only the holder of the secret key can verify
.. a token, but holders of tokens can verify that they're talking to the
.. holder of the same key that signed their token.

Instead, we're just going to tell you how to set up security based on
a shared secret -- a password stored, readable only by privileged processes
(like HTCondor), on each machine in the pool.  The advantage of this approach
is that every machine using the same password makes the password easy to
distribute.  The disadvantage of this approach is that every machine using
the same password makes it impossible to securely distinguish between
machines.

In this configuration, users will only interact with HTCondor on the submit
machine (or via remote access to it).  

Configuration
-------------

.. These instrutions assume that the machine is unconfigured; in the
.. natively-packaged sense of having removed the minicondor package.
.. It seems like the right place to tell users how to undo, or not do,
.. the minicondor package or configuration on the various install method's
.. pages, or separate pages linked to from them.

We recommend separate machines for each role, so the following instructions
are broken into three sections, one for each role.

.. rubric: Making Configuration Changes

HTCondor configuration files should generally be owned by root
(or Administrator, on Windows).  We recommend that you don't make changes
to the configuration files established by the installation procedure;
this avoids conflicts between your changes and any changes we may have to
make to the base configuration.  Instead, you should add (or edit) files
in configuration directory; its location can be determined on a given
machine by running ``condor_config_val LOCAL_CONFIG_DIR`` there.  [FIXME:
we need to make this true.]  HTCondor will process files in this directory
in lexicographic order, so we recommend naming files ``##-name.config``;
for example, a setting in ``00-base.config`` will be overridden by a
setting in ``99-specific.config``.

Configuring an Execute-role Machine
===================================

.. code-block: condor-config

    # Make this an execute-role machine.  Roles are not exclusive.
    use role: execute

    # This configures HTCondor to use password security.  You MUST have
    # the same password file on all machines in the same pool.  Machines
    # with the same operating system will look for the password file in
    # the same place; run 'condor_config_val SEC_PASSWORD_FILE' on one
    # of them to discover where, or set SEC_PASSWORD_FILE in this
    # configuration file.
    #
    # The following line configures this role to accept only PASSWORD-
    # authenticated connections.
    #
    # [FIXME]  This metaknob doesn't exist but should, and set:
    #
    # SEC_PASSWORD_FILE = $(LOCAL_DIR)/condor_pool_password
    #
    # or whatever the IDTOKENS default actually is.
    #
    # It should also set, as I understand it:
    #
    # SEC_DAEMON_INTEGRITY = REQUIRED
    # SEC_DAEMON_AUTHENTICATION = REQUIRED
    # SEC_DAEMON_AUTHENTICATION_METHODS = PASSWORD
    # SEC_NEGOTIATOR_INTEGRITY = REQUIRED
    # SEC_NEGOTIATOR_AUTHENTICATION = REQUIRED
    # SEC_NEGOTIATOR_AUTHENTICATION_METHODS = PASSWORD
    # ALLOW_DAEMON = condor_pool@*

    # Maybe instead
    # use security : strong
    # and
    # use security : password
    # where the latter sets
    # SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD
    # ALLOW_DAEMON = condor_pool@*
    use security : password

    # An execute machine must know the location of the central manager.
    COLLECTOR_HOST = cm.example.com

    # FIXME: what else?

Configuring a Submit-role Machine
=================================

Be sure to uncomment the appropriate ``SEC_CLIENT_AUTHENTICATION_METHODS`` line.

.. code-block: condor-config

    # Make this an execute-role machine.  Roles are not exclusive.
    use role: submit

    # [FIXME] See above.
    use security : strong
    use security : password

    # The submit role must also accept connections from users.  On Linux
    # (or Mac), the easiest secure method is FS, which requires no other
    # set-up.  On Windows, the easiest secure method is NTSSPI, which
    # requires users to run condor_store_cred before interacting with
    # HTCondor.

    # On Linux (or Mac):
    # SEC_CLIENT_AUTHENTICATION_METHODS = FS, PASSWORD
    # On Windows:
    # SEC_CLIENT_AUTHENTICATION_METHODS = NTSSPI, PASSWORD

    # This allows any authenticated user on this machine to interact with
    # HTCondor as a normal user.
    ALLOW_WRITE = *@$(FULL_HOSTNAME) *@$(IP_ADDRESS)

    # A submit machine must know the location of the central manager.
    COLLECTOR_HOST = cm.example.com

    # FIXME: what else?

Configuring a Central Manager
=============================

.. code-block: condor-config

    # Make this an execute-role machine.  Roles are not exclusive.
    use role: submit

    # [FIXME] Commentary
    use security : strong
    use security : password

    # FIXME: what else?
