#! /usr/bin/perl -w
use strict;
use POSIX qw(strftime mktime);
use Date::Manip;

my $start_year = 1990;
my $end_year = 1993;
#my $end_year = 2100;

my @test_groups;
my $test_group;


################################################################################
$test_group = {};
$test_group->{name} = 'datext.js Date.parseMore: YYYY-Www dates';
$test_group->{tests} = '';

for(my $year = $start_year; $year < $end_year; $year++) {
	for(my $week = 1; $week <= 53; $week++) {
		my $date = sprintf("%04d-W%02d", $year, $week);
		my $dm = ParseDate($date);
		my $fulldate = UnixDate($dm, "%O.000Z");
		if(length($test_group->{tests})) { $test_group->{tests} .= ",\n"; }
		$test_group->{tests} .= "      [try_parseMore, '$date', '$fulldate']";
	}
}

push @test_groups, $test_group;

################################################################################
$test_group = {};
$test_group->{name} = 'datext.js Date.getISOWeekDate';
$test_group->{tests} = '';


my $now = mktime(0, 0, 0, 1, 0, $start_year-1900);
my $end = mktime(0,0, 12, 1,0, $end_year-1900);
my $last_year = 0;
while($now < $end) {
	my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($now);
	my $input = strftime("%Y-%m-%dT%H:%M:%S",localtime($now));
	my $expected = strftime("%G-W%V",localtime($now));
	if(length($test_group->{tests})) { $test_group->{tests} .= ",\n"; }
	$test_group->{tests} .= "      [try_getISOWeekDate, '$input', '$expected']";
	$now += 60*60*24;
}

push @test_groups, $test_group;

################################################################################



print <<END;
<!doctype html>
<htmlUTC>
<head>
  <meta charset="utf-8">
  <title>Date testing</title>
<script src="dateext.js"></script>
</head>
<body>
<div id="progress"></div>
<div id="output"></div>
<script>

var outdiv;
var progressdiv;

function add_h1() {
	var args_arr = Array.prototype.slice.call(arguments);
	var s = args_arr.join(" ");
	var p = document.createElement("h1");
	var txt = document.createTextNode(s);
	p.appendChild(txt);
	outdiv.appendChild(p);
}

function add_paragraph() {
	var args_arr = Array.prototype.slice.call(arguments);
	var s = args_arr.join(" ");
	var p = document.createElement("p");
	var txt = document.createTextNode(s);
	p.appendChild(txt);
	outdiv.appendChild(p);
}

function progress() {
	while (progressdiv.firstChild) {
		progressdiv.removeChild(progressdiv.firstChild);
	}

	var args_arr = Array.prototype.slice.call(arguments);
	var s = args_arr.join(" ");
	var txt = document.createTextNode(s);
	progressdiv.appendChild(txt);
}

function try_parseMore(i) { return Date.parseMore(i).toISOString(); }

function try_getISOWeekDate(i) { return Date.parseMore(i).getUTCISOWeekDate(); }

END
print "test_groups = [\n";

for(my $group = 0; $group < @test_groups; $group++) {
	print qq(  { name: "$test_groups[$group]{name}",\n);
	print qq(    tests: [\n);
	print $test_groups[$group]{tests},"\n";
	print qq(    ] });
	if(($group+1) != @test_groups) {
		print ",";
	}
	print "\n";
}

print "];\n";
print <<END;

var group_num = 0;
var test_num = 0;

var group_success = 0;
var group_fail = 0;

function run_next_tests_impl() {
	if(group_num >= test_groups.length) {
		progress("");
		return;
	}
	var num_tests_in_group = test_groups[group_num].tests.length;
	progress(group_num+1, "/", test_groups.length,"|", test_num+1, "/", num_tests_in_group);
	if(test_num >= num_tests_in_group) {
		test_num = 0;
		add_paragraph(group_success, "/", num_tests_in_group, "succeeded.", group_fail, "/", num_tests_in_group, "failed.", "Found", group_success+group_fail, "out of", num_tests_in_group, "tests.");
		group_num++;
		group_success = 0;
		group_fail = 0;
		run_next_tests();
		return;
	}
	if(test_num === 0) {
		add_h1(group_num, test_groups[group_num].name);
	}
	var func = test_groups[group_num].tests[test_num][0];
	var input = test_groups[group_num].tests[test_num][1];
	var expected = test_groups[group_num].tests[test_num][2];
	var actual;
	var funcname;
	if(func.name) { funcname = func.name; }
	else { funcname = func; }
	try {
		actual = func(input);
	} catch (e) {
		add_paragraph("Failed:", group_num, test_num, funcname+"("+input+") EXCEPTED with", e, "!=", expected);
		group_fail++;
		test_num++;
		run_next_tests();
		return;
	}
	if(actual === expected) {
		group_success++;
	} else {
		add_paragraph("Failed:", group_num, test_num, funcname+"("+input+") ->", actual, "!=", expected);
		group_fail++;
	}
	test_num++;
	run_next_tests();
}

function run_next_tests() {
	setTimeout(run_next_tests_impl, 0);
}

window.onload = function() {
	outdiv = document.getElementById('output');
	progressdiv = document.getElementById('progress');
	run_next_tests();
}


</script>
</body>
</html>
END


