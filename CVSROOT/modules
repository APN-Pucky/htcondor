#
# The CVS modules file
#
# Three different line formats are valid:
#	key	-a    aliases...
#	key [options] directory
#	key [options] directory files...
#
# Where "options" are composed of:
#	-i prog		Run "prog" on "cvs commit" from top-level of module.
#	-o prog		Run "prog" on "cvs checkout" of module.
#	-t prog		Run "prog" on "cvs rtag" of module.
#	-u prog		Run "prog" on "cvs update" of module.
#	-d dir		Place module in directory "dir" instead of module name.
#	-l		Top-level directory only -- do not recurse.
#
# And "directory" is a path to a directory relative to $CVSROOT.
#
# The "-a" option specifies an alias.  An alias is interpreted as if
# everything on the right of the "-a" had been typed on the command line.
#
# You can encode a module within a module by using the special '&'
# character to interpose another module into the current module.  This
# can be useful for creating a module that consists of many directories
# spread out over the entire source repository.
#

# Convenient aliases
world		-a .

# CVSROOT support; run mkmodules whenever anything changes.
CVSROOT		-i mkmodules CVSROOT
modules		-i mkmodules CVSROOT modules
loginfo		-i mkmodules CVSROOT loginfo
commitinfo	-i mkmodules CVSROOT commitinfo
rcsinfo		-i mkmodules CVSROOT rcsinfo
editinfo	-i mkmodules CVSROOT editinfo

# Add other modules here...
code	-a Distfile GENERIC Imakefile config src
doc		-a config doc
AIX_SRC		src \
			condor_c++_util \
			condor_collector \
			condor_globalq \
			condor_includes \
			condor_kbdd \
			condor_master \
			condor_negotiator \
			condor_off \
			condor_on \
			condor_prio \
			condor_q \
			condor_rm \
			condor_schedd \
			condor_schedd.fsa.C++ \
			condor_scripts \
			condor_shadow \
			condor_standalone \
			condor_startd \
			condor_starter \
			condor_submit \
			condor_submit.v2 \
			condor_submit.v3 \
			condor_syscall_lib_aix \
			condor_test_suite_C \
			condor_test_suite_F \
			condor_tools \
			condor_util_lib \
			condor_xdr_lib \
			h
AIX_CODE	-a Distfile GENERIC Imakefile config AIX_SRC
