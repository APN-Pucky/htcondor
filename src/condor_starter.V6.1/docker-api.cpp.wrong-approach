#include "condor_common.h"
#include "condor_classad.h"
#include "condor_config.h"
#include "env.h"
#include "condor_daemon_core.h"

#include "docker-api.h"

//  sudo docker inspect --format 'ContainerId = {{.Id}} ; Pid = {{.State.Pid}} ; ExitCode = {{.State.ExitCode}}' <container-name>

int DockerAPI::run(
	const std::string & dockerName,
	const std::string & imageID,
	const std::string & command,
	const ArgList & args,
	const Env & e,
	const std::string & sandboxPath,
	std::string & containerID,
	int & pid,
	CondorError & err )
{
	ArgList al;
	std::string docker;
	// Horrible hack for personal condors.
	// FIXME: do something sane about root permissions, if possible.
	al.AppendArg( "sudo" );
	if( ! param( docker, "DOCKER" ) ) {
		dprintf( D_ALWAYS | D_FAILURE, "DOCKER is undefined.\n" );
		return -1;
	}
	al.AppendArg( docker );
	al.AppendArg( "run" );
	// TO-DO: Set up the environment.
	al.AppendArg( "--detach" );
	al.AppendArg( "--name" );
	al.AppendArg( dockerName );
	al.AppendArg( "--workdir" );
	al.AppendArg( sandboxPath );
	al.AppendArg( imageID );
	al.AppendArg( command );
	// Need i/o redirection.  Coordinate with DaemonCore's Create_Process();
	al.AppendArgsFromArgList( args );

	FamilyInfo familyInfo;
	familyInfo.max_snapshot_interval = param_integer( "PID_SNAPSHOT_INTERVAL", 15 );

	MyString displayString;
	al.GetArgsStringForDisplay( & displayString, 1 );
	dprintf( D_FULLDEBUG, "Attempting to run '%s %s'\n", docker.c_str(),
		displayString.c_str() );

	// We need backticks.
	int childFDs[3];

	// Docker doesn't need stdin.
	childFDs[0] = -1;

	int pipeFDs[2];
	if( ! daemonCore->Create_Pipe( pipeFDs, false, false, true ) ) {
		dprintf( D_ALWAYS | D_FAILURE, "Unable to create pipe to run Docker.\n" );
		return -2;
	}
	dockersStdOut = pipeFDs[0];
	childFDs[1] = pipeFDs[1];

	if( ! daemonCore->Create_Pipe( pipeFDs, false, false, true ) ) {
		dprintf( D_ALWAYS | D_FAILURE, "Unable to create pipe to run Docker.\n" );
		return -2;
	}
	dockersStdErr = pipeFDs[0];
	childFDs[2] = pipeFDs[2];

	// DCJOBOPT_SUSPEND_ON_EXEC might be handy for docker run.
	int childPID = daemonCore->Create_Process( docker.c_str(), al,
		PRIV_UNKNOWN, 1, FALSE, FALSE, NULL, sandboxPath.c_str(),
		& familyInfo, NULL, childFDs );

	if( childPID == FALSE ) { return -1; }

	pid = childPID;
	formatstr( containerID, "%d", pid );
	return 0;
}
