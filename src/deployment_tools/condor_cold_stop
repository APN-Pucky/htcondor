#! /usr/bin/perl -w

##*******************************************************************
## Stops a cold started condor installation and optionally 
## uninstalls the installation.
##
## Author: Joe Meehean
## Date: 7/15/05
##*******************************************************************

##*******************************************************************
## Note 1: The configfile paramters are interpreted. It should be the
## same exact value that was passed to cold_start.  The file name is
## extracted from the path, and then this program checks the location
## that cold_start would have put the installed version of the config.
## If it cannot find the installed version it falls back on using the
## original (note this will not currenly work with config files
## specified as http urls).
##*******************************************************************

#***
# Uses
#***
use strict;
use FindBin;
use Getopt::Long;
use File::Spec;
use File::Basename;

#***
# Constant Static Variables
#***
my $USAGE = 
    "Usage: condor_cold_stop [-f] <-configfile condor_config_file>\n".
    "[-basedir base_dir]\n".
    "[-localdir local_dir] [-runlocalconfig config_file]\n".
    "[-cleaninstall] [-cleanlocal] [-stop]\n".
    "[-logarchive] [-spoolarchive] [-execarchive]\n".
    "[-log install_log][-help]\n";

my $INSTALL_LOG_DEFAULT = 'install.log';

my $LOCAL_STOP_PROGRAM = 'condor_local_stop';
my $LOCAL_CONFIG_FLAG = '-localconfig';
my $FORCE_FLAG = '-f';

my $INSTALL_CLEANUP_PROGRAM = 'cleanup_release';

my $LOCAL_CLEANUP_PROGRAM = 'condor_cleanup_local';
my $LOCALDIR_OPT          = '-localdir';
my $ARCHIVEONLY_OPT       = '-archiveonly';
my $LOGARCHIVE_OPT        = '-logarchive';
my $SPOOLARCHIVE_OPT      = '-spoolarchive';
my $EXECARCHIVE_OPT       = '-execarchive';


#***
# Non-Constant Static Variables
#***
my $force = 0;
my $clean_install_flag = 0;
my $clean_local_flag = 0;
my $stop_flag = 0;
my $log_archive = 0;
my $spool_archive = 0;
my $exec_archive = 0;
my $local_dir = '.';
my $base_dir = '.';
my $global_config_file = 0;
my $local_config_file = 0; 
my $install_log_path = 0;
my $help_flag = 0;

#***
# Main Function
#***

#Process command-line arguments
GetOptions( 'force'=>\$force,
	    'configfile=s'=>\$global_config_file,
	    'basedir=s'=>\$base_dir,
	    'localdir=s'=>\$local_dir,
	    'runlocalconfig=s'=>\$local_config_file,
	    'cleaninstall'=>\$clean_install_flag,
	    'cleanlocal'=>\$clean_local_flag,
	    'stop'=>\$stop_flag,
	    'logarchive=s'=>\$log_archive,
	    'spoolarchive=s'=>\$spool_archive,
	    'execarchive=s'=>\$exec_archive,
	    'log=s'=>\$install_log_path,
	    'help'=>\$help_flag,
	    );

# If none of the options are set, then all of them are
if( !$clean_install_flag && !$clean_local_flag && !$stop_flag ){
    $clean_install_flag = 1;
    $clean_local_flag = 1;
    $stop_flag = 1;
}

# Required Stop Arguments
my $missing_stop_requirements = $stop_flag && !$global_config_file;

die $USAGE if( $help_flag || $missing_stop_requirements );

# Perform the stop
&StopIt() if( $stop_flag );

# Archive and cleanup the local_dir if neccessary
if( $clean_local_flag || $log_archive || 
    $spool_archive || $exec_archive){
    &CleanUpLocal() 
}
   
# Perform install cleanup
&CleanUpInstall() if ( $clean_install_flag );



#*********************************************************************
# Perform the Shutdown Operation
#*********************************************************************
sub StopIt(){
    # Find the global configuration file
    my $global_config_path = &FindConfigFilePath($global_config_file);
    
    # Construct the basic arguments to local_stop
    my @args = ($global_config_path, $base_dir);

    # Add the local config if nessecary
    if( $local_config_file ){
	my $local_config_path = &FindConfigFilePath($local_config_file);
	push @args, $LOCAL_CONFIG_FLAG, $local_config_path;
    }

    # Add the force option if neccessary
    push @args, $FORCE_FLAG if( $force );

    # Execute local_stop
    my $local_stop_path = File::Spec->catpath(0, $FindBin::Bin, $LOCAL_STOP_PROGRAM);
    !system $local_stop_path, @args
	or die "FAILED: Failed to stop the local condor installation";
}

#*********************************************************************
# Searches the installation directory and then the original location
# for the given configuration file, in that order.  Returns a path to 
# the configuration file that exists.
#*********************************************************************
sub FindConfigFilePath(){
    my ($config_file) = @_;  #Name the parameters
    
    # Extract just the file name
    my $config_name = basename $config_file;

    # Check the installation directory for the installed version
    my $config_path = 
	File::Spec->catpath(0, $base_dir, $config_name);

    # If not in the installation directory
    # Try using the original version
    if( !-e $config_path ){
	$config_path = $config_file;
    } 

    # If the original version is missing as well
    # Fail
    if( !-e $config_path ){
	die "FAILED: Failed to find the configuration file". 
	    "in the installation directory [$config_path] ".
	    "OR in its original location [$config_file]";
    }

    return $config_path;
}

#*********************************************************************
# Cleans and archives the local_dir.
#*********************************************************************
sub CleanUpLocal(){
    
    # Construct the basic arguments to condor_cleanup_local
    my @args = ($LOCALDIR_OPT, $local_dir);

    # Archive only if required
    push @args, $ARCHIVEONLY_OPT if( !$clean_local_flag );

    # Archive the log dir if required
    push @args, ($LOGARCHIVE_OPT, $log_archive) if ($log_archive);

    # Archive the spool dir if required
    push @args, ($SPOOLARCHIVE_OPT, $spool_archive) if ($spool_archive);

    # Archive the exec dir if required
    push @args, ($EXECARCHIVE_OPT, $exec_archive) if ($exec_archive);

    # Find the cleanup_local executable
    my $local_cleanup_path = 
	File::Spec->catpath(0, $FindBin::Bin, $LOCAL_CLEANUP_PROGRAM);

    # condor_cleanup_local -localdir $local_dir 
    !system $local_cleanup_path, @args
	or die "FAILED: Failed to cleanup local_dir";


}

#*********************************************************************
# Unistall the condor installation
#*********************************************************************
sub CleanUpInstall(){
    # Determine the location of the install log
    if( !$install_log_path ){
	$install_log_path = File::Spec->catpath(0, $base_dir, $INSTALL_LOG_DEFAULT);
    }

    # Construct the basic arguments to install_cleanup
    my @args = ($install_log_path);
    
    # Execute the cleanup
    my $install_cleanup_path = 
	File::Spec->catpath(0, $FindBin::Bin, $INSTALL_CLEANUP_PROGRAM);
    !system $install_cleanup_path, @args
	or die "FAILED: Failed to cleanup local condor installation: $!";
}
