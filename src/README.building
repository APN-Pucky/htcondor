This file is intended to describe the steps needed to build Condor from the
source code tree.

Tools
-----

Condor requires the use of "imake" which is part of the X11 release on most
systems.  It can be retrieved from many source code sites if it is not
already available on your system.

We build Condor using gcc and g++ on all of our platforms.  We are
currently using version 2.6.3 of these compilers, and cannot make any
claims about the ability to compile Condor with any other compilers or
other versions of gcc.

Condor also uses the utilities awk, lex, and yacc, so they need to be
available in order to perform a build.

Setting Up
----------

The source release of Condor should contain a config directory and a src
directory.  It may be necessary to edit the files in the config directory
to match your environment.  In particular, the platform specific config
file (which is of the form ARCH_OS.cf) contains paths to the C and C++
compiler you are using.


Using imake
-----------

The Condor source is provided with a number of Imakefiles which are
transformed into normal Makefile in order to do compilation.  imake uses
rules defined in the config directory, so you must tell imake where that
directory lies using the -Idir command line option which works in much the
same way you use -I with the C compiler to specify what directory to find
header files in.  As a short-cut, we use a shell script called condor_imake
which sets this up automatically.  condor_imake is included below:

#!/bin/csh
set arch = `uname -m`
set osversion = `uname -r`

if (( ${arch} == "sun4m" ) && ( ${osversion} == "5.4" )) then
	imake -s Makefile -DIS_SUN4M_SOLARIS -I../../config -I../config
else
	imake -s Makefile -I../../config -I../config
endif


Running condor_imake in either the src directory or in any of the
individual Condor module directories should generate a proper Makefile
which can then be processed with the normal make program.  The last caveat
to insure a proper Makefile is generated is to insure that the C
preprocessor imake will use compiles with the ANSI specification.  The best
way we've found to do this is simply to use gcc for preprocessing as well.
Our shell script for doing this, which we call ansi_cpp is included below:

#!/bin/csh
set platform = `uname -m`
set os = `uname -s`

if ( ${platform} == "i86pc" ) then
	gcc -E $*
else if ( ${platform} == "sun4m" ) then
	gcc -E $*  
else if ( ${platform} == "alpha" ) then
	gcc -E $*
else if ( ${os} == "HP-UX" ) then
	gcc -E $*
else
	gcc -E $* -
endif
endif


In order to for imake to use this script for pre-processing, you must set
an environment variable called IMAKECPP.  So, for example you might have a
line in your .cshrc which says:
setenv IMAKECPP /path/to/ansi_cpp

Bourne shell users could add the corresponding environment setting commands
to their .profile files.


Building Condor
---------------

The simplest way to build condor is to simply run imake in the src
directory, and then run make in the src directory.  This will run imake in
each of the condor module sub-directories, and then make.  Individual
modules can be made simply by running imake followed by make in the
sub-directories.  All condor modules rely on the h, condor_util_lib,
condor_c++_util and condor_xdr_lib directories, so these should always be
built first.  Running "make release" (after imake) at either the src or
sub-directory level will copy the resulting executables, scripts, and
libraries into a release_dir directory which will be built under the src
directory.  The format of the release_dir directory is the same as the
binary distributions of Condor, so installing from a release_dir is
equivalent to installing from a freshly unpacked binary release from our
ftp site.

Questions relating to Condor should be sent to condor-admin@cs.wisc.edu.
