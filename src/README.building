This file is intended to describe the steps needed to build Condor version
6.0.x from the source code tree.  The Condor build environment is very 
large and full of specific features for the UW Condor Team.  This document
will help with the very basics, i.e. just getting Condor to compile.

Tools
-----

Condor requires the use of "imake" which is part of the X11 release on most
systems.  It can be retrieved from many source code sites if it is not
already available on your system.  Note: the imake included with the operating
system by some vendors is often not sufficient.  Condor's build environment
makes heavy use of many of imake's features, and is only ensured to work with
the imake distrbuted along with the X11 release sources (ftp://ftp.x.org).

We build Condor using gcc and g++ on all of our Unix platforms.  We are
currently using version 2.7.2 of these compilers, and cannot make any
claims about the ability to compile Condor with any other compilers or
other versions of gcc.  Note: future versions of Condor for Unix will use
EGCS.

Building Condor also uses the utilities awk, lex, and yacc, so they need to be
available in order to perform a build.

Setting Up
----------

The source release of Condor should contain a config directory and a src
directory.  It may be necessary to edit the files in the config directory
to match your environment.  In particular, the site-specific config file named
"site.def" contains paths to the C and C++ compiler you are using.  Make
certain to edit the definitions for  CCompiler, CPlusCompiler, Demangler, and
GccVersion.  If you are not going to compile with GNU gcc/g++ (bad idea), you
will also need to customize CrtLibPath.


Using imake
-----------

The Condor source is provided with a number of Imakefiles which are
transformed into normal Makefile in order to do compilation.  imake uses
rules defined in the config directory, so you must tell imake where that
directory lies using the -Idir command line option which works in much the
same way you use -I with the C compiler to specify what directory to find
header files in.  There are a few other options imake will require on certain
platforms.  To make life easy, we use a shell script called condor_imake
which takes care of this automatically.  The condor_imake script is located in
src/condor_imake.

Running condor_imake in either the src directory or in any of the
individual Condor module directories should generate a proper Makefile
which can then be processed with the normal make program.  The last caveat
to insure a proper Makefile is generated is to insure that the C
preprocessor imake will use compiles with the ANSI specification.
Unfortunately, the preprocessor "cpp" included by many vendors does _not_
conform to the ANSI specification.  Since compiling Condor needs gcc, the best
way we've found to do this is simply to use gcc for preprocessing as well.
Our shell script for doing this, which we call ansi_cpp is included below:

#!/bin/csh
set platform = `uname -m`
set os = `uname -s`

if ( ${platform} == "i86pc" ) then
	gcc -E $*
else if ( ${platform} == "sun4m" ) then
	gcc -E $*  
else if ( ${platform} == "alpha" ) then
	gcc -E $*
else if ( ${os} == "HP-UX" ) then
	gcc -E $*
else
	gcc -E $* -
endif
endif


In order to for imake to use this script for pre-processing, you must set
an environment variable called IMAKECPP.  So, for example you might have a
line in your .cshrc which says:
setenv IMAKECPP /path/to/ansi_cpp

Bourne shell users could add the corresponding environment setting commands
to their .profile files.


Building Condor
---------------

You are now ready to build Condor.  Follow the below steps:

1) cd into the config directory and customize any imake settings as described
above.  Specifically, edit the paths for CCompiler, CPlusCompiler, 
Demangler, CrtLibPath in the site.def file.

2) On most platforms (all except Linux?), you will need to make ansi_cpp as
described above and make certain the environment variable IMAKECPP points to
it.

3) cd into the src directory

4) enter "./condor_imake"

5) now enter "make" to build all the modules, and/or "make release" to build
all the modules, create a src/release_dir directory, and copy all the Condor
release files into the release_dir.

Questions relating to Condor should be sent to condor-admin@cs.wisc.edu.
