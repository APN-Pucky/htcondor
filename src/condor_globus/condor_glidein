#!/s/std/bin/perl
#!/usr/bin/perl

##these are the files that need to be staged on the remote machine
$config = "condor_config.glidein";
@DAEMONS = ( "condor_master", "condor_startd", "condor_starter",
		"condor_starter.pvm", "condor_pvmd" );

if ( ( $error = parse_command_line() )
		|| ( $error = gather_info() ) )
{
	print STDERR "$error\n";
	exit( 1 );
}

$count = 0;
foreach $CONTACT ( @CONTACTS ) {
	if ( ( $CONTACT eq "" ) || !defined( $CONTACT ) ) {
		print "ERROR: no contacts, exiting\n";
		exit( 1 );
	}
		##don't use commented out entries
	if ( $CONTACT =~ /#/ ) {
		next;
	}
	##this mess tries to deal with contacts of forms:
	##<hostname> OR  <hostname>/jobmanger-<something> OR <full contact string>
	##and keeping the Contact string and the hostname parts for diff purposes
	$GLOBUSHOST = $CONTACT; 
	if ( $CONTACT =~ /\// ) { ## either host:port/... or host/jobmanager...
		( $GLOBUSHOST = $CONTACT ) =~ s/\/.*//;
	}
	if ( $CONTACT =~ /:/ ) {  ## form of host:port
		( $GLOBUSHOST = $CONTACT ) =~ s/:.*//;
	}
		## contact is just host
	if ( ( $CONTACT !~ /:/ ) && ( $CONTACT !~ /\// ) ) { 
		$CONTACT = "$CONTACT/jobmanager" . '-' . $scheduler;
	}
	( $UID_DOMAIN = $GLOBUSHOST ) =~ s/[^\.]*.//;
		##by this time, $GLOBUSHOST is fully qualified hostname, and 
		##$CONTACT is as full of a contact string as we can get. This
		##is important because using the contact string with the port
		##number,  and X509 distinguished name won't require globusrun
		##to contact the MDS. UID_DOMAIN is GLOBUSHOST - hostname


		##before anything else, ensure we can run on the remote host
	if ( silently( "$G_RUN -a -r '$CONTACT'" ) ) {
		print STDERR "Error contacting resource $CONTACT\n";
		exit( 2 );
	}

	if ( !$runonly ) {
		if ( $error = do_remote_setup() ) {
			print STDERR "Error: $error\n";
			exit( 2 );
		}
	}
	if ( !$setuponly ) {
		do_submit();
	}
}

exit( 0 );

## END OF PROGRAM
sub do_submit() {
	if ( $arch =~ /linux/ ) {
		$mail_arch = "/usr/bin/mail";
	}
	elsif ( $arch =~ /solaris/ ) {
		$mail_arch = "/usr/ucb/mail";
	}
	elsif ( $arch =~ /irix/ ) {
		$mail_arch = "/usr/sbin/mailx";
	}
	else {
		$mail_arch = "/bin/mail";
	}
	$GLOBUSRSL = "";
	if ( $queue ) {
		$GLOBUSRSL .= "(queue=$queue)";
	}
	if ( $cpucount > 1 ) {
			##claim N cpus, but only run one copy of the program
		$GLOBUSRSL .= "(count=$cpucount)(jobtype=single)";
	}
	$GLOBUSRSL .= "(rsl_substitution=(BASEDIR $basedir)(ARCHDIR $archdir))";

	$GLOBUSENV = "(environment=";
	$GLOBUSENV .= "(CONDOR_CONFIG \$(BASEDIR)/$config)";
	$GLOBUSENV .= "(_condor_CONDOR_HOST $CONDOR_HOST)";

		##need to specify basedir because globusrun doesn't expand $(HOME)
		##in the env list, only in args and exec lines!!!!!
	$GLOBUSENV .= "(_condor_LOCAL_DIR \$(BASEDIR)/local)";
	$GLOBUSENV .= "(_condor_SBIN \$(ARCHDIR))";

		##if submitting to Condor scheduler under Globus, don't want "queue <n>"
		##starting <n> copies, EACH asking for <n> CPUs, that would give us
		## <n>**2 CPUs....
	if ( $CONTACT =~ /condor/ ) {
		$GLOBUSENV .= "(_condor_NUM_CPUS 1)";
	}
	else {
		$GLOBUSENV .= "(_condor_NUM_CPUS $cpucount)";
	}
	$GLOBUSENV .= "(_condor_UID_DOMAIN $UID_DOMAIN )";
	$GLOBUSENV .= "(_condor_FS_DOMAIN $UID_DOMAIN )";
	$GLOBUSENV .= "(_condor_MAIL $mail_arch )";
	if ( $run_for != 0 ) {
		$GLOBUSENV .= "(_condor_STARTD_NOCLAIM_SHUTDOWN " . ($run_for * 60) . ")";
	}
	if ( $anybody ) {
		$GLOBUSENV .= "(_condor_START  True)";
	}
	else {
		$GLOBUSENV .= "(_condor_START_owner $ENV{'LOGNAME'})";
	}
	$GLOBUSENV .= ")";

		##generate condor_submit description file
#	open( SUBMIT, ">sub3" );
	open( SUBMIT, "|$submit" );
	print SUBMIT <<"EOF";
Getenv = True
Universe = Globus

#replace executable with GlobusExecutable for non-expansion of Globus macros
GlobusExecutable = $archdir/condor_master

#replace arguments with GlobusArguments for non-expansion of Globus macros
#GlobusArguments = -dyn -f -n $SUBDIR
GlobusArguments = -dyn -f 

GlobusRSL = $GLOBUSRSL $GLOBUSENV

GlobusScheduler = $CONTACT
Queue

EOF
	close( SUBMIT );
}


sub gather_info() {
		##ensure the needed condor programs are avail...
	chomp( $submit = `which condor_submit` );
	chomp( $CONFIGVAL = `which condor_config_val` );
	chomp( $STATUS = `which condor_status` );
	if ( ! ( -x $CONFIGVAL && -x $STATUS && -x $submit ) ) {
		return( "cannot find programs \"condor_config_val\" or "
				. "\"condor_status\" or \"condor_submit\" needed for setup" );
	}

	if ( defined( $CONDOR_ADMIN ) ) {
		$condor_admin = $CONDOR_ADMIN;
	}
	else {
		chomp( $condor_admin = getlogin() . '@' . `$CONFIGVAL UID_DOMAIN`);
	}

	chomp( $CONDOR_HOST = `$CONFIGVAL CONDOR_HOST` );

	#set CONDOR_VERSION 
	@TMP = `$STATUS -master -format "%s" CondorVersion $CONDOR_HOST`;
		#if we get a blank response because the collector isn't running
		#a master in the same pool, try our master...
	if ( !/\S/ =~ @TMP ) {
			$HOST = $ENV{'HOST'};
			@TMP = `$STATUS -master -format "%s" CondorVersion $HOST`;
	}
	( $_, $CONDOR_VERSION, $_) = split( / *[$: ]+/, $TMP[0] );

	$arch = $CONDOR_VERSION . '-$(GLOBUS_HOST_CPUTYPE)-$(GLOBUS_HOST_'
		. 'MANUFACTURER)-$(GLOBUS_HOST_OSNAME)-$(GLOBUS_HOST_OSVERSION)';

		##if archdir wasn't specified on command line
	if ( defined( $ARCHDIR ) ) {
		$archdir = $ARCHDIR;
	}
	else {
		$archdir = "$basedir/$arch";
	}

		## globus programs
	chomp( $G_RUN = `which globusrun` );
	chomp( $G_RCP = `which globus-rcp` );
	chomp( $G_INFO = `which grid-proxy-info` );
	chomp( $G_INIT = `which grid-proxy-init` );

	foreach $G_PROG ( $G_RUN, $G_RCP, $G_INFO, $G_INIT ) {
		if ( ! -x $G_PROG ) {
			return( "Error, cannot find Globus program \"$G_PROG\"" );
		}
	}

	if ( !defined( $ENV{'X509_USER_PROXY'} ) ) {
		return( "$NAME requires you to define X509_USER_PROXY in your ENV\n"
			. "	  (or in your Condor submit description file)\n"
			. "	  N.B.: if it's already set, check your PATH for Globus progs" );
	}
	else {
		if ( silently( "$G_INFO -exists -hours 4" ) ) {
			return( "$NAME needs a valid grid proxy, check access\n"
				. "	 permissions on \"$ENV{'X509_USER_PROXY'}\"" );
		}
	}

		##also, ensure GLOBUS_INSTALL_PATH and HOME are set in ENV
	if ( !defined( $ENV{'HOME'} ) ) {
		return( "$NAME: $HOME not in your ENV" );
	}
	if ( ! ( defined( $ENV{'GLOBUS_INSTALL_PATH'} )
			|| defined( $ENV{'GLOBUS_DEPLOY_PATH'} ) ) )
	{
		return( "$NAME: either GLOBUS_INSTALL_PATH or GLOBUS_DEPLOY_PATH "
			. "must be defined in your ENV" );
	}

	return( 0 );
}

sub usage() {
		#print out the command line options
	print STDERR "Usage: $NAME [options] [<globus contact>]\n";
	print STDERR "\tWhere <globus contact> is of form:\n";
	print STDERR "\t<hostname> | <hostname>/jobmanager-<scheduler> | <full contact string>\n";
				
print STDERR "	Valid options:\n"
. "   --basedir <name>		   Use <name> as remote base directory\n"
. "                            [default: $(HOME)/Condor_glidein]\n"
. "   --archdir <name>		   Specify remote dir for daemon executables\n"
. "                            [default is built from system config info]\n"
. "   --localdir <name>       Use <name> as remote base for log/execute dirs\n"
. "                            [default on remote host: $(BASEDIR)/local]\n"
. "   --contactfile <file>    Specify file from which to read Globus contacts\n"
. "   --setuponly|--runonly	Setup and exit  |  No setup, just run\n"
. "   --scheduler <scheduler> Globus scheduler  [default=fork]\n"
. "   --queue <queue>         Queue to use on Globus scheduler\n"
. "   --count <CPU count>     Number of CPUs to request [default=1]\n"
. "   --runfor <mins>         Remote daemons exit gracefully after <mins>\n"
. "                            without running a Condor job [default=30]\n"
. "   --anybody               Allow any user to run jobs on your glideins\n"
. "   --admin <email address> Who to email with problems [default=<you>]\n"
. "   --genconfig             Generate condor_config.glidein\n"
. "   --help                  Print this usage, see documentation for info\n";
}

sub parse_command_line() {
		#parse command line options
	($name = $0) =~ s/.*\///; ## strip off directory path...
	$scheduler = "fork";
	$run_for = 30;
	$cpucount = 1;
	$basedir = '$(HOME)/Condor_glidein';
	##don't set default archdir because it is built below from pool version, arch
	$localdir = "$basedir/local";
	chomp( $username = `whoami` );

	use Getopt::Long;
	$RESULT = GetOptions(
		"basedir=s" => \$basedir,
		"archdir=s" => \$ARCHDIR,
		"localdir=s" => \$localdir,
		"contactfile=s" => \$contactfile,
		"setuponly" => \$setuponly,
		"runonly" => \$runonly,
		"scheduler=s" => \$scheduler,
		"queue=s" => \$queue,
		"count=i" => \$cpucount,
		"runfor=i" => \$run_for,
		"anybody" => \$anybody,
		"admin=s" => \$CONDOR_ADMIN,
		"genconfig" => \$gen_config,
		"help" => \$help );
	if ( !$RESULT ) {
		usage();
		exit( 1 );
	}

	if ( $setuponly && $runonly ) {
		return( "ERROR: $NAME --setuponly and --runonly are mutually exclusive");
	}

	if ( $help ) {
		print STDERR "Add a remote node to your local Condor pool\n";
		print STDERR "For detailed help, see the condor documentation "
			. "concerning condor_glidein\n\n";
		usage();
		exit( 0 );
	}

	if ( $contactfile ) {
		open( CONTACTS, "< $contactfile" );
		@CONTACTS = <CONTACTS>;
	}
	else {
		push( @CONTACTS, join( ' ', @ARGV ) );
	}
	chomp( @CONTACTS );

	if ( $gen_config ) {
		gen_main_config();
	}

	return( 0 );
}

sub silently {
		#get rid of unsightly output from system commands
		#expects a list compatible with system()
	if ( $pid = fork() ) {
		#parent
		waitpid $pid, 0;
	}
	else {
		#child
		close STDOUT;
		close STDERR;
		exec( @_ );
	}
	return $?;
}

sub gen_main_config() {
	##generate the config files
	open( CONDOR_CONFIG, ">condor_config.glidein");
	print CONDOR_CONFIG <<"EOF";

	LOG = \$(LOCAL_DIR)/log
	EXECUTE = \$(LOCAL_DIR)/execute
	CONDOR_ADMIN = $condor_admin
	HOSTALLOW_ADMINISTRATOR = \$(HOSTNAME)

	MAIL = /bin/mail
	DAEMON_LIST = MASTER, STARTD
	MASTER_ADDRESS_FILE = \$(LOG)/.master_address
	MASTER = \$(SBIN)/condor_master
	MASTER_LOG = \$(LOG)/MasterLog
	STARTD = \$(SBIN)/condor_startd
	STARTER = \$(SBIN)/condor_starter

	ALTERNATE_STARTER_1 = \$(SBIN)/condor_starter.pvm
	PVMD = \$(SBIN)/condor_pvmd

	USE_NFS = False
	USE_CKPT_SERVER = False
	NEGOTIATOR_HOST	= \$(CONDOR_HOST)
	COLLECTOR_HOST = \$(CONDOR_HOST)

	LOCK = \$(LOG)
	STARTD_LOG = \$(LOG)/StartdLog
	STARTER_LOG = \$(LOG)/StarterLog

	STARTD_DEBUG =

	SUSPEND : False
	PREEMPT : False
	WANT_SUSPEND : True
	SUSPEND_VANILLA : False
	WANT_SUSPEND_VANILLA : True
	KILL : False
	UPDATE_INTERVAL = 30
	IS_GLIDEIN = True
	STARTD_EXPRS = IS_GLIDEIN, START
	PREEN_INTERVAL = 0
EOF
	close CONDOR_CONFIG;
}

sub do_remote_setup() {
	$GASS_SERVER = "https://balthazar.cs.wisc.edu:12000/p/condor/public/binaries/glidein"; ##change this to read it from MDS
	$DAEMONS = join( ' ', @DAEMONS );

	$REM_SETUP = "/tmp/remote_setup.glidein";
	open( REM_SETUP, ">$REM_SETUP" );
	print REM_SETUP<<"EOF";

	BASEDIR=\$1
	ARCHDIR=\$2
	ARCH=\$3
	LOCALDIR=\$4
	GLOBUS_COPY=\$5

	CONFIG=\$BASEDIR/$config

	for newdir in \$BASEDIR \$ARCHDIR \$LOCALDIR; do
		if [ ! -d \$newdir ];
			then \$GLOBUS_SH_MKDIR \$newdir;
		fi
		if [ ! -d \$newdir ];
			then \$GLOBUS_SH_ECHO "ERROR mkdir \$newdir"
			exit 1;
		fi
	done

	if [ ! -f \$CONFIG -o -h \$CONFIG ];
		then \$GLOBUS_COPY $GASS_SERVER/$config file:\$BASEDIR/$config 
	fi

	cd \$ARCHDIR
	GETFILES=0
	for needexec in $DAEMONS; do
		if [ ! -f \$needexec -o -h \$needexec ];
			then GETFILES=1;
		fi
	done
	if [ \$GETFILES -eq 1 ];
		then \$GLOBUS_COPY $GASS_SERVER/\$ARCH.tar file:\$ARCHDIR/\$ARCH.tar &&
		\$GLOBUS_SH_TAR xf \$ARCH.tar;
		\$GLOBUS_SH_RM -f \$ARCH.tar;
	fi
##need some kind of error if tarball doesn't exist on GASS server!!
	exit


EOF
	close( REM_SETUP );
	$SYSTEM = "globusrun -w -r '$CONTACT' '&(executable=\$(GLOBUS_TOOLS_PATH)/bin/globus-sh-exec)(arguments=\$(GLOBUSRUN_GASS_URL)$REM_SETUP $basedir $archdir $arch $localdir \$(GLOBUS_TOOLS_PATH)/bin/globus-url-copy)'";

	if ( system( $SYSTEM ) ) {
		return( "Error-- cannot run setup script on remote machine" );
	}
	unlink( $REM_SETUP );
	return( 0 );
}
