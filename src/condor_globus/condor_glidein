#!/s/std/bin/perl
#Change first line to point to your perl

$CONDOR_SERVER = "https://balthazar.cs.wisc.edu:12000/p/condor/public/binaries/glidein";


##BEGIN MAIN PROGRAM

if ( do_initial_setup() || do_globus_setup() ) {
	exit( 11 );
}

	#this section deals with the fact that do_initial_setup might
	#have returned contact in one of three forms:
	#<FQHN>
	#<FQHN>:<port>/....
	#<FQHN>/jobmanager-....
$GLOBUSHOST = $CONTACT; 
if ( $CONTACT =~ /\// ) { ## either host:port/... or host/jobmanager...
	( $GLOBUSHOST = $CONTACT ) =~ s/\/.*//;
}
if ( $CONTACT =~ /:/ ) {  ## form of host:port
	( $GLOBUSHOST = $CONTACT ) =~ s/:.*//;
}
if ( ( $CONTACT !~ /:/ ) && ( $CONTACT !~ /\// ) ) { ## contact is just host
	$CONTACT = "$CONTACT/jobmanager-$SCHEDULER";
}

if ( defined( $HOLDREMHOSTDIR ) ) {
	$REMHOSTDIR = $HOLDREMHOSTDIR;
}
else {
	( $REMHOSTDIR = $GLOBUSHOST ) =~ s/\..*//;
}
###by now, CONTACT should be Globus-usable, GLOBUSHOST is just FQHN,
###and REMHOSTDIR is either just hostname or optioned directory

#before anything else, ensure we can run on the remote host
if ( silently( "$G_RUN -a -r '$CONTACT'" ) ) {
	print STDERR "Error contacting resource $CONTACT\n";
     exit( 12 );
}

#setup remote system, stage files if not already there
if ( !$runonly && host_setup() && do_remote_setup() ) {
	exit( 10 );
}

gen_master_string();
if ( $dump ) {
	print "$MASTER_STRING\n";
}
if ( !$setuponly ) {
		#if setuponly wasn't specified, execute the grid command to launch 
	open( RESULT, "$MASTER_STRING |" );
	@RESULT = <RESULT>;
	if ( ( $RESULT[0] !~ /GRAM Job submission successful/ ) 
		&& ( $RESULT[1] !~ /GRAM Job submission successful/ ) ) {
		print STDERR "Error running remote glidein script on $GLOBUSHOST\n";
		exit( 15 );
	}
	## print out the globus contact string for globusrun
	print $RESULT[2];

}
exit( 0 );


###END OF MAIN

sub usage() {
		#print out the command line options
	print STDERR "Usage: $NAME [options]  [--  <globus contact>]\n";
				
print STDERR "   Valid options:\n"
. "   --foreground            Don't run in globus batch (background) mode\n"
. "   --setuponly|--runonly   Setup and exit  |  No setup, just run\n"
. "   --scheduler <scheduler> Globus scheduler, (default=fork)\n"
. "   --queue <queue>         Queue to use on Globus scheduler\n"
. "   --count <CPU count>     Number of CPUs to request, default 1\n"
. "   --runfor <mins>         Condor daemons exit gracefully after <mins>\n"
. "   --dump                  Prints the generated command string to stdout\n"
. "   --probe                 Display values for local pool\n"
. "   --admin <address>       Who to email with problems (default you)\n"
. "   --pool <collector>      Which pool to join (default local pool)\n"
. "   --condorversion <ver>   Version of Condor in pool (default local)\n"
. "   --help                  Print this usage, see documentation for info\n";
}

sub do_initial_setup() {
		#parse command line options
	($NAME = $0) =~ s/.*\///; ## strip off directory path...
	$SCHEDULER = "fork";
	$RUN_FOR = 0;
	$COUNT = 1;
	$GLD = "Condor_glidein";

		#ensure -- (end of options) was used!
	$command = join( '#', @ARGV );

	use Getopt::Long;
	$RESULT = GetOptions(
		"foreground" => \$foreground,
		"runfor=i" => \$RUN_FOR,
		"directory=s" => \$HOLDREMHOSTDIR,
		"setuponly" => \$setuponly,
		"runonly" => \$runonly,
		"scheduler=s" => \$SCHEDULER,
		"queue=s" => \$QUEUE,
		"count=i" => \$COUNT,
		"probe" => \$PROBE,
		"dump" => \$dump,
		"admin=s" => \$CONDOR_ADMIN,
		"pool=s" => \$CONDOR_HOST,
		"condorversion=s" => \$CONDOR_VERSION,
		"help" => \$help );
	if ( !$RESULT ) {
		usage();
		return( 1 );
	}

	if ( $setuponly && $runonly ) {
		print STDERR 
			"ERROR: $NAME --setuponly and --runonly are mutually exclusive\n";
		return( 2 );
	}

	if ( $help ) {
		print STDERR "Add a remote node to your local Condor pool\n";
		print STDERR "For detailed help, see the condor documentation "
			. "concerning condor_glidein\n\n";
		usage();
		exit( 0 );
	}

	gather_pool_info();

	if ( $PROBE ) {
		print "ADMIN=$CONDOR_ADMIN\n";
		print "POOL=$CONDOR_HOST\n";
		print "CONDORVERSION=$CONDOR_VERSION\n";
		exit( 0 );
	}

			#ensure at least one hostname was provided
	if ( $#ARGV < 0 ) {
		usage();
		return( 3 );
	}

	if ( $command !~ /--#/ ) {
		usage();
		exit( 1 );
	}
	$CONTACT = join( ' ', @ARGV );

	#until startd has --runfor option, use sleep to fake, secs = mins * 60
	$RUN_FOR *= 60;

	return( 0 );
}

sub gather_pool_info() {
		#don't need to check any further if all of these are defined
	if ( defined( $CONDOR_ADMIN ) && defined( $CONDOR_HOST ) 
			&& defined( $CONDOR_VERSION ) ) 
	{
		return;
	}

	#ensure the needed condor programs are avail...
	chomp( $CONFIGVAL = `which condor_config_val` );
	chomp( $STATUS = `which condor_status` );
	if ( ! ( -x $CONFIGVAL && -x $STATUS ) ) {
		print STDERR "cannot find programs \"condor_config_val\" or "
				. "\"condor_status\" needed for setup\n";
		exit( 4 );
	}

	#set CONDOR_ADMIN if not on cmd line
	if ( !defined( $CONDOR_ADMIN ) ) {
		chomp( $CONDOR_ADMIN = getlogin() . '@' . `$CONFIGVAL UID_DOMAIN`);
	}

	#set CONDOR_HOST if not on cmd line
	if ( !defined( $CONDOR_HOST ) ) {
		chomp( $CONDOR_HOST = `$CONFIGVAL CONDOR_HOST` );
	}

	#set CONDOR_VERSION if not on cmd line
	if ( !defined( $CONDOR_VERSION ) ) {
		@TMP = `$STATUS -master -format "%s" CondorVersion $CONDOR_HOST`;

         #if we get a blank response because the collector isn't running
         #a master in the same pool, try our master...
      if ( !/\S/ =~ @TMP ) {
            $HOST = $ENV{'HOST'};
            @TMP = `$STATUS -master -format "%s" CondorVersion $HOST`;
      }
		( $_, $CONDOR_VERSION, $_) = split( / *[$: ]+/, $TMP[0] );
	}
}

sub silently {
		#get rid of unsightly output from system commands
		#expects a list compatible with system()
	if ( $pid = fork() ) {
		#parent
		waitpid $pid, 0;
	}
	else {
		#child
		close STDOUT;
		close STDERR;
		exec( @_ );
	}
	return $?;
}

sub gen_master_string() {
	if ( $foreground ) {
		$MODE = "-w";
	}
	else {
		$MODE = "-b";
	}
	$MASTER_STRING = "$G_RUN $MODE -r '$CONTACT' "
		. "'&(executable=\$(HOME)/$GLD/$REMHOSTDIR/sbin/condor_master)";

	$MASTER_STRING .= "(arguments=";
	if ( $RUN_FOR > 0 ) {
		$MASTER_STRING .= " -r $RUN_FOR ";
	}
	$MASTER_STRING .= "-c \$(HOME)/$GLD/$REMHOSTDIR/condor_config.host ";
	$MASTER_STRING .= "-f -n $REMHOSTDIR ";
	$MASTER_STRING .= ")";

	if ( defined( $QUEUE ) ) {
		$MASTER_STRING .= "(queue=$QUEUE)";
	}
	if ( $condor ) {
		$MASTER_STRING .= "(jobtype=condor)";
	}
	$MASTER_STRING .= "'";
}

sub gen_host_config() {
	open( CONDOR_CONFIG, ">/tmp/GL_condor_config.host" );
	print CONDOR_CONFIG <<"EOF";
	GLOBAL = $RHOME/$GLD
	DIRECTORY = $REMHOSTDIR
	LOCAL = \$(GLOBAL)/\$(DIRECTORY)
	BIN = \$(LOCAL)/sbin
	LOCAL_DIR = \$(LOCAL)
	LOCAL_CONFIG_FILE = \$(GLOBAL)/condor_config
EOF
	close( CONDOR_CONFIG );
}

sub gen_main_config() {
	##generate the config files
	open( CONDOR_CONFIG, ">/tmp/GL_condor_config");
	print CONDOR_CONFIG <<"EOF";

	CONDOR_ADMIN = $CONDOR_ADMIN
	CONDOR_HOST	 = $CONDOR_HOST

	HOSTALLOW_ADMINISTRATOR = \$(HOSTNAME)
	UID_DOMAIN = $UID_DOMAIN
	FILESYSTEM_DOMAIN = $UID_DOMAIN
	START : Owner == \"$ENV{'LOGNAME'}\"

	NUM_VIRTUAL_MACHINES = $COUNT

	LOG = \$(LOCAL_DIR)/log
	SPOOL = \$(LOCAL_DIR)/spool
	EXECUTE = \$(LOCAL_DIR)/execute

	MAIL = /bin/mail
	DAEMON_LIST = MASTER, STARTD
	MASTER_ADDRESS_FILE = \$(LOG)/.master_address
	MASTER = \$(BIN)/condor_master
	MASTER_LOG = \$(LOG)/MasterLog
	STARTD = \$(BIN)/condor_startd
	STARTER = \$(BIN)/condor_starter

	ALTERNATE_STARTER_1 = \$(BIN)/condor_starter.pvm
	PVMD = \$(BIN)/condor_pvmd

	USE_NFS = False
	USE_CKPT_SERVER = False
	NEGOTIATOR_HOST	= \$(CONDOR_HOST)
	COLLECTOR_HOST = \$(CONDOR_HOST)

	LOCK = \$(LOG)
	STARTD_LOG = \$(LOG)/StartdLog
	STARTER_LOG = \$(LOG)/StarterLog

	STARTD_DEBUG =

	SUSPEND : False
	WANT_SUSPEND : True
	SUSPEND_VANILLA : False
	WANT_SUSPEND_VANILLA : True
	KILL : False
EOF
	close CONDOR_CONFIG;
}

sub do_globus_setup() {
		##ensure the needed globus programs are here, and we have a valid proxy
	chomp( $G_RUN = `which globusrun` );
	chomp( $G_RCP = `which globus-rcp` );
	chomp( $G_INFO = `which grid-proxy-info` );
	chomp( $G_SEARCH = `which grid-info-search` );

	foreach $G_PROG ( $G_RUN, $G_RCP, $G_INFO, $G_SEARCH ) {
		if ( ! -x $G_PROG ) {
			print STDERR "$G_PROG\n";
			return( 5 );
		}
	}

	if ( !defined( $ENV{'X509_USER_PROXY'} ) ) {
		print STDERR "$NAME requires you to define X509_USER_PROXY in your ENV\n"
			. "     (or in your Condor submit description file)\n"
			. "     N.B.: if it's already set, check your PATH\n";
		return( 6 );
	}
	else {
		if ( system( "$G_INFO -exists -hours 4" ) ) {
			print STDERR "$NAME needs a valid grid proxy, check access\n"
				. "    permissions on \"$ENV{'X509_USER_PROXY'}\"\n";
			return( 7 );
		}
	}
		##also, ensure GLOBUS_INSTALL_PATH and HOME are set in ENV
	if ( !defined( $ENV{'HOME'} ) ) {
		print STDERR "$NAME: $HOME not in your ENV\n";
		return( 8 );
	}
	if ( ! ( defined( $ENV{'GLOBUS_INSTALL_PATH'} ) 
			|| defined( $ENV{'GLOBUS_DEPLOY_PATH'} ) ) ) 
	{
		print STDERR "$NAME: either GLOBUS_INSTALL_PATH or GLOBUS_DEPLOY_PATH "
			. "must be defined in your ENV\n";
		return( 9 );
	}

	return( 0 );
}

sub host_setup() {
	( $UID_DOMAIN = $GLOBUSHOST ) =~ s/[^\.]*.//;

	#want to do a MDS lookup for the host, and get all the info we
	#need from the results
	@RESULT = `$G_SEARCH '(hostname=$GLOBUSHOST)' canonicalsystemname`;
	chomp( $MACHINE_INFO = $RESULT[1] );
	$MACHINE_INFO =~ s/.*=//;
	$MACHINE_INFO =~ s/ /-/g;
	$MACHINE_INFO = "$CONDOR_VERSION-$MACHINE_INFO";

	return 0;
}

sub do_remote_setup() {
	$EXEC_DIR = ( "\$RHOME" . "/$GLD/$MACHINE_INFO" );
	$HOST_DIR = ( "\$RHOME" . "/$GLD/$REMHOSTDIR" );

	$DIRS = "\$RHOME" . "/$GLD " . " $EXEC_DIR  $HOST_DIR "
		. "$HOST_DIR/spool $HOST_DIR/execute $HOST_DIR/log";
	$FILES = "\$RHOME" . "/$GLD/condor_config";
	$EXECS = "$EXEC_DIR/condor_master "
		. "$EXEC_DIR/condor_startd "
		. "$EXEC_DIR/condor_starter "
		. "$EXEC_DIR/condor_starter.pvm "
		. "$EXEC_DIR/condor_pvmd";

	$REMOTE_SETUP_FILE = "remote_setup.condor";
	open( REMOTE, ">/tmp/$REMOTE_SETUP_FILE" );
	print REMOTE <<"EOF2";

	RHOME=\$1;
	\$GLOBUS_SH_ECHO \"RHOME \$RHOME\"

	GLOBUS_COPY=\$2


	for newdir in $DIRS; do
		if [ ! -d \$newdir ];
			then \$GLOBUS_SH_MKDIR \$newdir;
		fi
		if [ ! -d \$newdir ];
			then \$GLOBUS_SH_ECHO "ERROR mkdir \$newdir"
			exit;
		fi
	done

	\$GLOBUS_SH_LN -s ../$MACHINE_INFO $HOST_DIR/sbin

	for needfile in $FILES; do
		if [ ! -f \$needfile -o -h \$needfile ];
			then \$GLOBUS_SH_ECHO "NEED \$needfile";
		fi
	done

	GETFILES=0
	for needexec in $EXECS; do
		if [ ! -f \$needexec -o -h \$needexec ];
			then GETFILES=1;
		fi
	done

	if [ \$GETFILES -eq 1 ];
		then \$GLOBUS_COPY $CONDOR_SERVER/$MACHINE_INFO.tar file:$EXEC_DIR/$MACHINE_INFO.tar &&
		cd $EXEC_DIR &&
		\$GLOBUS_SH_TAR xf $MACHINE_INFO.tar;
		\$GLOBUS_SH_RM -f $MACHINE_INFO.tar;
	fi
	exit
EOF2

	close( REMOTE );

#beta version of globusrun requires GLOBUS_INSTALL_PATH junk below,
#that line can be removed when that bug is fixed....
	$EXEC = "$G_RUN -w -r '$CONTACT' '&"
		. "(executable=\$(GLOBUS_TOOLS_PREFIX)/bin/globus-sh-exec)"
		. "(arguments=\$(HOME)/$GLD/$REMOTE_SETUP_FILE "
		. "\$(HOME) "
		. "\$(GLOBUS_TOOLS_PREFIX)/bin/globus-url-copy "
		. ")"
		. "(environment=(GLOBUS_INSTALL_PATH \$(GLOBUS_INSTALL_PATH))"
		. " (X509_USER_PROXY /u/m/i/mikeu/proxy/proxyfile)"
		. ")"
		. "'";

	open( RESULTS, "$EXEC|" );

	$STAT = 0;

	while ( <RESULTS> ) {
		chomp;

		gen_host_config();

		if ( /ERROR/i ) {
			print STDERR $_;
			$STAT = 1;
			last;
		}
		elsif ( s/RHOME // ) { #s/// strips off string "RHOME "
			if ( !defined( $RHOME ) ) { #don't overwrite if supplied on cmd line
				( $RHOME = $_ ) =~ s/RHOME //;
			}
			$HOST_DIR = "$RHOME/$GLD/$REMHOSTDIR";
			$EXEC_DIR = "$RHOME/$GLD/$MACHINE_INFO";
		}
		elsif ( '/condor_config[^\.]/' ) {
			gen_main_config();
	
			$RCPSTRING = "$G_RCP /tmp/GL_condor_config "
					. "$GLOBUSHOST:$RHOME/$GLD/condor_config";
			if ( silently( $RCPSTRING ) ) {
				print STDERR "Error posting condor_config to $GLOBUSHOST\n";
				$STAT = 1;
				last;
			}

		}
		else {
			#unexpected result, print it and exit??
			print STDERR "Error $GLOBUSHOST: unexpected response \"$_\"\n";
			$STAT = 1;
			last;
		}

			##always copy condor_config.host, arch might have changed
		$RCPSTRING = "$G_RCP /tmp/GL_condor_config.host "
				. "$GLOBUSHOST:$RHOME/$GLD/$REMHOSTDIR/condor_config.host";
		if ( silently( $RCPSTRING ) ) {
			print STDERR "Error posting condor_config.host to $GLOBUSHOST\n";
			$STAT = 1;
			last;
		}
	}

	close( RESULTS );
	unlink( "/tmp/$REMOTE_SETUP_FILE" );
	unlink( </tmp/GL_condor_config*> );
	return( $STAT );
}
