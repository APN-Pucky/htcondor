SRC_DIR = $(SRC_TREE)/condor_starter

#if !DOES_CHECKPOINTING
CKPT_FLAG = -DNO_CKPT
#endif

CFLAGS = $(STD_C_FLAGS) $(CKPT_FLAG) -DNEW_PROC
C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(CKPT_FLAG) -DNEW_PROC -fno-implicit-templates

/*
  The OS dependent files are the same for Ultrix 4.2 and Ultrix 4.3, so
  we set up to use the 4.2 code on 4.3 systems rather than create
  new (identical) versions.
*/
#if IS_MIPS_ULTRIX43
OS = ULTRIX42
#elif IS_HPPAR_HPUX9
OS = HPUX
#elif IS_SGI_IRIX62
OS = IRIX62
#else
OS = OperatingSystem
#endif


#if IS_V5 || IS_V6
CLASS_LIB_SRC = alarm.C
CLASS_LIB_OBJ = alarm.o
#else
CLASS_LIB_SRC = alarm.C state_machine_driver.C name_tab.C 
CLASS_LIB_OBJ = alarm.o state_machine_driver.o name_tab.o 
#endif

PORTABLE_SRC = $(CLASS_LIB_SRC) signals.C starter.C \
	user_proc.C starter.toy.C tables.C 
PORTABLE_OBJ = $(CLASS_LIB_OBJ) signals.o starter.o \
	user_proc.o tables.o ../condor_syscall_lib/file_stream.o 

NON_PORTABLE_SRC = NON_POSIX.C resource_limits.$(OS).C analyze_exec.$(OS).C \
	analyze_core.$(OS).C
NON_PORTABLE_OBJ = NON_POSIX.o resource_limits.$(OS).o analyze_exec.$(OS).o \
	analyze_core.$(OS).o

SRC = $(PORTABLE_SRC) $(NON_PORTABLE_SRC)
OBJ = $(PORTABLE_OBJ) $(NON_PORTABLE_OBJ)

IO_LIB = ../condor_io/libcondor.a
UTIL_LIB = ../condor_util_lib/util_lib.a
CLASS_LIB = ../condor_c++_util/cplus_lib.a
CLASSAD_LIB = ../condor_classad/expr_lib.a

#if IS_V5 || IS_V6
REMOTE_SYSCALL_LIB = \
	../condor_syscall_lib/senders.o \
	../condor_syscall_lib/syscall_mode.o \
	../condor_syscall_lib/syscall_connect.o \
	../condor_syscall_lib/remote_syscall.o \
	../condor_syscall_lib/syscall_numbers.o \
	../condor_syscall_lib/xfer_file.o \
	$(CLASS_LIB) \
	$(CLASSAD_LIB) \
	$(UTIL_LIB) \
	$(IO_LIB) 

#else
#if IS_R6000_AIX32 
REMOTE_SYSCALL_LIB = ../condor_$(SYSCALL_LIB)/libremote.a 
#else
REMOTE_SYSCALL_LIB = ../condor_$(SYSCALL_LIB)/libremote.a $(UTIL_LIB) $(IO_LIB) 
#endif
#endif

#if IS_MIPS_ULTRIX42
LIB = $(REMOTE_SYSCALL_LIB) /usr/lib/libcP.a
#elif (IS_X86_SOLARIS) || (IS_SUN4M_SOLARIS) || (IS_X86_SOLARIS25) || (IS_SUN4M_SOLARIS251)
LIB = $(REMOTE_SYSCALL_LIB) KernLib SocketLib RpcLib MldLib 
#elif (IS_I386_LINUX)
LIB = $(REMOTE_SYSCALL_LIB) KernLib  RpcLib MldLib /usr/lib/libbfd.a /usr/lib/libiberty.a
#else
LIB = $(REMOTE_SYSCALL_LIB) KernLib  RpcLib MldLib 
#endif

LIBDIRS = ../condor_util_lib ../condor_io

TOY_SRC = state_machine_driver.C signals.C name_tab.C starter.toy.C \
	alarm.C
TOY_OBJ = state_machine_driver.o signals.o name_tab.o starter.toy.o \
	alarm.o
TOY_LIB =  $(UTIL_LIB) $(IO_LIB)

/* all_target(condor_starter.V5 test_it hound) ---we no longer need test_it & hound */
all_target(condor_starter)
tags_target($(SRC),$(LIBDIRS))
depend_target($(SRC))

/*  We no longer need test_it and hound *
c_plus_target(test_it,test_it.o,$(NULL))
c_plus_target(hound,hound.o,$(NULL))
*/

#if IS_R6000_AIX31 || IS_R6000_AIX32 
G++_DIR = /usr/gnu/lib/gcc-lib/rs6000-ibm-aix/2.5.0
condor_starter: $(PORTABLE_OBJ) $(NON_PORTABLE_OBJ) $(LIB)
	$(G++_DIR)/ld \
	-T512 -H512 -btextro -bhalt:4 -bnodelcsect \
	-L/usr/gnu/lib \
	-L$(INSTALL_DIR)/lib \
	-o condor_starter \
	/lib/crt0.o \
	$(PORTABLE_OBJ) \
	$(NON_PORTABLE_OBJ) \
	$(UTIL_LIB) \
	$(IO_LIB) \
	$(REMOTE_SYSCALL_LIB) \
	-lg++ $(G++_DIR)/libgcc.a -lc
clean::
	rm -f condor_starter $(OBJ)
#else
c_plus_target(condor_starter,$(OBJ),$(LIB))
#endif
release_target(condor_starter,$(RELEASE_DIR)/sbin,EXECUTABLE_MODE)

c_plus_target(toy,$(TOY_OBJ),$(TOY_LIB))

starter_state_diagram.dot: condor_starter
	condor_starter -dot > starter_state_diagram.dot

starter_state_diagram.ps: starter_state_diagram.dot
	dot -Tps -Gsize="10,9" -Gratio=.75 -Gorientation=landscape \
	starter_state_diagram.dot > starter_state_diagram.ps
