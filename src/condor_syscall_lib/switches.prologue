/***********************************************************
**
** Stubs for all those system calls which don't effect the
** state of the open file table.
**
** Caution - "syscall_switches.c" is generated automatically, do not edit!
**         - edit "switches.prologue" or "syscall.tmpl" instead.
**
***********************************************************/

#if defined(OSF1) && !defined(__GNUC__)
#	define __STDC__
#endif

#if defined(Solaris)
#define fstat __hide_fstat 
#define stat __hide_stat 
#define lstat __hide_lstat 
#define mknod __hide_mknod 
#define uname __hide_uname 
#define profil __hide_profil
#define mount __hide_mount
#include "../condor_includes/_condor_fix_types.h"
#endif 

#include "syscall_numbers.h"
#include "condor_syscall_mode.h"
#include "file_table_interf.h"
#include <stdio.h>

#include <sys/types.h>
#define MODE_T unsigned int /* use 32 bits on all platforms */

#define umask _hide_umask
#define mkdir _hide_mkdir
#define chmod _hide_chmod

#if defined(HPUX9)
#	define mknod	__hide_mknod
#	define select	__hide_select
#	define fchmod	__hide_fchmod
#	define setitimer __hide_setitimer
#	define settimeofday __hide_settimeofday
#	define profil	__hide_profil
#elif defined(IRIX53)
#	define fchmod	__hide_fchmod
#endif

#if defined(LINUX)
#define fstat __hide_fstat 
#define stat __hide_stat 
#define lstat __hide_lstat 
#endif

#include <sys/stat.h>

#include <sys/time.h>
#if defined(HPUX9)
#	undef mknod
#	undef select
#	undef fchmod
#	undef setitimer
#	undef settimeofday
#	undef profil
	int select();
	int fchmod( int fd, unsigned int mode );
	int setitimer( int which, const struct itimerval *,struct itimerval * );	
	int	settimeofday( struct timeval *tp, struct timezone *tzp );
	void profil( short *buf, unsigned int size, unsigned int ,unsigned int  );
#elif defined(IRIX53)
#	undef fchmod
	int fchmod( int fd, unsigned int mode );
#endif

#if defined(IRIX53)
#	include <dlfcn.h>	/* for dlopen and dlsym */
#	include <sys/mman.h>	/* for mmap */
#endif

#if defined(Solaris)
#undef fstat 
#undef stat 
#undef lstat
#undef mknod 
#endif

#if defined(LINUX)
#undef fstat 
#undef stat 
#undef lstat
#endif

#include <sys/resource.h>
#if defined(HPUX9)
#undef _PROTOTYPES
#endif

#if defined(IRIX53)
#	define sendmsg __hide_sendmsg
#	define recvfrom __hide_recvfrom
#	define accept __hide_accept
#	define getpeername __hide_getpeername
#	define getsockname __hide_getsockname
#	define connect __hide_connect
#	define recv __hide_recv
#	define bind __hide_bind
#	define sendto __hide_sendto
#	define getsockopt __hide_getsockopt
#	define setsockopt __hide_setsockopt
#endif

#include <sys/socket.h>

#if defined(IRIX53)
#	undef sendmsg
#	undef recvfrom
#	undef accept
#	undef getpeername
#	undef getsockname
#	undef connect
#	undef recv
#	undef bind
#	undef sendto
#	undef getsockopt
#	undef setsockopt
	int sendmsg( int socket, struct msghdr *message, int flags );
	int recvfrom( int socket, char *buffer, int length, int flags, 
				struct sockaddr *address, int *addr_len );
	int accept( int socket, struct sockaddr *address, int *addr_len );
	int getpeername( int socket, struct sockaddr *address, int *addr_len );
	int getsockname( int socket, struct sockaddr *address, int *addr_len );
	int connect( int sock, struct sockaddr *address, int addr_len );
	int recv( int socket, char *msg, int length, int flags );
	int bind( int socket, struct sockaddr *address, int addr_len );
	int sendto( int sock, char *msg, int msg_len, int flags, 
				struct sockaddr *dest, int dest_len );
	int getsockopt( int sock, int level, int opt_name, char *opt_val, 
				int *opt_len );
	int setsockopt( int sock, int level, int opt_name, char *opt_val, 
				int opt_len );
#endif

#if defined(ULTRIX43)
#	define uname	__hide_uname
#endif
#include <sys/utsname.h>
#if	defined(ULTRIX43)
#	undef uname
	int uname( struct utsname *name );
#endif

#if defined(IRIX53)
#	define kill	__hide_kill
#endif

#if defined(SUNOS41) || defined(IRIX53) || defined(Solaris)
#	include <signal.h>
#endif

#if defined(Solaris)
#	undef uname
#endif

#if defined(IRIX53)
#	undef kill
	int kill( pid_t pid, int sig );
#endif

#if defined(HPUX9)
#	undef _PROTOTYPES
#	include <signal.h>
#	define async_daemon	__hide_async_daemon
#	include <nfs/nfs.h>
#	undef async_daemon
	int async_daemon();	
#endif
#if defined(OSF1)
#	include <rpc/types.h>
#	include <errno.h>
#	include <sys/param.h>
#	include <nfs/nfs.h>
#	include <sys/ipc.h>
#	include <sys/shm.h>
#	include <sys/msg.h>
#	include <sys/mman.h>
#	include <sys/addrconf.h>
/* #	include <sys/sysinfo.h> */
#endif

#if defined(LINUX)
#	include <signal.h>
#	include <sys/vfs.h>
#	include <linux/ipc.h>
#	define	TRUE 1
#	define	FALSE 0
#endif

#if defined(OSF1) || defined(AIX32)
#	define semctl __hide_semctl
#	define semop __hide_semop
#	include <sys/sem.h>
#	undef semctl
#	undef semop
	int semop(int, struct sembuf *, unsigned int );
	int semctl(int , int , int , void *);
#endif

#if defined(IRIX53)
#	define mount __hide_mount
#endif

#if defined(ULTRIX42) || defined(ULTRIX43) || defined(OSF1)
#	include <sys/param.h>
#	include <sys/mount.h>
#elif !defined(AIX32)
#	include <sys/mount.h>
#endif

#if defined(IRIX53)
#	undef mount
	int mount( char *spec, char *dir, int mflag, int fstyp, char *pt, int len );
#endif

#if defined(HPUX9)
#   define mknod  	__hide_mknod
#	define readlink	__hide_readlink
#	define setpgrp  __hide_setpgrp
#elif defined(ULTRIX43)
#	define write	__hide_write
#	define read		__hide_read
#elif defined(IRIX53)
#	define select	__hide_select
#	define readlink __hide_readlink
#	define setreuid __hide_setreuid
#	define setregid __hide_setregid
#	define gethostid __hide_gethostid
#	define sethostid __hide_sethostid
#	define profil __hide_profil
#	define acct __hide_acct
#	define sethostname __hide_sethostname
#	define setdomainname __hide_setdomainname
#	define ptrace __hide_ptrace
#endif

#include "condor_fix_unistd.h"
#if defined(Solaris)
#	undef profil
#	undef mount
#endif

#if defined(HPUX9)
#   undef mknod
#	undef readlink
#	undef setpgrp
	int mknod( const char *path, int mode, dev_t device );
	int readlink( const char *path, void *buf, int buf_size );
	int setpgrp(  );
#elif defined(ULTRIX43)
#	undef write
#	undef read
	ssize_t write( int fd, const void *buf, size_t len );
	ssize_t read( int fd, void *buf, size_t len );
#elif defined(IRIX53)
#	undef select
#	undef readlink
#	undef setreuid
#	undef setregid
#	undef gethostid
#	undef sethostid
#	undef profil
#	undef acct
#	undef sethostname
#	undef setdomainname
#	undef ptrace
	/* leave readlink() out, at least on IRIX62; not sure about IRIX53 */
	/* int readlink( const char *path, void *buf, int buf_size ); */
	int select();
	int setreuid( int ruid, int euid );
	int setregid( int rgid, int egid );
	int gethostid();
	int sethostid( int hostid );
	void profil( short *buf, unsigned int size, unsigned int ,unsigned int  );
	int acct( char *path );
	int sethostname( char *address, int address_len );
	int setdomainname( char *name, int namelen );
	int ptrace( long req, long int process, unsigned long *address, unsigned long data);
#endif


#if defined(HPUX9)
#	undef _PROTOTYPES
#endif
#if defined(SUNOS41) || defined(HPUX9)
#	include <sys/vfs.h>		 /* for struct statfs */
#endif

#if defined(AIX32)
#	include <sys/statfs.h>		 /* for struct statfs */
#	include <sys/msg.h>		 	/* for struct msqid_ds */
#endif

#if defined(AIX32)
#	define shmget __hide_shmget
#	include <sys/shm.h>		 	/* for struct shmid_ds */
#	undef shmget
	int shmget( key_t key, unsigned int size, unsigned int flags );
#endif

#if defined(SUNOS41) || defined(HPUX9) || defined(ULTRIX43) || defined(Solaris) || defined(IRIX53)
#	define TRUE 1
#	define FALSE 0
#endif

	/* Use 32 bits for file mode (mode_t) everywhere - hope nobody wants more */
#undef MODE_T
#if defined(AIX32)
#	define MODE_T ulong_t
#elif defined(Solaris)
#	define MODE_T unsigned long
#else
#	define MODE_T unsigned int
#endif

#undef umask
#undef mkdir
#undef chmod
MODE_T	umask( MODE_T mask );
int mkdir( const char *path, MODE_T mode );
int chmod( const char *path, MODE_T mode);

#if	defined(ULTRIX43)
typedef int	bool_t;
#	include <errno.h>
#	include <nfs/nfs.h>
#endif


#include <sys/types.h>

#define REMAP_ZERO(old,new,type_return) \
type_return new() \
{ \
return old(); \
}

#define REMAP_ONE(old,new,type_return,type_1) \
type_return new( arg_1 ) \
type_1 arg_1; \
{ \
return old( arg_1 ); \
}

#define REMAP_TWO(old,new,type_return,type_1,type_2) \
type_return new( arg_1, arg_2 ) \
type_1 arg_1; \
type_2 arg_2; \
{ \
return old( arg_1, arg_2 ); \
}

#define REMAP_THREE(old,new,type_return,type_1,type_2,type_3) \
type_return new( arg_1, arg_2, arg_3 ) \
type_1 arg_1; \
type_2 arg_2; \
type_3 arg_3; \
{ \
return old( arg_1, arg_2, arg_3 ); \
}

#define REMAP_FOUR(old,new,type_return,type_1,type_2,type_3,type_4) \
type_return new( arg_1, arg_2, arg_3, arg_4 ) \
type_1 arg_1; \
type_2 arg_2; \
type_3 arg_3; \
type_4 arg_4; \
{ \
return old( arg_1, arg_2, arg_3, arg_4 ); \
}

#define REMAP_FIVE(old,new,type_return,type_1,type_2,type_3,type_4,type_5) \
type_return new( arg_1, arg_2, arg_3, arg_4, arg_5 ) \
type_1 arg_1; \
type_2 arg_2; \
type_3 arg_3; \
type_4 arg_4; \
type_5 arg_5; \
{ \
return old( arg_1, arg_2, arg_3, arg_4, arg_5 ); \
}

#define REMAP_SIX(old,new,type_return,type_1,type_2,type_3,type_4,type_5,type_6) \
type_return new( arg_1, arg_2, arg_3, arg_4, arg_5, arg_6 ) \
type_1 arg_1; \
type_2 arg_2; \
type_3 arg_3; \
type_4 arg_4; \
type_5 arg_5; \
type_6 arg_6; \
{ \
return old( arg_1, arg_2, arg_3, arg_4, arg_5, arg_6 ); \
}


#ifdef LINUX
#include "switches.linux.h"
#endif

#ifdef IRIX53
REMAP_ONE( getwd, _getwd, char *, char * )
REMAP_SIX( mmap, _mmap, char *, char *, size_t, int, int, int, off_t )
#endif

/* On HPUX10, libc fork.o and pipe.o have code entry points of
 * _pipe_sys and _fork_sys.  Wonder if these are "safe" to extract
 * on HPUX10.  We won't worry about it today since they are currently
 * defined to be unsupported in syscall.tmpl  -Todd 4/97 
 */
#if defined(HPUX10)
#define FORK _FORK_sys
#define PIPE _PIPE_sys
#endif

#if defined(OSF1)
#define FORK _FORK
#endif

