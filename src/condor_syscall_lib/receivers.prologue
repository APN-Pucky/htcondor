#if !defined(OSF1) || defined(__GNUC__)
#	define _POSIX_SOURCE
#endif

#if defined(Solaris)
#	include "_condor_fix_types.h"
#       include <sys/statfs.h>
#endif

#if defined(HPUX9) || defined(Solaris)
#	define sync		__hide_sync
#endif

#include "condor_common.h"
#include "condor_classad.h"

#if	defined(HPUX9) || defined(Solaris)
#	undef sync
#endif

#include "condor_debug.h"
#include "condor_rsc.h"
#include "condor_io.h"
#include "condor_sys.h"
#include "condor_jobqueue.h"
#include "condor_constants.h"
#include "startup.h"
#include "pseudo_ops.h"

#if defined(OSF1) && defined(__GNUC__ )
#	include "condor_fdset.h"
#endif

#define MODE_T unsigned int	/* use 32 bits on all platforms */

#include <sys/stat.h>
#include "_condor_fix_resource.h"
#include <sys/utsname.h>

#if defined(SUNOS41)
#	include "condor_fdset.h"
#endif

#if defined(ULTRIX42) || defined(OSF1)
#	include <sys/param.h>
#	include <sys/mount.h>
#elif defined(ULTRIX43)
#   include <errno.h>
#	include <sys/param.h>
#	include "condor_fix_timeval.h"
#   include <nfs/nfs.h>
#else 
#	include <sys/mount.h>
#endif

#if defined(HPUX9)
#   include <time.h>
#   include <rpc/rpc.h>
#   include <errno.h>
#   include <nfs/export.h>
#   include <nfs/nfs.h> /* for definition of fhandle_t */
#   include <sys/vfs.h>      /* for struct statfs */
#	include <sys/signal.h>
#endif

#if defined(LINUX)
#	include <signal.h>
#	include <sys/vfs.h>
#	include <sys/file.h>  /* for flock() */
#	include <linux/nfs.h>
#	include <linux/ipc.h>
	typedef struct fhandle fhandle_t;
#endif

#if defined(OSF1)
#	define _AES_SOURCE
#	include <sys/poll.h>
	extern "C" {
	  int statfs( char*, struct statfs*, int );
	  int flock( int, int );
	}
#endif

#if defined(SUNOS41)
#	include <sys/poll.h>
#endif

#if defined(AIX32)
	struct fsid {
		long    val[2];
	};
	typedef struct fsid fsid_t;
#	include <sys/statfs.h>		 /* for struct statfs */
#endif

#if defined(IRIX53)
#	include <sys/statfs.h>
#	include <signal.h>
#endif

#if defined(SUNOS41)
#	include <sys/vfs.h>
#endif

#include "../condor_syscall_lib/syscall_param_sizes.h"

static char *_FileName_ = __FILE__;     /* Used by EXCEPT (see except.h)    */

extern ReliSock *syscall_sock;

#if defined(SYSCALL_DEBUG)
	extern char *SyscallLabel;
#endif

int CONDOR_NotSupported( int num, ... );
int CONDOR_Ignored( int num, ... );

#if !defined(PVM_RECEIVE)
int
do_REMOTE_syscall()
{
	int condor_sysnum;
	int	rval;

	syscall_sock->decode();

	ASSERT( syscall_sock->code(condor_sysnum) );

#if defined(SYSCALL_DEBUG)
	sprintf( SyscallLabel, "%-6d", condor_sysnum );
#endif

	dprintf(D_SYSCALLS,
		"Got request for syscall %d <%s>\n",
		condor_sysnum, _condor_syscall_name(condor_sysnum)
	);
	switch( condor_sysnum ) {
#else

#include "joblist.h"
extern struct tagJobList	*JobList;

#include "prototypes.h"

int
do_REMOTE_syscall(ReliSock *sock, int process)
{
	int condor_sysnum;
	int rval;
	int	read_ok;
	extern int SyscallSockClosed;

	syscall_sock->decode();

	/* SyscallSockClosed = FALSE; */
	read_ok = syscall_sock->code(condor_sysnum);

	if( !read_ok ) {
		/* ASSERT( SyscallSockClosed ); */
		dprintf( D_ALWAYS, 
		"Failed to get syscall_code for proc %d removing..\n", process);

		RemoveProc( process );
		return -1;
	}

	dprintf( D_SYSCALLS, "Shadow: got request for syscall %d <%s>\n",
			condor_sysnum, _condor_syscall_name(condor_sysnum) );

	switch( condor_sysnum ) {
        case CONDOR_work_request:
          {
                ClassAd *ad;
                char *a_out;
                char *targ;
                char *orig;
                int *kill_sig;
                int terrno;

                kill_sig = (int *)malloc( (unsigned)INT_SIZE );
                orig = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
                targ = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
                a_out = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
		/* space for ad allocated by pseudo_work_req */
                assert( syscall_sock->end_of_message() );;

                errno = 0;
                rval = pseudo_work_request( ad, a_out, targ, orig, kill_sig );
                terrno = errno;
                dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", rval, terrno);

                syscall_sock->encode();
                assert( syscall_sock->code(rval) );
                if( rval < 0 ) {
                        assert( syscall_sock->code(terrno) );
                }
                if( rval >= 0 ) {
                        assert( syscall_sock->signal(kill_sig) );
                        assert( syscall_sock->code(orig) );
                        assert( syscall_sock->code(targ) );
                        assert( syscall_sock->code(a_out) );
			assert( ad->put(*syscall_sock) );
                }
                free( (char *)kill_sig );
                free( (char *)orig );
                free( (char *)targ );
                free( (char *)a_out );
				delete ad;
                assert( syscall_sock->end_of_message() );;
                return 0;
        }
#endif  // of ifdef PVM_RECEIVE

