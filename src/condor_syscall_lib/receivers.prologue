#if defined(Solaris)
#include <nfs/nfs.h>		/* for fhandle_t.  Include before
			condor_common to avoid duplicate definitions of MIN */ 
#endif

#include "condor_common.h"
#include "condor_nfs.h"
#include "condor_classad.h"
#include "condor_debug.h"
#include "condor_rsc.h"
#include "condor_io.h"
#include "condor_sys.h"
#include "condor_constants.h"
#include "startup.h"
#include "pseudo_ops.h"

#if defined(OSF1)
extern "C" {
	int statfs( char*, struct statfs*, int );
	int flock( int, int );
}
#endif

#define MODE_T unsigned int	/* use 32 bits on all platforms */

#include "../condor_syscall_lib/syscall_param_sizes.h"

static char *_FileName_ = __FILE__;     /* Used by EXCEPT (see except.h)    */

extern ReliSock *syscall_sock;

#if defined(SYSCALL_DEBUG)
	extern char *SyscallLabel;
#endif

int CONDOR_NotSupported( int num, ... );
int CONDOR_Ignored( int num, ... );

#if defined(USE_STUB_CLUMPS) || defined(IRIX53)
int do_REMOTE_syscall1(int);
int do_REMOTE_syscall2(int);
int do_REMOTE_syscall3(int);
int do_REMOTE_syscall4(int);
#endif

#if !defined(PVM_RECEIVE)
int
do_REMOTE_syscall()
{
	int condor_sysnum;
	int	rval;

	syscall_sock->decode();

	ASSERT( syscall_sock->code(condor_sysnum) );

#if defined(SYSCALL_DEBUG)
	sprintf( SyscallLabel, "%-6d", condor_sysnum );
#endif

	dprintf(D_SYSCALLS,
		"Got request for syscall %d <%s>\n",
		condor_sysnum, _condor_syscall_name(condor_sysnum)
	);
	switch( condor_sysnum ) {
#else

#include "joblist.h"
extern struct tagJobList	*JobList;

#include "prototypes.h"

int
do_REMOTE_syscall(ReliSock *sock, int process)
{
	int condor_sysnum;
	int rval;
	int	read_ok;
	extern int SyscallSockClosed;

	syscall_sock->decode();

	/* SyscallSockClosed = FALSE; */
	read_ok = syscall_sock->code(condor_sysnum);

	if( !read_ok ) {
		/* ASSERT( SyscallSockClosed ); */
		dprintf( D_ALWAYS, 
		"Failed to get syscall_code for proc %d removing..\n", process);

		RemoveProc( process );
		return -1;
	}

	dprintf( D_SYSCALLS, "Shadow: got request for syscall %d <%s>\n",
			condor_sysnum, _condor_syscall_name(condor_sysnum) );

	switch( condor_sysnum ) {
        case CONDOR_work_request:
          {
                ClassAd *ad;
                char *a_out;
                char *targ;
                char *orig;
                signal_t *kill_sig;
                int terrno;

                kill_sig = (signal_t *)malloc( (unsigned)INT_SIZE );
                orig = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
                targ = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
                a_out = (char *)malloc( (unsigned)_POSIX_PATH_MAX );
		/* space for ad allocated by pseudo_work_req */
                assert( syscall_sock->end_of_message() );;

                errno = 0;
                rval = pseudo_work_request( ad, a_out, targ, orig, (int *)kill_sig );
                terrno = errno;
                dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", rval, terrno);

                syscall_sock->encode();
                assert( syscall_sock->code(rval) );
                if( rval < 0 ) {
                        assert( syscall_sock->code(terrno) );
                }
                if( rval >= 0 ) {
                        assert( syscall_sock->code(kill_sig) );
                        assert( syscall_sock->code(orig) );
                        assert( syscall_sock->code(targ) );
                        assert( syscall_sock->code(a_out) );
			assert( ad->put(*syscall_sock) );
                }
                free( (char *)kill_sig );
                free( (char *)orig );
                free( (char *)targ );
                free( (char *)a_out );
				delete ad;
                assert( syscall_sock->end_of_message() );;
                return 0;
        }
#endif  // of ifdef PVM_RECEIVE

