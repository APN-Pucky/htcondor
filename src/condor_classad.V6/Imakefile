SRC_DIR = $(SRC_TREE)/condor_classad.V6

C_PLUS_FLAGS = -Wall -I./ $(STD_C_PLUS_FLAGS) -fno-implicit-templates
CFLAGS = -Wall $(STD_C_FLAGS)

SRC = lexer.C source.C operators.C attrrefs.C fnCall.C literals.C exprTree.C \
		classad.C exprList.C value.C instantiations.C sink.C domain.C \
		condorClassad.C

OBJ = lexer.o source.o operators.o attrrefs.o fnCall.o literals.o exprTree.o \
		classad.o exprList.o value.o instantiations.o sink.o domain.o \
		condorClassad.o

LIB =  ./libclassad.a ../condor_c++_util/cplus_lib.a \
      ../condor_util_lib/util_lib.a ../condor_io/libcondor.a \
      RpcLib SocketLib

CEDAR = ../condor_io/buffers.o ../condor_io/open_flags.o \
		../condor_io/reli_sock.o ../condor_io/sig_num.o \
		../condor_io/fcntl_cmd.o ../condor_io/safe_sock.o \
		../condor_io/sock.o ../condor_io/stream.o

SOBJ = ../condor_util_lib/except.o ../condor_c++_util/stringSpace.o \
		../condor_c++_util/instantiate.o ../condor_util_lib/dprintf.o \
		../condor_util_lib/uids.o ../condor_util_lib/condor_errlst.o \
		../condor_util_lib/escapes.o stand_alone.o

all_target(libclassad.a)

library_target(libclassad.a,$(OBJ))

c_plus_target (cxi, cxi.o, $(LIB))
pure_c_plus_target(cxi.pure, cxi.o, $(LIB))

cyi: cxi.C
	g++ -Wall $(C_PLUS_FLAGS) -o cyi cxi.C libcasa.a

standalone: libcasa.a

library_target(libcasa.a,$(OBJ) $(SOBJ) $(CEDAR))

clean::
	rm -f *.o 
