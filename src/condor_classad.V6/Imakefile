SRC_DIR = $(SRC_TREE)/condor_classad.V6

C_PLUS_FLAGS=-Wall -DEXPERIMENTAL -I./ $(STD_C_PLUS_FLAGS)
CFLAGS = -Wall $(STD_C_FLAGS)

SRC = lexer.C source.C operators.C attrrefs.C fnCall.C literals.C exprTree.C \
		classad.C exprList.C value.C instantiations.C coll-comm-inst.C \
		coll-serv-inst.C coll-client-inst.C exp-inst.C sink.C \
		matchClassad.C util.C compress.C $(COLL_SRC)

OBJ = lexer.o source.o operators.o attrrefs.o fnCall.o literals.o exprTree.o \
		classad.o exprList.o value.o instantiations.o coll-comm-inst.o \
		coll-serv-inst.o coll-client-inst.o exp-inst.o sink.o \
		matchClassad.o util.o compress.o $(COLL_OBJ) $(EXPT_OBJ)

LIB =  ./libclassad.a ../condor_c++_util/cplus_lib.a \
      ../condor_util_lib/util_lib.a ../condor_io/libcedar.a \
      ../condor_c++_util/cplus_lib.a ../condor_util_lib/util_lib.a \
	  RpcLib SocketLib

COLL_SRC =  view.C collection.C collectionServer.C collectionClient.C \
		transaction.C query.C

COLL_OBJ =  view.o collection.o collectionServer.o collectionClient.o \
		transaction.o query.o

EXPT_OBJ = rectangle.o intervalTree.o externrefs.o compress.o

/* The S_* files are for standalone classads */
S_OBJ = $(S_UTL_OBJ) $(S_CPP_OBJ) $(S_LCL_OBJ)
#if !HAS_FLOCK
S_UTL_OBJ = ../condor_util_lib/except.o ../condor_util_lib/dprintf.o \
			../condor_util_lib/uids.o ../condor_util_lib/condor_errlst.o \
			../condor_util_lib/escapes.o ../condor_util_lib/flock.o
#else
S_UTL_OBJ = ../condor_util_lib/except.o ../condor_util_lib/dprintf.o \
			../condor_util_lib/uids.o ../condor_util_lib/condor_errlst.o \
			../condor_util_lib/escapes.o 
#endif
S_CPP_OBJ = ../condor_c++_util/stringSpace.o ../condor_c++_util/instantiate.o \
			../condor_c++_util/log.o ../condor_c++_util/strnewp.o \
			../condor_c++_util/log_transaction.o
S_LCL_OBJ = ./stand_alone.o


/* the main condor library target */
all_target(libclassad.a)
library_target(libclassad.a,$(OBJ))


/* my template instantiations are in here */
template_inst( instantiations.C, instantiations.o ) /* main classad insts */
template_inst( coll-comm-inst.C, coll-comm-inst.o ) /* common collection  */
template_inst( coll-serv-inst.C, coll-serv-inst.o ) /* collection server  */
template_inst( coll-client-inst.C,coll-client-inst.o) /* collection client*/
template_inst( exp-inst.C, exp-inst.o )				/* experimental */



/* Standalone classad library (single .a); still need all condor's headers */
standalone: libclassads.a
library_target(libclassads.a,$(OBJ) $(S_OBJ))


/* Headers required for standalone classad tarball */
CONDOR_HEADERS = ../condor_c++_util/list.h ../condor_c++_util/stringSpace.h \
			../condor_includes/condor_debug.h ../condor_c++_util/log.h \
			../condor_c++_util/log_transaction.h ../condor_c++_util/HashTable.h\
			../condor_c++_util/MyString.h ../condor_c++_util/extArray.h \
			../condor_c++_util/Set.h


/* Standalone distribution of classads/collections */
tarball: libclassads.a html
	rm -rf classads *.gz
	mkdir -p classads/include classads/lib
	cp libclassads.a classads/lib
	cp -r distrib classads/example
	cp cxi.C classads/example
	cp -r html classads/html-docs
	cp $(CONDOR_HEADERS) classads/include
	cp *.h classads/include
	cp ../condor_release/LICENSE.TXT classads
	tar cvf classads.tar classads
	gzip classads.tar


/* Rule to make documentation */
doc: html


/* Also depends on several header files, but I'm ignoring that for now */
html: documentation 
	doc++ -d html documentation


clean::
	rm -f -r *.o *.gz html

/* The Classad eXpression Interpreter */
c_plus_target (cxi, cxi.o, $(LIB))
