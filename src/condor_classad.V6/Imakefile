SRC_DIR = $(SRC_TREE)/condor_classad.V6

C_PLUS_FLAGS = -Wall -I./ $(STD_C_PLUS_FLAGS) -fno-implicit-templates
CFLAGS = -Wall $(STD_C_FLAGS)

SRC = lexer.C source.C operators.C attrrefs.C fnCall.C literals.C exprTree.C \
		classad.C exprList.C value.C instantiations.C sink.C domain.C \
		matchClassad.C classad_io.C cedar_io.C $(COLL_SRC)

OBJ = lexer.o source.o operators.o attrrefs.o fnCall.o literals.o exprTree.o \
		classad.o exprList.o value.o instantiations.o sink.o domain.o \
		matchClassad.o classad_io.o cedar_io.o $(COLL_OBJ)

LIB =  ./libclassad.a ../condor_c++_util/cplus_lib.a \
      ../condor_util_lib/util_lib.a ../condor_io/libcondor.a \
      RpcLib SocketLib

COLL_SRC = classad_collection.C classad_collection_ops.C \
		classad_collection_types.C

COLL_OBJ = classad_collection.o classad_collection_ops.o \
		classad_collection_types.o


/* The S_* files are for standalone classads */
S_OBJ = $(S_UTL_OBJ) $(S_CPP_OBJ) $(S_LCL_OBJ)
#if !HAS_FLOCK
S_UTL_OBJ = except.o dprintf.o uids.o condor_errlst.o escapes.o flock.o
#else
S_UTL_OBJ = except.o dprintf.o uids.o condor_errlst.o escapes.o 
#endif
S_CPP_OBJ = stringSpace.o instantiate.o log.o strnewp.o log_transaction.o
S_LCL_OBJ = stand_alone.o


/* the main condor library target */
all_target(libclassad.a)
library_target(libclassad.a,$(OBJ))


/* Defining IN_CONDOR activates the 'param' feature in cxi */
#define IN_CONDOR
c_plus_target (cxi, cxi.o, $(LIB))
pure_c_plus_target(cxi.pure, cxi.o, $(LIB))


/* Standalone classad library (single .a); still need all condor's headers */
standalone: libclassads.a
library_target(libclassads.a,$(OBJ) $(S_OBJ))


/* Headers required for standalone classad tarball */
CONDOR_HEADERS = ../condor_c++_util/list.h ../condor_c++_util/stringSpace.h \
			../condor_includes/condor_debug.h ../condor_c++_util/log.h \
			../condor_c++_util/log_transaction.h ../condor_c++_util/HashTable.h\
			../condor_c++_util/MyString.h ../condor_c++_util/extArray.h \
			../condor_c++_util/Set.h


/* Standalone distribution of classads/collections */
tarball: libclassads.a html
	rm -rf classads *.gz
	mkdir -p classads/include classads/lib
	cp libclassads.a classads/lib
	cp -r distrib classads/example
	cp cxi.C classads/example
	cp -r html classads/html-docs
	cp $(CONDOR_HEADERS) classads/include
	cp *.h classads/include
	cp ../condor_release/LICENSE.TXT classads
	tar cvf classads.tar classads
	gzip classads.tar


/* Rule to make documentation */
doc: html

/* Also depends on several header files, but I'm ignoring that for now */
html: documentation 
	doc++ -d html documentation


clean::
	rm -f -r *.o *.gz html


IMPORT_LINKS = ../../config/import_links
import( ../condor_util_lib/ , $(S_UTL_OBJ) )
import( ../condor_c++_util/ , $(S_CPP_OBJ) )
