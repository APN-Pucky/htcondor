SRC_DIR = $(SRC_TREE)/condor_classad.V6

/* select required features */
#include "classad_features.h"


C_PLUS_FLAGS 		= -Wall $(STD_C_PLUS_FLAGS)
CFLAGS 				= -Wall $(STD_C_FLAGS) 


/* The basic classad source and object files */
CLASSAD_SRC_0 		= lexer.C source.C operators.C attrrefs.C fnCall.C \
						literals.C exprTree.C classad.C exprList.C value.C \
						instantiations.C sink.C matchClassad.C util.C 
CLASSAD_OBJ_0 		= lexer.o source.o operators.o attrrefs.o fnCall.o \
						literals.o exprTree.o classad.o exprList.o value.o \
						instantiations.o sink.o matchClassad.o util.o 
						

/* Are collections required? */
#if defined(COLLECTIONS)
CLASSAD_SRC_1		= $(CLASSAD_SRC_0) view.C collection.C collectionServer.C\
						collectionClient.C transaction.C query.C \
						coll-comm-inst.C coll-serv-inst.C coll-client-inst.C
CLASSAD_OBJ_1		= $(CLASSAD_OBJ_0) view.o collection.o collectionServer.o\
						collectionClient.o transaction.o query.o \
						coll-comm-inst.o coll-serv-inst.o coll-client-inst.o
#else
CLASSAD_SRC_1		= $(CLASSAD_SRC_0)
CLASSAD_OBJ_1		= $(CLASSAD_OBJ_0)
#endif


/* Are experimental features required? */
#if defined(EXPERIMENTAL)
CLASSAD_SRC_2		= $(CLASSAD_SRC_1) rectangle.C intervalTree.C compress.C\
						queryProcessor.C exp-inst.C
CLASSAD_OBJ_2		= $(CLASSAD_OBJ_1) rectangle.o intervalTree.o compress.o\
						queryProcessor.o exp-inst.o
#else
CLASSAD_SRC_2		= $(CLASSAD_SRC_1)
CLASSAD_OBJ_2		= $(CLASSAD_OBJ_1)
#endif


SRC = $(CLASSAD_SRC_2)
OBJ = $(CLASSAD_OBJ_2)


LIB =  ./libclassad.a ../condor_c++_util/cplus_lib.a \
      ../condor_util_lib/util_lib.a ../condor_io/libcedar.a \
      ../condor_c++_util/cplus_lib.a ../condor_util_lib/util_lib.a \
	  ../condor_sysapi/libsysapi.a


/* The S_* files are for standalone classads */
S_OBJ = $(S_UTL_OBJ) $(S_LCL_OBJ)
#if !HAS_FLOCK
S_UTL_OBJ = ../condor_util_lib/except.o ../condor_util_lib/dprintf.o \
			../condor_c++_util/uids.o ../condor_util_lib/escapes.o \
			../condor_util_lib/flock.o
#else
S_UTL_OBJ = ../condor_util_lib/except.o ../condor_util_lib/dprintf.o \
			../condor_c++_util/uids.o ../condor_util_lib/escapes.o 
#endif
S_LCL_OBJ = ./stand_alone.o


/* the main condor library target */
all_target(libclassad.a)
library_target(libclassad.a,$(OBJ))


/* template instantiations go in here */
template_inst( instantiations.C, instantiations.o ) 	/* main classad insts */
template_inst( coll-comm-inst.C, coll-comm-inst.o ) 	/* common collection  */
template_inst( coll-serv-inst.C, coll-serv-inst.o ) 	/* collection server  */
template_inst( coll-client-inst.C,coll-client-inst.o) 	/* collection client*/
template_inst( exp-inst.C, exp-inst.o )					/* experimental */



/* Standalone classad library; (need some condor headers: see below) */
standalone: libclassads.a
library_target(libclassads.a,$(OBJ) $(S_OBJ))


/* Headers required for standalone classad tarball */
CONDOR_HEADERS = ../condor_includes/condor_debug.h ../condor_c++_util/extArray.h


/* Standalone distribution of classads/collections */
tarball: libclassads.a ../condor_release/LICENSE.TXT
	rm -rf classads *.gz
	mkdir -p classads/include classads/lib classads/example
	strip --strip-debug libclassads.a
	cp libclassads.a classads/lib
	cp cxi.C classads/example
	cp distrib/Makefile classads/example
	cp $(CONDOR_HEADERS) classads/include
	cp *.h classads/include
	cp ../condor_release/LICENSE.TXT classads
	cp distrib/README classads


/* Rule to make documentation */
doc: html


/* Also depends on several header files, but I'm ignoring that for now */
html_target( documentation )


clean::
	rm -f -r *.o *.gz html

/* The Classad eXpression Interpreter */
c_plus_target (cxi, cxi.o, $(LIB))
