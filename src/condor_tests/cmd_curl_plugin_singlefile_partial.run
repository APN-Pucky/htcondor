#!/usr/bin/env python

import os
import sys

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.Globals import *
from pytest.HTTPServer import HTTPServer
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils
from random import randint

def SuccessCallback():
    Utils.TLog("Job successful as expected. Test passed.")
    sys.exit(TEST_SUCCESS)

def FailureCallback():
    Utils.TLog("Job failed unexpectedly. Test failed.")
    sys.exit(TEST_FAILURE)

def HttpPartialUrlHandler(request):

    request.protocol_version = "HTTP/1.1"
    partial_content = "<html>Content to return on partial requests</html>"

    # If the HTTP "Range" header is not set, return a random substring
    # of the partial_content string, but set Content-Length to the full
    # length of the partial_content string. This will be recognized as
    # a partial file transfer.
    if request.headers.getheader("Range", 0) == 0:
        request.send_response(200, "OK")
        request.send_header("Content-Length", len(partial_content))
        request.end_headers()
        partial_offset = randint(1, len(partial_content) - 1);
        request.wfile.write(partial_content[:partial_offset])

    # If the HTTP "Range" header is set, return the specified byte range
    # from the partial_content string. Set Content-Length and
    # Content-Range accordingly.
    else:
        range_header = request.headers.getheader("Range", 0)
        request_range = range_header[range_header.index("=")+1:]

        # Parse the range requested. If no end index is specified, set
        # this by default to the length of partial_content
        request_range_tokens = request_range.split("-")
        request_range_start = request_range_tokens[0]
        request_range_end = str(len(partial_content))
        if request_range_tokens[1] != "":
            request_range_end = request_range_tokens[1]

        # Now send the response with appropriate HTTP headers
        response_range = "bytes " + request_range_start + "-" + str(int(request_range_end)-1) + "/" + request_range_end
        response_length = int(request_range_end) - int(request_range_start)
        request.send_response(206, "Partial Content")
        request.send_header("Content-Range", response_range)
        request.send_header("Content-Length", str(response_length))
        request.end_headers()
        request.wfile.write(partial_content[int(request_range_start):int(request_range_end)])


def main():

    # Create a new test environment
    test = CondorTest("cmd_curl_plugin_singlefile_partial")

    # Start a HTTP server, and register the /partial URL
    httpd = HTTPServer()
    httpd.Start()
    httpd.RegisterUrlHandler("/partial", HttpPartialUrlHandler)
    partial_url = "http://127.0.0.1:" + str(httpd._port) + "/partial"

    # Stand up a PersonalCondor
    personal_handle = test.StartPersonalCondor()
    if personal_handle is -1:
        Utils.TLog("Failed to start the PersonalCondor environment. Exiting.")
        sys.exit(1)
    else:
        Utils.TLog("PersonalCondor environment started successfully with handle " + str(personal_handle))

    # Setup a new test job
    job_args = {
        "executable":               "cmd_curl_plugin_singlefile_partial.py",
        "output":                   "cmd_curl_plugin_singlefile_partial.out",
        "transfer_input_files":     partial_url,
        "should_transfer_files":    "YES"
    }
    test_job = CondorJob(job_args)

    # Register handlers
    test_job.RegisterJobTerminated(SuccessCallback)
    test_job.RegisterJobHeld(FailureCallback)

    # Submit the test job
    test_job.Submit()
    result = test_job.WaitUntilJobTerminated()
    Utils.TLog("Test returned result: " + str(result))

    # All done, sit and wait. Success/failure callbacks will exit the test.


if __name__ == "__main__":
    main()
