#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;


# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testdesc =  'job_amazon_basic';
$testname = "job_amazon_basic";
$corename = "job_amazon_basic";

# where am I running
$currenthost = `hostname`;
chomp($currenthost);
$primarycollector = $currenthost;
my @adarray;

CondorTest::fullchomp($currenthost);

system("date");

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$submit_file = $corename . ".cmd";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $submit_file\n",1);

$ec2_sim_port = 0;
$ec2_sim = "../testbin_dir/ec2_sim";
if ( ! -x $ec2_sim ) {
	die("$ec2_sim isn't executable!\n");
}
# Start ec2_sim
$ec2_sim_pid = fork();
if ( $ec2_sim_pid == 0 ) {
	# Child
	# It's important not to have shell meta-characters in our exec() line.
	# Otherwise, perl will exec /bin/sh and ec2_sim will be a child process.
	# Later on, we need to send a SIGTERM to ec2_sim, so we need to know
	# its pid.
	open STDOUT, ">ec2_sim.out";
	open STDERR, ">ec2_sim.out";
	exec( "$ec2_sim -p 0" ) or die "Failed to exec $ec2_sim\n";
} elsif ( $ec2_sim_pid > 0 ) {
	for ( my $i = 0; $i < 10 && $ec2_sim_port == 0; $i++ ) {
		sleep 1;
		if ( waitpid( $ec2_sim_pid, &POSIX::WNOHANG ) == $ec2_sim_pid ) {
			die( "$ec2_sim died unexpectedly!\n" );
		}
		open EC2_OUT, "<ec2_sim.out" or next;
		while ( <EC2_OUT> ) {
			if ( s/Listening on port // ) {
				chomp( $ec2_sim_port = $_ );
				last;
			}
		}
		close EC2_OUT;
	}
	if ( $ec2_sim_port == 0 ) { die("Failed to find port for $ec2_sim\n"); }
} else {
	die( "Failed to fork() to spawn $ec2_sim!\n" );
}

CondorTest::debug("Starting personal condor\n",1);

# Modify our config file suffix to include port of ec2_sim
open(CFGSRC,"<x_amazon_configpostsrc.template") || die "Could not open x_amazon_configpostsrc.template: $!\n";
open(CFGDST,">x_amazon_configpostsrc") || die "Could not open x_amazon_configpostsrc: $!\n";
while(<CFGSRC>) {
	s/xxxxxx/$ec2_sim_port/g;
	print CFGDST $_;
}
close(CFGSRC);
close(CFGDST);

# get a local scheduler running (side a)
my $configloc = CondorTest::StartPersonal( "job_amazon_basic", "x_param.amazon", "amazon");
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

CondorTest::debug("---local config is $locconfig and local port is $locport---\n",1);

$ENV{CONDOR_CONFIG} = $locconfig;

if($done != 0) {
	CondorTest::debug("We failed already, allow cleanup\n",1);
} else {
	$test_cmd = "./job_amazon_basic.pl $submit_file";
	CondorTest::debug("About to run Amazon EC2 basic test: $test_cmd\n",1);
	system("date");

	$done = system("$test_cmd");
}

CondorTest::debug("Killing ec2_sim pid $ec2_sim_pid\n",1);
kill 15, $ec2_sim_pid;
if ( waitpid( $ec2_sim_pid, undef ) != $ec2_sim_pid ) {
	CondorTest::debug("Failed to reap ec2_sim\n",1);
} elsif ( $? != 0 ) {
	CondorTest::debug("ec2_sim exited with non-zero status $?\n",1);
	$done = 1;
}
# TODO: checkout ec2_sim output "ec2_sim.out"

CondorTest::debug("Saving things and cleaning up.... done with return $done\n",1);

system("cp *job_amazon_basic* *ec2_sim* $mysaveme");

$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
	exit(1)
}

system("date");

if( $done != 0 )
{
	CondorTest::debug("job_amazon_basic FAILED\n",1);
	# actual test failed but we allowed cleanup
	exit(1);
}

CondorTest::debug("job_amazon_basic SUCCESS\n",1);
system("date");
exit(0);
