#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;


# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testdesc =  'cmd_status_shows-startd';
$testname = "cmd_status_shows-startd";
$corename = "cmd_status_shows-startd";

# where am I running
$currenthost = CondorTest::getFqdnHost();
chomp($currenthost);
$primarycollector = $currenthost;
my @adarray;

CondorTest::fullchomp($currenthost);

system("date");

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",1);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",1);

my $version = "local";
# get a local scheduler running (side a)
my $configloc = CondorTest::StartPersonal( "cmd_status_shows-startd", "x_param.cmdstatus-multi" ,$version);
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

CondorTest::debug("---local config is $locconfig and local port is $locport---\n",1);

$primarycollector = $primarycollector . ":" . $locport;

CondorTest::debug("Primary collector for other nodes <<$primarycollector>>\n",1);


$saveconfig = $ENV{CONDOR_CONFIG};
$ENV{CONDOR_CONFIG} = $locconfig;
CondorTest::debug("New collector is this:\n",1);
system("condor_config_val COLLECTOR_HOST");
$ENV{CONDOR_CONFIG} = $saveconfig;

my $line;
open(SCHEDDSRC,"<x_param.cmdstatus-multi.template") || die "Could not open x_param.cmdstatus-multi.template: $!\n";
open(SCHEDDONE,">x_param.cmd_status_shows-startd") || die "Could not open x_param.cmd_status_shows-startd: $!\n";
while(<SCHEDDSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*collector\s*=.*$/) {
		print SCHEDDONE "collector  = $primarycollector\n";
	} else {
		print SCHEDDONE "$line\n";
	}
}
close(SCHEDDSRC);
close(SCHEDDONE);

$version = "scheddone";
# get another node running
my $configscheddone = CondorTest::StartPersonal( "cmd_status_shows-startd", "x_param.cmd_status_shows-startd" ,$version);
my @scheddone = split /\+/, $configscheddone;
my $scheddoneconfig = shift @scheddone;
my $scheddoneport = shift @scheddone;

CondorTest::debug("---scheddone config is $scheddoneconfig and scheddone port is $scheddoneport---\n",1);

my $bail = 0;

# submit into scheddone
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

# start two jobs which run till killed
my $cmd = "condor_submit ./x_cmdrunforever.cmd2";
$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$cmdstatus)
{
	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
	exit(1)
}

my $qstat = CondorTest::getJobStatus(1.1);
CondorTest::debug("remote cluster 1.1 status is $qstat\n",1);
while($qstat != RUNNING)
{
	CondorTest::debug("remote Job status 1.1 not RUNNING - wait a bit\n",1);
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.1);
}

$qstat = CondorTest::getJobStatus(1.0);
CondorTest::debug("remote cluster 1.0 status is $qstat\n",1);
while($qstat != RUNNING)
{
	CondorTest::debug("remote Job status 1.0 not RUNNING - wait a bit\n",1);
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.0);
}

# submit into collector node schedd
$ENV{CONDOR_CONFIG} = $locconfig;

#print "Lets look at status from first pool....\n";
#system("condor_status");

# start two jobs which run till killed
my $cmd = "condor_submit ./x_cmdrunforever.cmd2";
$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$cmdstatus)
{
	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
	exit(1)
}

my $qstat = CondorTest::getJobStatus(1.1);
CondorTest::debug("local cluster 1.1 status is $qstat\n",1);
while($qstat != RUNNING)
{
	CondorTest::debug("local Job status 1.1 not RUNNING - wait a bit\n",1);
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.1);
}

$qstat = CondorTest::getJobStatus(1.0);
CondorTest::debug("local cluster 1.0 status is $qstat\n",1);
while($qstat != RUNNING)
{
	CondorTest::debug("local Job status 1.0 not RUNNING - wait a bit\n",1);
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.0);
}

my $cmdstatus;
my $sched1 = "master_" . $mypid . "local" . "@" . $currenthost;;
my $sched2 = "master_" . $mypid . "scheddone" . "@" . $currenthost;;

#Place condor_q back into the original condor config
#and aim the -global -pool command at this new collector.
#$ENV{CONDOR_CONFIG} = $saveconfig;
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

#print "Lets look at status from second pool....\n";
#system("condor_status");

# allow time for all the nodes to update the collector
# by allowing N attempts
my $nattempts = 8;
my $count = 0;
my $done = 0;
my $found1 = 0;
my $cmd = "";


if($bail != 1) {
	CondorTest::debug("Looking at new pool<condor_status>\n",1);
	while($count < $nattempts) {
	my $masterlocal = 0;
	my $mastersched = 0;
		$found1 = 0;
		$cmd = "condor_status";
		$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    	if(!$cmdstatus)
    	{
        	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
        	exit(1)
    	}

		CondorTest::debug("Looking at condor_status \n",1);

		foreach $line (@adarray) {
			if($line =~ /^.*master_loc.*$/) {
				CondorTest::debug("found masterLocal: $line\n",1);
				$masterlocal = $masterlocal + 1;;
			} elsif($line =~ /^.*master_sch.*$/) {
				CondorTest::debug("found master_schedd: $line\n",1);
				$mastersched = $mastersched + 1;;
			} else {
				#print "$line\n";
			}
		}

		if(($masterlocal == 2) && ($mastersched == 4)) {
			$bail = 1;
			CondorTest::debug("Found expected number of startds(6)\n",1);
			CondorTest::debug("Found 2 on local collector and 4 on alternate node in pool\n",1);
			last;
		} else {
			CondorTest::debug("Keep going masterlocal is $masterlocal and mastersched is $mastersched\n",1);
		}

		$count = $count + 1;
		sleep($count * 5);
	}
}
 
my $numstartd = 0;

if($bail == 1) {
	# allow time for all the nodes to update the collector
	# by allowing N attempts
	# with  6 slots configured we should find 6 unique startds
	$nattempts = 8;
	$count = 0;
	$done = 0;

	while($count < $nattempts) {
		$cmd = "condor_status -startd -format \"%s\\n\" name";
		CondorTest::debug("Looking for exactly 6 startd slots\n",1);
		$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    	if(!$cmdstatus)
    	{
        	CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
        	exit(1)
    	}
	
		# better be 6
	
		$numstartd = 0;
		foreach $line (@adarray) {
			if($line =~ /^\s*slot(\d+)@master_(.*)_strtd.*$/) {
				#print "found startd slot: $line\n";
				$numstartd = $numstartd + 1;;
				CondorTest::debug("found startd slot: $numstartd of 9\n",1);
			} else {
				#print "skip: $line\n";
			}
		}

		if($numstartd == 6) {
			CondorTest::debug("Condor_status -startd found the expected 9 slots\n",1);
			$done = 1;
			last;
		} else {
			CondorTest::debug("Condor_status -startd found incorrect startd slot count<$numstartd>\n",1);
		}

		$count = $count + 1;
		sleep($count * 5);
	}
}


CondorTest::debug("Saving things and cleaning up....\n",1);

system("cp *cmd_status_shows-startd* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

CondorTest::KillPersonal($locconfig);
CondorTest::KillPersonal($scheddoneconfig);
system("date");

if( $done == 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

CondorTest::debug("cmd_status_shows-startd SUCCESS\n",1);
exit(0);
