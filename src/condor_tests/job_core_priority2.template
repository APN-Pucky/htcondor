#! /usr/bin/env perl


my $arg = $ARGV[0];

my $LogFile = "prioritylog" . $arg . ".log";

open(OLDOUT, ">&STDOUT");
open(OLDERR, ">&STDERR");
open(STDOUT, ">$LogFile") or die "Could not open $LogFile: $!";
open(STDERR, ">&STDOUT");
select(STDERR); $| = 1;
select(STDOUT); $| = 1;

# make it run long enough to remove overhead variance
# from matching to running

# run script cuts in a pip unigue socket the server is listening on.
verbose_system("./x_general_client.pl priority $arg");
sleep 40;

sub verbose_system
{

my @args = @_;
my $rc = 0xffff & system @args;

printf "system(%s) returned %#04x: ", @args, $rc;

    if ($rc == 0)
    {
        print "ran with normal exit\n";
        return $rc;
    }
    elsif ($rc == 0xff00)
    {
        print "command failed: $!\n";
        return $rc;
    }
    elsif (($rc & 0xff) == 0)
    {
        $rc >>= 8;
        print "ran with non-zero exit status $rc\n";
        return $rc;
    }
    else
    {
        print "ran with ";
        if ($rc &   0x80)
        {
            $rc &= ~0x80;
            print "coredump from ";
            return $rc;
        }
        print "signal $rc\n"
    }
}
