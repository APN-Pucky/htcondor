#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use strict;
use warnings;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $testdesc =  'cmd_tools_jobid_no-constraint.run';
my $testname = "cmd_tools_jobid_no-constraint.run";
my $corename = "cmd_tools_jobid_no-constraint.run";
my $debuglevel = 2;


print scalar localtime() . "\n";

my $mypid = $$;
my $mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

my $mysubmitnm = $corename . $mypid . ".cmd";
my $mysubmitnmlog = $corename . $mypid . ".log";
my $mysubmitnmout = $corename . $mypid . ".out";
my $mycorenm = $corename . ".cmd";
my $mycorenmout = $corename . ".cmd.out";
my $mycorenmlog = $corename . ".log";

CondorTest::debug("Master PID is $mypid\n",$debuglevel);
CondorTest::debug("Master PID submit file is $mysubmitnm\n",$debuglevel);

my $done = 0;
my $starting_at = "-1";
my $whoami = `whoami`;
$whoami =~ s/\n$//;

sub set_up {


	my $numentries = 0;

	my $cmd = "condor_q ".$whoami;
	my $adarray = `$cmd`;
	
	foreach my $line (split /\n/, $adarray) {
		if ($line =~ /^.*$whoami.*I.*$/) {
			CondorTest::debug("condor_q: found entry: $line\n",$debuglevel);
			$numentries = $numentries + 1;

			if ( $starting_at =~ m/-1/ ){
				$starting_at = $line;
				$starting_at =~ s/\.\d+.*$whoami.*$//;
			}

		}
	}

	if ($numentries != 0){
		$done = 1;
		return;
	}


	open FILE, ">cmd_tools-noop_job.py";
	print FILE "import sys\n";
	print FILE "print \"This job is not supposed to run!\"\n";
	close FILE;

	runcmd("rm -rf cmd_tools_tester");
	runcmd("mkdir cmd_tools_tester");
	chdir "./cmd_tools_tester";
	runcmd("mkdir run_1");
	runcmd("mkdir run_2");
	runcmd("mkdir run_3");
	runcmd("cp ../cmd_tools-noop_job.py ./run_1/");
	runcmd("cp ../cmd_tools-noop_job.py ./run_2/");
	runcmd("cp ../cmd_tools-noop_job.py ./run_3/");

	my $i = 0;
	my $j = 0;
	my $k = 0;

	for ($i=0; $i<10; $i++){
		for ($j=0; $j<10; $j++){

			open FILE, ">submitting";
			print FILE "executable = /usr/bin/python\n";
			print FILE "universe = vanilla\n";
			print FILE "arguments = cmd_tools-noop_job.py \n";
			print FILE "should_transfer_files = Yes\n";
			print FILE "log = job.log\n";
			print FILE "request_memory = 10 MB\n";
			print FILE "+RED_FLAG = ".$i."\n";
			print FILE "+YELLOW_FLAG = ".$j."\n";
			print FILE "+GREEN_FLAG = ".$k."\n";
			print FILE "+BLUE_FLAG = 0\n";
			print FILE "requirements = OpSys == \"DONT-RUN\"\n";
			print FILE "initialdir = run_1\n";
			print FILE "queue\n";
			print FILE "initialdir = run_2\n";
			print FILE "queue\n";
			print FILE "initialdir = run_3\n";
			print FILE "queue\n";
			close FILE;

			if ( $starting_at =~ m/-1/ ){
				$starting_at = `condor_submit submitting`;
				$starting_at =~ s/^Submitting.*\n.*cluster //;
				$starting_at =~ s/\.\n$//;
			}
			else{
				runcmd("condor_submit submitting");
			}

			
			$k = $k + 1;
		}
	}

	if (!( $starting_at =~ m/-1/ )){
		$done = 1;
	}

}

sub condor_q_before {

	$done = 0;
	my $numentries = 0;

	my $cmd = "condor_q ".($starting_at+81).".1 ";
	my $adarray = `$cmd`;
	
	foreach my $line (split /\n/, $adarray) {
		if ($line =~ /^.*$whoami.*I.*$/) {
			CondorTest::debug("condor_q: found entry: $line\n",$debuglevel);
			$numentries = $numentries + 1;
		}
	}

	if ($numentries == 1){
		$done = 1;
	}
}

sub condor_qedit {

	$done = 0;

	my $cmd = "condor_qedit ".($starting_at+81).".1 GREEN_FLAG 181";
	my $adarray = `$cmd`;

	foreach my $line (split /\n/, $adarray) {
		if ($line =~ m/Set attribute "GREEN_FLAG"./) {
			CondorTest::debug("condor_qedit: attribute changed properly: $line\n",$debuglevel);
			$done = 1;
		}
	}
}


sub condor_rm_fail {

	$done = 0;

	my $cmd = "condor_rm ".($starting_at+81).".1  2>&1";
	my $adarray = `$cmd`;

	foreach my $line (split /\n/, $adarray) {
		if ($line =~ m/not found/) {
			CondorTest::debug("condor_rm: found error message: $line\n",$debuglevel);
			$done = 1;
		}
	}
}


sub condor_q_after {

	$done = 0;
	my $numentries = 0;

	my $cmd = "condor_q ".($starting_at+81).".1 ";
	my $adarray = `$cmd`;

	foreach my $line (split /\n/, $adarray) {
		if ($line =~ /^.*$whoami.*I.*$/) {
			CondorTest::debug("condor_q: found entry: $line\n",$debuglevel);
			$numentries = $numentries + 1;
		}
	}

	if ($numentries == 0){
		$done = 1;
	}

}


sub condor_rm_success {

	$done = 0;

	my $cmd = "condor_rm ".($starting_at+81).".1 2>&1";
	my $adarray = `$cmd`;

	foreach my $line (split /\n/, $adarray) {
		if ($line =~ m/marked for removal/) {
			CondorTest::debug("condor_rm: found done message: $line\n",$debuglevel);
			$done = 1;
		}
	}

}

set_up();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: setup step failed\n",$debuglevel);
	exit(1);
}
condor_q_before();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: condor_q <before change> failed\n",$debuglevel);
	exit(1);
}
condor_qedit();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: condor_qedit failed\n",$debuglevel);
	exit(1);
}
condor_rm_success();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: condor_rm <first time> failed\n",$debuglevel);
	exit(1);
}
condor_q_after();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: condor_q <after change> failed\n",$debuglevel);
	exit(1);
}
condor_rm_fail();
if (!$done){
	CondorTest::debug("cmd_tools_jobid_no-constraint: condor_rm <second time> was supposed to fail, but did not\n",$debuglevel);
	exit(1);
}

CondorTest::debug("Saving things and cleaning up....\n",$debuglevel);

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}

print scalar localtime() . "\n";

CondorTest::debug("cmd_tools_jobid_no-constraint.run SUCCESS\n",$debuglevel);
exit(0);
