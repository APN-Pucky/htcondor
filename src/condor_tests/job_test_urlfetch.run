#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# new test now is a single file and does both local and vanilla universe
# bt 2/13/15

use CondorUtils;
use CondorTest;
use Cwd;
use POSIX;
use Check::SimpleJob;

$topdir = getcwd();
print scalar localtime() . "\n";

$testname = "job_test_urlfetch";
$piddir = "pdir$$";
CreateDir("-p $piddir");

my $pid = fork();
if($pid == 0) {
	#child
	chdir("$pid");
	system("pwd");
	system("python -m SimpleHTTPServer");
	exit(0);
} else {
	print "Parent moving on with condor_urlfetch\n";
}

my $firstappend_condor_config = '
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	NUM_CPUS = 2
	NEGOTIATOR_INTERVAL = 5
	LOCAL_CONFIG_FILE = $(LIBEXEC)/condor_urlfetch -master\
	  http://127.0.0.1:8000/condor_config.local  |
';

my $desiredlocal = ""; 
my $iswindows = is_windows();
if($iswindows) {
} else {
	$desiredlocal = "$topdir/$piddir/condor_config.local";
}

$configfile = CondorTest::CreateLocalConfig($firstappend_condor_config,"jobtesturlfetch",$desiredlocal);
print "local config file:$configfile\n";

if($iswindows) {
	system("taskkill /PID $pid");
} else {
	system("kill -9 $pid");
}
print "waiting on pid $pid\n";

my $child = 0;
open(RES,">$resultfile") || die "Can't open results file: $resultfile:$!\n";
$mylog = $resultfile . ".watch";
open(LOG,">$mylog") || die "Can not open log: $mylog: $!\n";
print LOG "waiting on pid: $pid\n";
while(($child = waitpid($pid,0)) != -1) {
  	$retval = $?;
  	TestDebug( "Child status: $retval\n",4);
  	if ($retval & 0x7f) {
      	# died with signal and maybe coredump.
      	# Ignore the fact a coredump happened for now.
      	TestDebug( "Monitor done and status bad: \n",4);
      	$retval = 1;
  	} else {
      	# Child returns valid exit code
      	my $rc = $retval >> 8;
      	$retval = $rc;
  	}
  	print RES "Exit $retval \n";
  	print LOG "Pid $child res was $retval\n";
}
print LOG "Done waiting on pid: $pid\n";
close(RES);
close(LOG);

exit(0);

CondorTest::StartCondorWithParams(
    condor_name => "compressedtestname",
    fresh_local => "TRUE",
    condorlocalsrc => "$configfile",
);

# where am I running
$currenthost = CondorTest::getFqdnHost();

$mypid = $$;
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

##
## Universe
## 
my $longuniverse = "local";

SimpleJob::RunCheck(
	deferralpreptime=>20,
	deferraltime=>$deferralTime,
	runthis=>"x_time.pl",
	on_submit=>$submitted,
	on_execute=>$executed,
	on_hold=>$held,
	on_abort=>$aborted
);

CondorTest::EndTest();
print scalar localtime() . "\n";
my $result = 0;

if( $result != 0 )
{
	exit(1);
}

CondorTest::debug("$testname SUCCESS\n",1);
exit(0);

