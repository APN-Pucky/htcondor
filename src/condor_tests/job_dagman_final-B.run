#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# This test tests the final DAG node when the DAG fails.

#TEMP -- add check that 'FINAL' gets properly put into rescue DAG
#TEMP -- test should make sure final node is run *last*
#TEMP -- check node status file
#TEMP -- check DAG_STATUS value in output
#TEMPTEMP -- make a single file that has output from all node jobs -- easier to check -- see halt tests

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_final-B.dag';
$testdesc =  'Condor submit dag - basic final node test B - scheduler U';
$testname = "job_dagman_final-B";
$dagman_args = "-verbose";

@outfiles = ("job_dagman_final-B-nodeA.out", "job_dagman_final-B-nodeB.out",
	"job_dagman_final-B-nodeC.out");
$scriptfile = "job_dagman_final-B-scripts.out";

# Note: we must find these lines *in the specified order*.
@scriptlines = ("DAG_STATUS=2", "FAILED_COUNT=1", "Node B_C Pre",
	"DAG_STATUS=2", "FAILED_COUNT=1", "Node B_C Post");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing output files.
foreach $name (@outfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}
if (-e $scriptfile) {
	runcmd("rm -f $scriptfile");
}


$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	die "Error: DAG should fail!\n";
};

$failure = sub
{
	CondorTest::debug("executed with failure\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

	#TEMP -- need to check output files, etc.

	$lineindex = 0;
	$line = "";
	$passed = 0;
	$canopen = open(OUT,"<$scriptfile");
	if( ! (defined $canopen)) {
		CondorTest::debug("Can not open outfile<$scriptfile>:$!\n",1);
		$diditpass = 0;
	}
	while(<OUT>) {
		chomp();
		$line = $_;
		$target = $scriptlines[$lineindex];
		if( $line =~ /$target/ ) {
			CondorTest::debug("$name: $line\n",1);
			$lineindex++;
			if ($lineindex > $#scriptlines) {
				$passed = 1;
				break;
			}
		} else {
			CondorTest::debug("failed: \"extra\" output line $line\n");
			$diditpass = 0;
		}
	}
	close(OUT);
	if($passed == 1 ) {
		;
	} else {
		CondorTest::debug("failed: missing output line $target\n",1);
		$diditpass = 0;
	}

    if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success );
CondorTest::RegisterExitedFailure( $testname, $failure );
CondorTest::RegisterExecute($testname, $executed );
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

