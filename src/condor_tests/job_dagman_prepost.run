#! /usr/bin/env perl
use CondorTest;

$cmd = 'job_dagman_prepost.dag';

$flowlog = "job_dagman_prepost-srvr-log.log";
$serversubFile = "job_dagman_prepost-srvr.cmd";

$testname = 'Condor submit dag - verify pre/post ran test - scheduler U';
$dagman_args = "-verbose";
$output = "job_dagman_prepost.dag.dagman.out";

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$abnormal = sub 
{

	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	print "Good. We need the dag to run\n";
};

$submitted = sub
{
	print "submitted: This test will see submit, executing and successful completion\n";
};

$success = sub
{
	my $scriptcounter = 0;
	my $postcounter = 0;
	my $precounter = 0;
	my $line = "";
	print "executed successfully\n";
	open(FLOW,"./x_dagman_readprepostlog.pl $flowlog PREPOST 20 20 | ") || die "Can not open flowlog: $!\n";
	while(<FLOW>)
	{
		my $ret;
		chomp;
		$ret = $_;
		print "$ret\n";
		if( $ret ne "0" )
		{
			die "failed to run exact number of pre/post scripts\n";
		}
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

system("rm -f $flowlog");
my $cluster  = Condor::Submit($serversubFile);
print   "Server for flow tracking started as Cluster -$cluster-\n";

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

