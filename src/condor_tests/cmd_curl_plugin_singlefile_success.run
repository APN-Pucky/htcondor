#!/usr/bin/env python

import os
import sys
import time

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.Globals import *
from pytest.HTTPServer import HTTPServer
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils


def SuccessCallback():
    Utils.TLog("Job finished successfully as expected.")

def FailureCallback():
    Utils.TLog("Job failed unexpectedly.")

def HttpSuccessUrlHandler(request):
    request.protocol_version = "HTTP/1.1"
    request.send_response(200)
    request.send_header("Content-type", "text/html")
    request.end_headers()
    request.wfile.write("<html>Great success!</html>")


def main():

    # Create a new test environment
    test_params = {
        "STARTD_DEBUG":    "D_FULLDEBUG",
        "STARTER_DEBUG":   "D_FULLDEBUG",
        "SHADOW_DEBUG":    "D_FULLDEBUG"
    }
    test = CondorTest("cmd_curl_plugin_singlefile_success", test_params)

    # Start a HTTP server, and register the /success URL to return a 
    httpd = HTTPServer()
    httpd.Start()
    httpd.RegisterUrlHandler("/success", HttpSuccessUrlHandler)
    success_url = "http://127.0.0.1:" + str(httpd._port) + "/success"

    # Stand up a PersonalCondor. If not successful this will fail the test.
    personal = test.StartPersonalCondor()

    # Setup a new test job
    job_args = {
        "executable":               "cmd_curl_plugin_singlefile_success.py",
        "output":                   "cmd_curl_plugin_singlefile_success.out",
        "transfer_input_files":     success_url,
        "should_transfer_files":    "YES"
    }
    test_job = CondorJob(job_args)

    # Register job handlers
    test_job.RegisterSuccess(SuccessCallback)
    test_job.RegisterFailure(FailureCallback)

    # Submit the test job
    personal.SubmitJob(test_job)
    result = test_job.WaitForFinish()
    Utils.TLog("Job returned result: " + str(result))

    # The success/failure callbacks handle the sys.exit() calls
    # All our testing infrastructure will shut down via destructors
    # Nothing left to do at this point.


if __name__ == "__main__":
    main()