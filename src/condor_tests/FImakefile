/***********************************************************************
 First, include common settings across all compiler-specific Imakefiles
************************************************************************/
#include "Imakefile.common"
#include "Imakefile.common.compiler"


/***********************************************************************
 Now, define make variables that are specific to this compiler
************************************************************************/
Fortran = F_COMPILER
FFLAGS = $(BUILD_FLAGS) $(INCLUDE_FLAGS)


/***********************************************************************
 Finally, define the Fortran-specific tests themselves
************************************************************************/

#if ! IS_CLIPPED

DESC(job_ckpt_f-printer_std,"Can Fortran print output while ckpting?")
CBUILD($(Fortran),job_ckpt_f-printer_std,f)
RUN(job_ckpt_f-printer_std)
TESTCLASS(job_ckpt_f-printer_std,quick)

DESC(job_ckpt_f-reader_std,"Can Fortran read input while ckpting?")
CBUILD($(Fortran),job_ckpt_f-reader_std,f)
SYM_FILE(job_ckpt_f-reader_std,in)
RUN(job_ckpt_f-reader_std)

DESC(job_ckpt_f-areauc_std,"Can Fortran compute the area under a curve?")
CBUILD($(Fortran),job_ckpt_f-areauc_std,f)
RUN(job_ckpt_f-areauc_std)

DESC(job_rsc_f-direct-write_std,"Can Fortran jobs use direct access I/O?")
CBUILD($(Fortran),job_rsc_f-direct-write_std,f)
RUN(job_rsc_f-direct-write_std)
DEPS(job_rsc_f-direct-write_std,x_hello.in)


#if FORTRAN_HAS_RECURSION

DESC(job_ckpt_f-floats_std,"Do Fortran jobs ckpt/restore floating point nums?")
CBUILD($(Fortran),job_ckpt_f-floats_std,f)
RUN(job_ckpt_f-floats_std)

DESC(job_ckpt_f-integers_std,"Do Fortran jobs ckpt/restore integers?")
CBUILD($(Fortran),job_ckpt_f-integers_std,f)
RUN(job_ckpt_f-integers_std)

#endif /* FORTRAN_HAS_RECURSION */

#endif /* ! IS_CLIPPED */



