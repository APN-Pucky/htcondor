/*************************************************************
 * This file is for tests that are common to both C and C++
 ************************************************************/

#if ! IS_CLIPPED

/*********************************
 * Tests for FULL ports
 ********************************/


/****************************
 * Core Condor Functionality
 ***************************/

DESC(job_core_bigenv_std,"Standard job with an enormous environment")
CBUILD($(CC),job_core_bigenv,c)
DEPS(job_core_bigenv_std,job_core_bigenv.exe)
RUN(job_core_bigenv_std)
TESTCLASS(job_core_bigenv_std,quick)


/****************************
 * Remote System Calls
 ***************************/

DESC(job_rsc_all-syscalls_std,"Tests nearly all remote syscalls")
CBUILD($(CC),job_rsc_all-syscalls_std,c)
RUN(job_rsc_all-syscalls_std)
TESTCLASS(job_rsc_all-syscalls_std,quick)
TESTCLASS(job_rsc_all-syscalls_std,critical)

DESC(job_rsc_hello_std,"Tests various RSC I/O methods")
CBUILD($(CC),job_rsc_hello_std,c)
DEPS(job_rsc_hello_std,x_hello.in)
RUN(job_rsc_hello_std)
TESTCLASS(job_rsc_hello_std,quick)

DESC(job_rsc_fcntl_std,"Does fcntl() work remotely?")
CBUILD($(CC),job_rsc_fcntl_std,c)
RUN(job_rsc_fcntl_std)
TESTCLASS(job_rsc_fcntl_std,quick)

DESC(job_rsc_truncate_std,"Can we truncate files with open() remotely?")
CBUILD($(CC),job_rsc_truncate_std,c)
RUN(job_rsc_truncate_std)
TESTCLASS(job_rsc_truncate_std,quick)

#if HAS_GETDIRENTRIES && ! IS_HPUX
/* even though HPUX has getdirentries(), our test program doesn't
   build a valid test for it and the code is all #ifdef'ed out.  so,
   until someone fixes the test, there's no reason to run it here.
*/
DESC(job_rsc_getdirentries_std,"Does getdirentries() work remotely?")
CBUILD($(CC),job_rsc_getdirentries_std,c)
RUN(job_rsc_getdirentries_std)
#endif /* HAS_GETDIRENTRIES */

DESC(job_rsc_fgets_std,"Does fgets() work remotely?")
CBUILD($(CC),job_rsc_fgets_std,c)
DEPS(job_rsc_fgets_std,x_data.in)
RUN(job_rsc_fgets_std)
TESTCLASS(job_rsc_fgets_std,quick)

DESC(job_rsc_fread_std,"Does fread() work remotely?")
CBUILD($(CC),job_rsc_fread_std,c)
DEPS(job_rsc_fread_std,x_data.in)
RUN(job_rsc_fread_std)
TESTCLASS(job_rsc_fread_std,quick)

DESC(job_rsc_ftell_std,"Does ftell() work remotely?")
CBUILD($(CC),job_rsc_ftell_std,c)
DEPS(job_rsc_ftell_std,x_data.in)
RUN(job_rsc_ftell_std)
TESTCLASS(job_rsc_ftell_std,quick)

DESC(job_rsc_stat_std,"Does stat() work remotely?")
CBUILD($(CC),job_rsc_stat_std,c)
DEPS(job_rsc_stat_std,x_data.in)
RUN(job_rsc_stat_std)
TESTCLASS(job_rsc_stat_std,quick)


/****************************
 * Checkpointing
 ***************************/

DESC(job_ckpt_stack_std,"ckpt/restore function call stack")
CBUILD($(CC),job_ckpt_stack_std,c)
RUN(job_ckpt_stack_std)
TESTCLASS(job_ckpt_stack_std,quick)

DESC(job_ckpt_floats_std,"ckpt/restore floating point registers")
CBUILD($(CC),job_ckpt_floats_std,c)
RUN(job_ckpt_floats_std)
TESTCLASS(job_ckpt_floats_std,quick)

DESC(job_ckpt_integers_std,"ckpt/restore integer registers")
CBUILD($(CC),job_ckpt_integers_std,c)
RUN(job_ckpt_integers_std)
TESTCLASS(job_ckpt_integers_std,quick)

#if DOES_SAVE_SIGSTATE
DESC(job_ckpt_signals_std,"ckpt/restore signal state")
CBUILD($(CC),job_ckpt_signals_std,c)
RUN(job_ckpt_signals_std)
#endif /* DOES_SAVE_SIGSTATE */

DESC(job_ckpt_dup_std,"ckpt/restore file table state with dup() calls")
CBUILD($(CC),job_ckpt_dup_std,c)
DEPS(job_ckpt_dup_std,x_data.in)
RUN(job_ckpt_dup_std)

DESC(job_ckpt_gettimeofday_std,"ckpt/restore current time-of-day")
CBUILD_DEP($(CC),job_ckpt_gettimeofday_std,c,x_waste_second.o)
RUN(job_ckpt_gettimeofday_std)

DESC(job_ckpt_getrusage-loop_std,"Does getrusage() work across ckpts?")
CBUILD_DEP($(CC),job_ckpt_getrusage-loop_std,c,x_waste_second.o)
/* 
this is a terrible idea, but i'm commenting out this test so it
doesn't keep running.  there's a bug in condor's getrusage() support
which this test is noticing but no one's bothered to ever fix it.  so,
for now, instead of seeing failed tests every night, we'll just know
it's broken and stop running it.
RUN(job_ckpt_getrusage-loop_std)
*/

#endif /* ! IS_CLIPPED */
