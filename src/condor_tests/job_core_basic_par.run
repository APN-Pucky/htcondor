#!/usr/bin/env perl
##
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use strict;
use warnings;

use CondorTest;
use CondorUtils;

my $cmd_template = "job_core_basic_par.template";
my $testdesc =  'job_core_basic_par - Simple parallel job';
my $cmd = "job_core_basic_par.cmd";
my $corename = "job_core_basic_par";
my $debuglevel = 1;

# where am I running
my $currenthost = CondorTest::getFqdnHost();

print scalar localtime() . "\n";

my $mypid = $$;
my $version = "basicpar";
my $mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

my $mysubmitnm = $corename . $mypid . ".cmd";
my $mysubmitnmcmdout = $corename . $mypid . ".cmd.out";
my $mysubmitnmlog = $corename . $mypid . ".log" ;
my $mysubmitnmerr = $corename . $mypid . ".err" . "\$(NODE)";
my $mysubmitnmout = $corename . $mypid . ".out" . "\$(NODE)";
my $mycorenm = $corename . ".cmd";
my $mycorenmcmdout = $corename . ".cmd.out";
my $mycorenmlog = $corename . ".log";
my $mycorenmerr = $corename . ".err";
my $mycorenmout = $corename . ".out";

#print "Master PID is $mypid\n";
#print "Master PID submit file is $mysubmitnm\n";

my $testname = "job_core_basic_par";

my $firstappend_condor_config = "
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	ALL_DEBUG = 
	# set up dedicated scheduler
	# Adding Dedicated Scheduler parrallel Universe;
	DedicatedScheduler = \"DedicatedScheduler\@schedd$mypid$version\@$currenthost\"
	STARTD_EXPRS = \$(STARTD_EXPRS), DedicatedScheduler
	SCHEDD_DEBUG = D_FULLDEBUG
	SCHEDD_NAME = schedd$mypid$version
	NUM_CPUS = 8
	SUSPEND = FALSE
";
 
my $configfile = CondorTest::CreateLocalConfig($firstappend_condor_config,"$version");

my $new_condor_instance = CondorTest::StartCondorWithParams(
	condor_name => "$version",
	fresh_local => "TRUE",
	condorlocalsrc => "$configfile",
);

my $parallelport = $new_condor_instance->GetCollectorPort();

print "\n\n\n\n\n\n*************** collector port:$parallelport **************\n\n\n\n\n";

runcmd("condor_status -schedd -format '%s\\n' Name");

my $line;
open(CSUB,">$mysubmitnm") || die "Can't open new submit file $mysubmitnm: $!\n";
open(TPLATE,"<$cmd_template") || die "Can't open submit file template $cmd_template: $!\n";
while(<TPLATE>)
{
	CondorUtils::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*log\s*= .*$/)
	{
		my $lognm = $mysubmitnmlog;
		#print "New log name: $lognm\n";
		print CSUB "log = $lognm\n";
	}
	elsif( $line =~ /^\s*output\s*= .*$/)
	{
		my $outputnm = $mysubmitnmout;
		#print "New out name: $outputnm\n";
		print CSUB "output = $outputnm\n";
	}
	elsif( $line =~ /^\s*error\s*= .*$/)
	{
		my $errornm = $mysubmitnmerr;
		#print "New error name: $errornm\n";
		print CSUB "error = $errornm\n";
	}
	elsif( $line =~ /^(.*)basic_par_socket(.*)$/)
	{
		my $newargs = $1 . " " . $mypid . " " . $2; 
		#print "New  args are < $newargs >\n";
		print CSUB "$newargs\n";
	}
	else
	{
		#print "template: $line\n";
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);

# at this point personal should be up and we have the parallel submit
# file we want.


#my $result = system("./job_core_basic_par.pl $mysubmitnm $mypid");
#CondorTest::debug("Result of basic paarallel  job is  $result\n",$debuglevel);

my $cmdfinal = $mysubmitnm;
my $pid = $mypid;

#my $testdesc =  'Basic Parallel - Parallel U';
#my $testname = "job_core_basic_par";
#my $debuglevel = 1;
my $outputbase = "job_core_basic_par$pid.out";

CondorTest::debug("Submit file for this test is $cmdfinal\n",$debuglevel);

my $aborted = sub {
	my %info = @_;
	my $done;
	die "Abort event not expected!\n";
};

my $held = sub {
	my %info = @_;
	my $cluster = $info{"cluster"};
	die "Held event not expected.....\n"
};

my $executed = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};

	CondorTest::debug("Parallel job executed\n",$debuglevel);
};

my $success = sub
{
	my $max = 4;
	my $foundcount = 0;
	my $count = 0;
	my $fullfile = "";

	print "Checking for expected job output - ";

	while ($count < $max) {
		$fullfile = $outputbase . $count;
		my $line = "";
		#print "$fullfile\n";
		#system("cat $fullfile");
		open(OUT,"<$fullfile") or die "Can not open <$fullfile>:$!\n";
		while(<OUT>) {
			chomp();
			$line = $_;
			if($line =~ /^machine $count/) {
				$foundcount += 1;
				#print $line;
			}
		}
		close(OUT);
		$count += 1;
	}
	if($foundcount != $max) {
		print "bad\n";
		print "Only correct output in $foundcount output files\n";
		CondorTest::RegisterResult(0, "test_name", $testname);
	} else {
		print "ok\n";
	}
	CondorTest::debug("Success: Parallel Test ok\n",$debuglevel);
	CondorTest::RegisterResult(1, "test_name", $testname);
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);

if( CondorTest::RunTest($testname, $cmdfinal, 0) ) {
	CondorTest::debug("$testname: SUCCESS\n",$debuglevel);
} else {
	print "$testname: CondorTest::RunTest() failed\n";
}

#fails due to directory matching the pattern
runcmd("cp *job_core_basic_par* $mysaveme", {expect_result=>\&ANY});

if( -e "$mysubmitnm" )
{
	runcmd("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	runcmd("cp $mysubmitnmcmdout $mycorenmcmdout");
}

if( -e "$mysubmitnmlog" )
{
	runcmd("cp $mysubmitnmlog $mycorenmlog");
}


CondorTest::EndTest();

exit(0);
