#!/usr/bin/env python

import os
import sys

# If your test needs to start a custom personal HTCondor, you can use StartPersonalCondor() of the CondorTest class
# If your test just needs to have HTCondor running, you can use testreq/CONDOR_TESTREQ_CONFIG comment mechanism instead.
# see job_late_materialize_py for an example of the testreq mechanism

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils
from pytest.Globals import *


def submit_callback():
    Utils.TLog("Custom submit callback called!")

def success_callback():
    Utils.TLog("Test succeded. Exiting with status 0")
    sys.exit(0)

def failure_callback():
    Utils.TLog("Test failed. Exiting with status 1")
    sys.exit(1)


def main():

    # Create a new test. If we don't specify a name, take the file name.
    test = CondorTest("job_basic_pytest")

    # Stand up a PersonalCondor
    personal_handle = test.StartPersonalCondor()
    if personal_handle is -1:
        Utils.TLog("Failed to start the PersonalCondor environment. Exiting.")
        sys.exit(1)
    else:
        Utils.TLog("PersonalCondor environment started successfully with handle " + str(personal_handle))

    # Setup a new test job
    job_args = {
        "executable":   "x_echostring.pl",
        "output":       "job_basic_pytest.out",
        "error":        "job_basic_pytest.err",
        "log":          "job_basic_pytest.log",
        "arguments":    "\"Basic Python pytest submission, cluster $(cluster)\""
    }
    test_job = CondorJob(job_args)

    # Register handlers
    test_job.RegisterSubmit(submit_callback)
    test_job.RegisterSuccess(success_callback)
    test_job.RegisterFailure(failure_callback)

    # Submit the test job
    if test_job.Submit() == JOB_FAILURE:
        Utils.TLog( "Failed to submit job!" )
        sys.exit( 1 )
    test_job.WaitForFinish()

    # Assume that PersonalCondor will shut down by itself if we don't explicitly call it?
    test.End()


if __name__ == "__main__":
    main()
