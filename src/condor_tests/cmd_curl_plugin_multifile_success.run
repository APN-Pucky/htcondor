#!/usr/bin/env python

import htcondor
import os
import sys

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.Globals import *
from pytest.HTTPServer import HTTPServer
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils

def SuccessCallback():
    Utils.TLog("Job successful as expected. Now checking for correct log contents.")
    multifile_curl_plugin_invokes = 0
    with open(htcondor.param["STARTER_LOG"]) as starter_log:
        starter_log_content = starter_log.readlines()
    # This assumes that this instance of the test is the only one which has
    # used this personal condor, which is inconvenient for development work.
    for line in starter_log_content:
        if "invoking" in line and "multifile_curl_plugin" in line:
            multifile_curl_plugin_invokes += 1
    if multifile_curl_plugin_invokes != 1:
        Utils.TLog("Wrong number of multifile_curl_plugin invocations, test failed.")
        sys.exit(TEST_FAILURE)
    Utils.TLog("Correct number of multifile_curl_plugin invocations, test succeeded.")
    sys.exit(TEST_SUCCESS)

def FailureCallback():
    Utils.TLog("Job failed unexpectedly. Test failed.")
    sys.exit(TEST_FAILURE)

def HttpSuccessUrlHandler(request):
    request.protocol_version = "HTTP/1.1"
    request.send_response(200)
    request.send_header("Content-type", "text/html")
    request.end_headers()
    request.wfile.write("<html>Great success!</html>")


def main():

    # Create a new test environment
    test_params = {
        "ENABLE_MULTIFILE_TRANSFER_PLUGINS":    "true",
        "FILETRANSFER_PLUGINS":                 "$(LIBEXEC)/multifile_curl_plugin",
        "STARTER_LOG_NAME_APPEND":              "false"
    }
    test = CondorTest("cmd_curl_plugin_multifile_success", test_params)

    # Start a HTTP server
    httpd = HTTPServer()
    httpd.Start()

    # Register three separate URLs to successfully serve a small file
    httpd.RegisterUrlHandler("/file1", HttpSuccessUrlHandler)
    httpd.RegisterUrlHandler("/file2", HttpSuccessUrlHandler)
    httpd.RegisterUrlHandler("/file3", HttpSuccessUrlHandler)
    file1_url = "http://127.0.0.1:" + str(httpd._port) + "/file1"
    file2_url = "http://127.0.0.1:" + str(httpd._port) + "/file2"
    file3_url = "http://127.0.0.1:" + str(httpd._port) + "/file3"

    # Stand up a PersonalCondor
    personal_handle = test.StartPersonalCondor()
    if personal_handle == -1:
        Utils.TLog("Failed to start the PersonalCondor environment. Exiting.")
        sys.exit(1)
    else:
        Utils.TLog("PersonalCondor environment started successfully with handle " + str(personal_handle))

    # Setup a new test job
    job_args = {
        "executable":               "cmd_curl_plugin_multifile_success.py",
        "arguments":                "Testing multifile_curl_plugin success",
        "output":                   "cmd_curl_plugin_multifile_success.out",
        "transfer_input_files":     file1_url + ", " + file2_url + ", " + file3_url,
        "should_transfer_files":    "YES"
    }
    test_job = CondorJob(job_args)

    # Register handlers
    test_job.RegisterJobTerminated(SuccessCallback)
    test_job.RegisterJobHeld(FailureCallback)

    # Submit the test job
    test_job.Submit()
    result = test_job.WaitUntilJobTerminated()
    Utils.TLog("Test returned result: " + str(result))

    # The success/failure callbacks handle the sys.exit() calls
    # All our testing infrastructure will shut down via destructors
    # Nothing left to do at this point.


if __name__ == "__main__":
    main()
