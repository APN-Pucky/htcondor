#! /usr/bin/env perl
use CondorTest;

$cmd = 'job_core_hold_sched.cmd';
$testname = 'Condor allows submit with hold - scheduler U';

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$abnormal = sub {
	my %info = @_;

	die "Want to see $killsig in this file $outfile\n";
};

$aborted = sub {
	my %info = @_;
	my $done;
	print "Abort event expected as we clear job\n";
};

$held = sub {
	my %info = @_;
	my $done;
	print "Held event expected\n";
	my $cluster = $info{"cluster"};
	die "We don't hit Hold state for job started in hold!\n";
};

$executed = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};

	die "We should never hit execute state but go to hold state\n";
	sleep 5;
};

$submitted = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};

	my $qstat = CondorTest::getJobStatus($cluster);
	while($qstat == -1)
	{
		print "Job status unknown - wait a bit\n";
		sleep 2;
		$qstat = CondorTest::getJobStatus($cluster);
	}
	if($qstat != HELD)
	{
		die "Cluster $cluster failed to go on hold<Status is $qstat>\n";
	}
	else
	{
		print "good, cluster $cluster is on hold\n";
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			return(1)
		}
	}
	sleep 5;
};

CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

