#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorPersonal;
use Cwd;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testname = 'fetch_work-basic';
$corename = "fetch_work-basic";

# where am I running
$currenthost = `hostname`;
chomp($currenthost);
$primarycollector = $currenthost;
my @adarray;

CondorTest::fullchomp($currenthost);

system("date");

$mypid = CondorPersonal::SaveMeSetup($corename);
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

print "Master PID is $mypid\n";
print "Master PID submit file is $mysubmitnm\n";

$topdir = getcwd();
print "Running here: $topdir\n";

$workfetchscripts = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "workfetch_scripts";
$work = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "work";
$results = $topdir . "/" . $mysaveme . "/" . "$mypid" . "/" . "results";
$scripts = "x_fetchwork_scripts.tar.gz";
print "Work fetch scripts here: $workfetchscripts\n";

system("mkdir -p $workfetchscripts");
system("cp $scripts $workfetchscripts");

system("mkdir -p $work");
system("mkdir -p $results");

$here = getcwd();
chdir("$workfetchscripts");
###### extract work fetch scripts ######
system("tar -zxvf $scripts");
if( !(-f "job_fetch.pl")) {
	print "Failed to setup fetch scripts\n";
	system("pwd");
	system("ls");
	exit(1);
} else {
	print "Have setup fetch scripts\n";
	system("pwd");
	system("ls");
}
###### tie to this unique test ######
my $targetdir = '.';
print "Directory to change is $targetdir\n";
opendir DH, $targetdir or die "Can not open $dir:$!\n";
foreach $file (readdir DH)
{
	$new = $file . ".new";
    my $line = "";
    next if $file =~ /^\.\.?$/;
    next if $file =~ /^.*\.txt$/;
    next if $file =~ /^.*\.tar\.gz$/;
	print "Edit $file.......\n";
	open(OLD,"<$file") || die "Can not open $file:$!\n";
	open(NEW,">$new") || die "Can not open $new:$!\n";
	while(<OLD>) {
		chomp();
		$line = $_;
		if($line =~ /^(.*)--WORK--(.*)$/) {
			print NEW "$1$work$2\n";
		} elsif($line =~ /^(.*)--RESULTS--(.*)$/) {
			print NEW "$1$results$2\n";
		} else {
			print NEW "$line\n";
		}
	}
	close(NEW);
	close(OLD);
	system("mv $file $file.old");
	system("mv $new $file");
	system("chmod 755 $file");
}

chdir("$here");

my $line;
open(POSTFIGSRC,"<x_fetch_configpostsrc.template") || die "Could not open x_fetch_configpostsrc.template: $!\n";
open(POSTFIGDONE,">x_fetch_configpostsrc") || die "Could not open x_fetch_configpostsrc: $!\n";
while(<POSTFIGSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*(.*)\s+=\s+xxxxxx(.*)$/) {
		print POSTFIGDONE "$1 = $workfetchscripts/$2\n";
	} else {
		print POSTFIGDONE "$line\n";
	}
}
close(POSTFIGSRC);
close(PASRAMDONE);

my $version = "fetch";
# get a local scheduler running (side a)
my $configloc = CondorPersonal::StartCondor("x_param.fetch-basic" ,$version);
my @fetch = split /\+/, $configloc;
my $locconfig = shift @fetch;
my $locport = shift @fetch;

print "---fetch config is $locconfig and local port is $locport---\n";

$primarycollector = $primarycollector . ":" . $locport;

print "Primary collector for other nodes <<$primarycollector>>\n";

$ENV{CONDOR_CONFIG} = $locconfig;
print "New collector is this:\n";
system("condor_config_val COLLECTOR_HOST");

my $bail = 0;

my $fetchstatus = CondorTest::verbose_system("./fetch_work-basic.pl $work $results $version");
print "Status of work fetch is \"$fetchstatus\"\n";

print "Saving things and cleaning up....\n";

system("cp *fetck_work-basic* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

# still set to local config
 $ENV{CONDOR_CONFIG} = $locconfig;


$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

system("date");

if( $fetchstatus != 0 )
{
	# actual test failed but we allowed cleanup
	print "fetck_work-basic FAILED\n";
	system("date");
	exit(1);
}

system("date");
exit(0);
