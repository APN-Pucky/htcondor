#! /usr/bin/env perl
use CondorTest;
use CondorPersonal;
use Cwd;

CondorPersonal::DebugOff();
Condor::DebugOff();

my $topleveldir = getcwd();

$param_template = "x_param.protocol-ssl.template";
$testname = 'lib_auth_protocol-ssl - Security Protocol SSL Authentication Test';
$corename = "lib_auth_protocol-ssl";
$mycustomconfig = "x_secssl_configpostsrc";
$mytestnegotiation = "x_secneg_clR_dmnR_secprepostsrc";
$mytestnegotiation_result = "yes";
$mycmdfile = "lib_auth_protocol-ssl.cmd";
$mysslcerts = "x_lib_auth-ssl_keys.tgz";

$mycafile = "ssl_keys/root-ca.crt";
$mycadir = "ssl_keys/cadir";
$mycertfile = "ssl_keys/host.crt";
$mykeyfile = "ssl_keys/host.key";

# where am I running
$dummyhost = "gamgee.cs.wisc.edu";
$currenthost = `hostname`;
CondorTest::fullchomp($currenthost);

system("date");
print "Dummyhost was $dummyhost and really running on $currenthost\n";

$pid = $$;
$mypid = $pid;

$pidleveldir = $topleveldir . "/" . $mypid;
system("mkdir -p $pidleveldir");
chdir("$pidleveldir");
system("tar -zxvf ../$mysslcerts");
chdir("$topleveldir");

$myvariation = 1;
$mysaveme = $corename . ".saveme";
system("mkdir $mysaveme");
$mypiddir = $mysaveme . "/" . $mypid;
system("mkdir $mypiddir");
#make a symbolic link for personal condor module to use
system("ln -s $mypiddir $mypid");

#print "$line\n";
$myparamname = $corename . $mypid . ".param";
$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".log";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

print "Master PID is $mypid\n";
print "Master PID submit file is $mysubmitnm\n";

# Edit submit file to submit to scheduler at securitypool (side b) schedd.
my $line;
open(CSUB,">$myparamname") || die "Can't open new submit file $myparamname: $!\n";
open(TPLATE,"<$param_template") || die "Can't open param template $param_template: $!\n";
while(<TPLATE>)
{
	CondorTest::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*secprepostsrc\s*=\s*.*$/ )
	{
		print "Setting up for $mytestnegotiation\n";
		print CSUB "secprepostsrc = $mytestnegotiation\n";
	}
	else
	{
		print "template: $line\n";
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);
sleep 10;

my $configtemplate = $mycustomconfig . ".template";
open(CONFIG,">$mycustomconfig") || die "Can't open new postconfig file $mycustomconfig: $!\n";
open(CONFIGTPLATE,"<$configtemplate") || die "Can't open postconfig template $configtemplate: $!\n";
while(<CONFIGTPLATE>)
{
	$tmp = "";
	CondorTest::fullchomp($_);
	$line = $_;
	if($line =~ /^AUTH_SSL_SERVER_CAFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_SERVER_CAFILE = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_SERVER_CADIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_SERVER_CADIR = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_SERVER_CERTFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_SERVER_CERTFILE = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_SERVER_KEYFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_SERVER_KEYFILE = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_CLIENT_CAFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_CLIENT_CAFILE = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_CLIENT_CADIR\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_CLIENT_CADIR = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_CLIENT_CERTFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_CLIENT_CERTFILE = $tmp\n";
	} elsif($line =~ /^AUTH_SSL_CLIENT_KEYFILE\s*=\s*XXXXX(\/.*)$/) {
		$tmp = $pidleveldir . $1;
		print CONFIG "AUTH_SSL_CLIENT_KEYFILE = $tmp\n";
	} else {
		print CONFIG "$line\n";
	}

}
close(CONFIG);
close(CONFIGTPLATE);

#my $configsec = CondorPersonal::DebugOn();
my $configsec = CondorPersonal::StartCondor($myparamname ,"protocol", $mypid);
my @securitypool = split /\+/, $configsec;
my $secconfig = shift @securitypool;
my $secport = shift @securitypool;

print "---security config is $secconfig and securitypool port is $secport---\n";
	

$ENV{CONDOR_CONFIG} = $secconfig;
# submit into local schedd (side a)

my $result = system("./x_lib_auth_protocol.pl $mypid \"protocol\" $mytestnegotiation_result $mycmdfile");
print "Result of crafted lib_auth_protocol job is  $result\n";

system("cp *$corename* $mysaveme");
	
if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

my @adarray;
my $status = 1;
my $cmd = "condor_off -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

system("date");

if( $result != 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

