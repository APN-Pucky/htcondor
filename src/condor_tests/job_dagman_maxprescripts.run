#! /usr/bin/env perl
use CondorTest;

$cmd = 'job_dagman_maxprescripts.dag';

$flowlog = "job_dagman_maxprescripts-srvr-log.log";
$serversubFile = "job_dagman_maxprescripts-srvr.cmd";

$testname = 'Condor submit dag - throttle prescripts test - scheduler U';
$maxjobs = 4;
$dagman_args = "-v -MaxPre $maxjobs";

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $joblog;

$abnormal = sub 
{

	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	print "Good. We need the dag to run\n";
};

$submitted = sub
{
	print "submitted: This test will see submit, executing and successful completion\n";
	$joblog = "submitdag_maxprescripts.log";
};

$success = sub
{
	print "executed successfully\n";
	open(FLOW,"./x_dagman_readflowlog.pl $flowlog MAXPRE $maxjobs | ") || die "Can not open flowlog: $!\n";
	while(<FLOW>)
	{
		my $ret;
		chomp;
		$ret = $_;
		print "$ret\n";
		if( $ret ne "0" )
		{
			die "MAXPRE of $maxjobs exceeded\n";
		}
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

system("rm -f $flowlog");
my $cluster  = Condor::Submit($serversubFile);
print	"Server for flow tracking started as Cluster -$cluster-\n";

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

