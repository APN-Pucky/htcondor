#!/usr/bin/env python

import os
import sys

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils


def submit_callback():
    Utils.TLog("Custom submit callback called!\n")

def success_callback():
    Utils.TLog("Custom success callback called, exiting with status 0\n")
    sys.exit(0)

def failure_callback():
    Utils.TLog("Custom failure callback called, exiting with status 1\n")
    sys.exit(1)


def main():

    # Create a new test. If we don't specify a name, take the file name.
    test = CondorTest("job_basic_python_test")

    # Stand up a PersonalCondor
    start_success = test.StartPersonalCondor()
    if start_success is False:
        Utils.TLog("Failed to start the PersonalCondor environment. Exiting.")
        sys.exit(JOB_FAILURE)
    else:
        Utils.TLog("PersonalCondor environment started successfully!")

    # Setup a new test job
    job_args = {
        "executable":   "x_echostring.pl",
        "output":       "job_basic_python_test.out",
        "error":        "job_basic_python_test.err",
        "arguments":    "\"Basic Python pytest submission, cluster $(cluster)\""
    }
    test_job = CondorJob(job_args)

    # Register handlers
    test.RegisterSubmit(submit_callback)
    test.RegisterSuccess(success_callback)
    test.RegisterFailure(failure_callback)

    # Submit the test job
    result = test.SubmitJob(test_job)
    Utils.TLog("Test returned result: " + str(result))

    # Assume that PersonalCondor will shut down by itself if we don't explicitly call it?
    test.End()


if __name__ == "__main__":
    main()