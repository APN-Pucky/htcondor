#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# This tests part of the "allow PRE script to skip node job" feature
# (gittrac #2122).  This makes sure the POST script also gets skipped
# if the PRE script returns the skip value (for node A).

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_pre_skip-C.dag';
$testdesc =  'Condor submit dag - basic pre_skip node test C - scheduler U';
$testname = "job_dagman_pre_skip-C";
$dagman_args = "-verbose";

$logfile = "job_dagman_pre_skip-A.dag.dagman.out";
@outfiles = ("job_dagman_pre_skip-C_A.out", "job_dagman_pre_skip-C_Apost.out",
	"job_dagman_pre_skip-C_B.out");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing log and output files
if (-e $logfile) {
	runcmd("rm -f $logfile");
}
foreach $name (@outfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

	$diditpass = 0 if (-e "C_A.out");
	if (-e "job_dagman_pre_skip-C_A.out") {
		CondorTest::debug("Error: Node A was not skipped!\n");
		$diditpass = 0;
	} else {
		 CondorTest::debug("Node A was correctly skipped\n");
	}
	if (-e "job_dagman_pre_skip-C_Apost.out") {
		CondorTest::debug("Error: Node A POST script was not skipped!\n");
		$diditpass = 0;
	} else {
		CondorTest::debug("Node A POST script was correctly skipped\n");
	}
	if (! -e "job_dagman_pre_skip-C_B.out") {
		CondorTest::debug("Node B was not run!!\n",1);
		$diditpass = 0;
	} else {
		CondorTest::debug("Node B was run\n",1);
	}
	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

