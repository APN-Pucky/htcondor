#!/usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# This program runs a standalone checkpointing job and ensures that it
# both checkpointed and resumed correctly.

use CondorUtils;
use strict;
use warnings;

my $testdesc =  'Standalone Checkpointing Stack Test';
my $testname = "job_ckpt_standalone_std.cndr.exe";
my $ckptfile = "job_ckpt_standalone_std.cndr.exe.ckpt.$$";
my $ret;
my $last;

my $pers = `uname -m`;
my $pers_fix;

# We need to have the right personality to run the stduniv program
if ($pers =~ m/i\d86/) {
	$pers_fix = "setarch i386 -L -B -R";
} else {
	$pers_fix = "setarch x86_64 -L -B -R";
}

print "Description: $testdesc\n";
print "Running: $testname\n";

# run the test, which will self checkpoint itself.

# The program better exit with SIGUSR2!
print "Starting standalone checkpointing test. Will checkpoint to $ckptfile.\n";
$ret = runcmd("$pers_fix ./$testname -_condor_aggravate_bugs -_condor_D_CKPT " .
			"-_condor_D_FULLDEBUG -_condor_D_ALWAYS " .
			"-_condor_ckpt ./$ckptfile",
		{expect_result => SIGNAL(12)});

# Check the stderr, which contains the checkpoint debug output.
$last = pop @{$ret->{'stderr'}};
chomp $last;
if ($last !~ m/Ckpt exit/) {
	print "ERROR: The last line of the checkpointing job's stderr should " .
		"have been 'Ckpt exit', but it wasn't! Fail.\n";
	print "FAILURE\n";
	exit 1;
}

# Check the stdout, which contains "About to checkpoint...."
$last = pop @{$ret->{'stdout'}};
chomp $last;
if ($last !~ m/About to checkpoint\.\.\.\./) {
	print "ERROR: The last line of the checkpointing job's stdout should " .
		"have been 'About to checkpoint....', but it wasn't! Fail.\n";
	print "FAILURE\n";
	exit 1;
}

# The resuming program better exit with 0!
print "Resuming standalone checkpointing test. Will resume from $ckptfile.\n";
$ret = runcmd("$pers_fix ./$testname -_condor_aggravate_bugs -_condor_D_CKPT " .
			"-_condor_D_FULLDEBUG -_condor_D_ALWAYS " .
			"-_condor_restart ./$ckptfile");

# Check the stderr, which contains the resumed job debug output.
$last = pop @{$ret->{'stderr'}};
chomp $last;
if ($last !~ m/About to return to user code/) {
	print "ERROR: The last line of the resuming job's stderr should have " .
		"been 'About to return to user code', but it wasn't! Fail.\n";
	print "FAILURE\n";
	exit 1;
}

# Process the stdout which contains the output of the resumed job.
$last = pop @{$ret->{'stdout'}};
chomp $last;
if ($last !~ m/SUCCESS/) {
	print "ERROR: The last line of the resuming job should have " .
		"been 'SUCCESS', but it wasn't!. Fail.\n";
	print "FAILURE\n";
	exit 1;
}

print "SUCCESS\n";

exit 0;



