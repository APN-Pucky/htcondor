#!/usr/bin/env perl
use CondorTest;

$cmd = 'job_core_killsignal_van.cmd';
$testname = 'Condor allows change of kill signal - vanilla U';

my $killedchosen = 0;

$abnormal = sub {
	my %info = @_;

	#print "keys:".join(" ",keys %info)."\n";
	my $gotsig   = $info{"signal"};
	my $outfile = $info{"log"};
	my $killsig = $info{"kill_sig"};
	die "Aborted expected! Want to see $killsig in this file $outfile\n";
};

$aborted = sub {
	my %info = @_;
	my $done;
	print "Abort event expected, good\n";

	#print "keys:".join(" ",keys %info)."\n";
	my $gotsig   = $info{"signal"};
	my $outfile = $info{"output"};
	my $killsig = $info{"kill_sig"};
	print "Want to see $killsig in this file $outfile\n";
	if(! -s $outfile)
	{
		die "Output file either missing or empty...\n";
	}
	open( FILE, "<$outfile" ) || die "error opening $file: $!\n";
	while(<FILE>)
	{
		chomp;
		print "Found $_\n";
		if($_ eq $killsig)
		{
			print "Good\n";
			return;
		}
		else
		{
			die "Needed to see $killsig as killing signal\n";
		}
	}
};

$executed = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};

	system("condor_rm $cluster");
};

CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort         ( $testname, $aborted );

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

