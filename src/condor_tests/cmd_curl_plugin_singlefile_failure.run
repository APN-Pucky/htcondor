#!/usr/bin/env python

import os
import sys

from pytest.CondorJob import CondorJob
from pytest.CondorTest import CondorTest
from pytest.Globals import *
from pytest.HTTPServer import HTTPServer
from pytest.PersonalCondor import PersonalCondor
from pytest.Utils import Utils

def SuccessCallback():
    Utils.TLog("Job ran successfully but was supposed to go on hold. Test failed.")
    sys.exit(TEST_FAILURE)

def FailureCallback():
    Utils.TLog("Job went on hold as expected. Test passed.")
    sys.exit(SUCCESS)

def HttpServerErrorUrlHandler(request):
    request.protocol_version = "HTTP/1.1"
    request.send_response(500)


def main():

    # Create a new test environment
    test = CondorTest("cmd_curl_plugin_singlefile_failure")

    # Start a HTTP server, and register the /success URL to return a 
    httpd = HTTPServer()
    httpd.Start()
    httpd.RegisterUrlHandler("/servererror", HttpServerErrorUrlHandler)
    servererror_url = "http://127.0.0.1:" + str(httpd._port) + "/servererror"

    # Stand up a PersonalCondor
    personal_handle = test.StartPersonalCondor()
    if personal_handle is -1:
        Utils.TLog("Failed to start the PersonalCondor environment. Exiting.")
        sys.exit(1)
    else:
        Utils.TLog("PersonalCondor environment started successfully with handle " + str(personal_handle))

    # Setup a new test job
    job_args = {
        "executable":               "x_echostring.pl",
        "arguments":                "This test is designed to fail, should not be seeing this",
        "output":                   "cmd_curl_plugin_singlefile_failure.out",
        "transfer_input_files":     servererror_url,
        "should_transfer_files":    "YES"
    }
    test_job = CondorJob(job_args)

    # Register handlers
    test_job.RegisterJobTerminated(SuccessCallback)
    test_job.RegisterJobHeld(FailureCallback)

    # Submit the test job
    test_job.Submit()
    result = test_job.WaitUntilJobHeld()
    Utils.TLog("Test returned result: " + str(result))

    # All done, sit and wait. Success/failure callbacks will exit the test.


if __name__ == "__main__":
    main()
