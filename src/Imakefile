CFLAGS = $(STD_C_FLAGS)


#if HAS_FORTRAN
#	if IS_V5 || IS_V6
TEST_SUITE_F = test_suite_F.V5
#	else
TEST_SUITE_F = test_suite_F
#	endif
#endif

#if !HAS_X
#define kbdd
#endif

#if !DOES_CHECKPOINTING
#	define standalone
#endif

#if WANT_PVM && HAS_PVM
PVM_LIBRARY = pvmd
#endif

#if USE_CONFIG_SERVER
CONFIG_SERVER = config_server
#endif

#if IS_V6
#	define Programs \
		accountant.V6 ckpt_server collector.V6 $(CONFIG_SERVER) \
		master.V6 negotiator.V6 off on schedd.V6 prio q.V6 rm.V6 \
		scripts shadow.V6 startd.V6 starter.V5 submit.V6 \
		tools kbdd

#define Libraries \
		util_lib c++_util ckpt io classad daemon_core daemon_core.V6 \
		syscall_lib
		
#elif IS_V5
#	define Programs \
		scripts tools shadow.V5 starter.V5 startd \
		schedd kbdd  negotiator collector globalq master.dhruba prio q rm \
		submit.v3  on off test_suite_C.V5 $(TEST_SUITE_F)
#		define Libraries	util_lib c++_util ckpt syscall_lib
#else
#	define Programs \
		scripts standalone tools shadow starter startd \
		schedd kbdd  negotiator collector globalq master prio q rm \
		submit.v2 submit.v3  on off \
		test_suite_C $(TEST_SUITE_F)
#		define Libraries	util_lib c++_util $(SYSCALL_LIB) $(PVM_LIBRARY)
#endif


#define Directories release_dir release_dir/bin release_dir/lib
all: h makefiles Directories Libraries Programs
release:: all


#if IS_V5 || IS_V6

#if IS_ALPHA_OSF1
BINARY = ../ALPHA_OSF1_BIN.tar
#elif IS_SPARC_SUNOS41
BINARY = ../SPARC_SUNOS41_BIN.tar
#elif IS_R6000_AIX32
BINARY = ../R6000_AIX32_BIN.tar
#endif

obj_distrib: release
	cd condor_test_suite_C.V5; make obj_distrib
#if HAS_FORTRAN
	cd condor_test_suite_F.V5; make obj_distrib
#endif
	cd release_dir; tar cvf $(BINARY) .

#endif	/* IS_V5 */

simple_dir_target(release_dir)
simple_dir_target(release_dir/bin)
simple_dir_target(release_dir/lib)
object_target(util_lib)
object_target(c++_util)

#if WANT_PVM && HAS_PVM
	object_target($(PVM_LIBRARY))
#endif


object_target(tools)


#if IS_V6
	object_target(accountant.V6)
	object_target(ckpt_server)
#if USE_CONFIG_SERVER
	object_target(config_server)
#endif
	object_target(shadow.V6)
	object_target(starter.V5)
	object_target(startd.V6)
	object_target(schedd.V6)
#if HAS_X
	object_target(kbdd)
#endif
	object_target(negotiator.V6)
	object_target(collector.V6)
	object_target(master.V6)
	object_target(q.V6)
	object_target(rm.V6)
	object_target(submit.V6)
	object_target(test_suite_C.V5)
#	if HAS_FORTRAN
		object_target($(TEST_SUITE_F))
#	endif
	object_target(ckpt)
	object_target(syscall_lib)
	object_target(io)
	object_target(classad)
	object_target(daemon_core)
	object_target(daemon_core.V6)
makefiles:: h/Makefile
h/Makefile:
	cd h; imake IMAKE_FLAGS
h: h/Makefile
	cd h; make
#elif IS_V5
	object_target(shadow.V5)
	object_target(starter.V5)
	object_target(test_suite_C.V5)
#	if HAS_FORTRAN
		object_target($(TEST_SUITE_F))
#	endif
	object_target(ckpt)
	object_target(syscall_lib)
makefiles:: h/Makefile
h/Makefile:
	cd h; imake IMAKE_FLAGS
h: h/Makefile
	cd h; make
#else
	object_target(shadow)
	object_target(starter)
	object_target(submit.v2)
	object_target($(SYSCALL_LIB))
	object_target(test_suite_C)
#	if HAS_FORTRAN
		object_target($(TEST_SUITE_F))
#	endif
#	if DOES_CHECKPOINTING
		object_target(standalone)
#	endif
#endif

#if !IS_V6
object_target(submit.v3)
object_target(startd)
object_target(schedd)
#if HAS_X
object_target(kbdd)
#endif
object_target(negotiator)
object_target(collector)
object_target(master.dhruba)
object_target(q)
object_target(rm)
object_target(globalq)
#endif

object_target(prio)
object_target(on)
object_target(off)
object_target(scripts)




check_platform_target

clean::
	cd h; make clean
	rm -rf Makefile */Makefile */Makefile.*  release_dir

platform_canned_makefile(R6000_AIX32)
platform_canned_makefile(ALPHA_OSF1)
platform_canned_makefile(SPARC_SUNOS41)
