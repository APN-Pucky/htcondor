#define SubmitSbinFiles sbin/condor_master sbin/condor_schedd \
       sbin/condor_shadow sbin/condor_preen sbin/condor_checkpoint \
       sbin/condor_off sbin/condor_on sbin/condor_reconfig \
       sbin/condor_reconfig_schedd sbin/condor_reschedule \
       sbin/condor_restart sbin/condor_vacate sbin/condor_master_off

#define SubmitOnlyFiles bin lib etc SubmitSbinFiles

#define LinkOnlyFiles lib bin/condor_compile

#define PvmFiles sbin/condor_starter.pvm sbin/condor_shadow.pvm \
	sbin/condor_pvmd sbin/condor_pvmgs 

#define DagManFiles bin/condor_dagman

#define CkptServerFiles sbin/condor_ckpt_server sbin/condor_cleanckpts \
	etc/examples/condor_config.local.ckpt.server

#define SMPFiles sbin/condor_startd sbin/condor_starter \
	sbin/condor_preen bin/condor_status

#define CondorViewServerFiles sbin/condor_collector

#define CondorViewClientFiles sbin/condor_stats

#if HAS_FORTRAN
  TEST_SUITE_F = test_suite_F.V5
#endif

#if !HAS_X
#   define kbdd
#endif

#if !DOES_CHECKPOINTING
#   define standalone
#endif

#if WANT_PVM && HAS_PVM
   #define PvmProgs starter.jim shadow.jim 
#else
   #define PvmProgs
#endif

#define Programs \
		accountant.V6 ckpt_server \
		master.V6 negotiator.V6 schedd.V6 prio q.V6 rm.V6 \
		scripts shadow.V6 startd.V6 starter.V5 submit.V6 status.V6 \
		tools kbdd collector.V6 PvmProgs dagman

#define Libraries \
		util_lib c++_util procapi io classad daemon_core.V6 \
		ckpt syscall_lib 

#define Directories \
	release_dir release_dir/bin release_dir/lib release_dir/sbin \
	strip_dir strip_dir/bin strip_dir/sbin strip_dir/lib \
	strip_dir/etc strip_dir/etc/examples \
	static_dir static_dir/bin static_dir/sbin static_dir/lib \
	static_dir/etc static_dir/etc/examples \
	strip_contrib strip_contrib/bin strip_contrib/lib \
	strip_contrib/sbin strip_contrib/etc \
	strip_contrib/etc/examples \
	static_contrib static_contrib/bin static_contrib/lib \
	static_contrib/sbin static_contrib/etc \
	static_contrib/etc/examples

all: h h_all condor_includes makefiles Directories Libraries Programs examples
release:: all
stripped:: all
static:: all
libs:: h h_all condor_includes makefiles Directories Libraries

PUBLIC_TARGET_PATH = /p/condor/workspaces/release
#if defined( PublicTargetName )
  PUBLIC_TARGET_NAME = PublicTargetName
  PUBLIC_D_TARGET = $(PUBLIC_TARGET_PATH)/V6_releases/$(PUBLIC_TARGET_NAME)
  PUBLIC_S_TARGET = $(PUBLIC_TARGET_PATH)/V6_static_releases/$(PUBLIC_TARGET_NAME)
#else 
  PUBLIC_D_TARGET = $(PUBLIC_TARGET_PATH)/V6_release
  PUBLIC_S_TARGET = $(PUBLIC_TARGET_PATH)/V6_static_release
#endif

public:: strip.tar 
	rm -f $(PUBLIC_D_TARGET)/release.tar 
	cp strip_dir/release.tar $(PUBLIC_D_TARGET)

strip.tar: stripped
	cd strip_dir; rm -f release.tar; tar -cvf release.tar etc bin lib sbin

#if HAS_STATIC
public:: static.tar
	rm -f $(PUBLIC_S_TARGET)/release.tar 
	cp static_dir/release.tar $(PUBLIC_S_TARGET)

static.tar: static
	cd static_dir; rm -f release.tar; tar -cvf release.tar etc bin lib sbin
#endif 

release_tarball( submit.tar, SubmitOnlyFiles )
release_tarball( link.tar, LinkOnlyFiles )
release_tarball( smp.tar, SMPFiles )
release_tarball( condor_view_server.tar, CondorViewServerFiles )

contrib_tarball( ckpt_server.tar, CkptServerFiles )
contrib_tarball( dagman.tar, DagManFiles )
contrib_tarball( condor_view_client.tar, CondorViewClientFiles )

#if WANT_PVM && HAS_PVM
#define PvmTar pvm.tar
contrib_tarball( pvm.tar, PvmFiles )
#else
#define PvmTar 
#endif 

all_tarballs: ckpt_server.tar dagman.tar smp.tar condor_view.tar \
	PvmTar submit.tar link.tar

public:: all_tarballs

simple_dir_target(release_dir)
simple_dir_target(release_dir/bin)
simple_dir_target(release_dir/lib)
simple_dir_target(release_dir/sbin)

simple_dir_target(strip_dir)
simple_dir_target(strip_dir/bin)
simple_dir_target(strip_dir/lib)
simple_dir_target(strip_dir/sbin)
simple_dir_target(strip_dir/etc)
simple_dir_target(strip_dir/etc/examples)

simple_dir_target(static_dir)
simple_dir_target(static_dir/bin)
simple_dir_target(static_dir/lib)
simple_dir_target(static_dir/sbin)
simple_dir_target(static_dir/etc)
simple_dir_target(static_dir/etc/examples)

simple_dir_target(strip_contrib)
simple_dir_target(strip_contrib/bin)
simple_dir_target(strip_contrib/lib)
simple_dir_target(strip_contrib/sbin)
simple_dir_target(strip_contrib/etc)
simple_dir_target(strip_contrib/etc/examples)

simple_dir_target(static_contrib)
simple_dir_target(static_contrib/bin)
simple_dir_target(static_contrib/lib)
simple_dir_target(static_contrib/sbin)
simple_dir_target(static_contrib/etc)
simple_dir_target(static_contrib/etc/examples)

object_target(util_lib)
object_target(c++_util)
object_target(procapi)
object_target(tools)
object_target(examples)
object_target(accountant.V6)
object_target(ckpt_server)
object_target(shadow.V6)
object_target(starter.V5)
object_target(startd.V6)
object_target(schedd.V6)
object_target(status.V6)
object_target(dagman)
#if HAS_X
   object_target(kbdd)
#endif
object_target(negotiator.V6)
object_target(collector.V6)
object_target(master.V6)
object_target(q.V6)
object_target(rm.V6)
object_target(submit.V6)
object_target(test_suite_C.V5)
#if HAS_FORTRAN
   object_target($(TEST_SUITE_F))
#endif
object_target(ckpt)
object_target(syscall_lib)
object_target(io)
object_target(classad)
object_target(daemon_core.V6)
#if WANT_PVM && HAS_PVM
   object_target(starter.jim)
   object_target(shadow.jim)
#endif
object_target(prio)
object_target(scripts)

object_dir_target(h)
object_dir_target(condor_includes)

h_all: h/Makefile h/syscall_numbers.h h/syscall_numbers.o

makefiles:: h/Makefile

h/Makefile: h h/Imakefile
	cd h; imake IMAKE_FLAGS

h/syscall_numbers.h: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.h

h/syscall_numbers.o: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.o

check_platform_target

clean:: 
	cd h; make clean
	make clean-up

really-clean:: clean-up

clean-up:
	rm -rf make.out Makefile */Makefile* release_dir \
		strip_dir strip_contrib static_dir static_contrib

reallyclean: really-clean
