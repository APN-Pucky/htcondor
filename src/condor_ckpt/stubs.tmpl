/***********************************************************
**
** Stubs for all those system calls which don't effect the
** state of the open file table.
**
** Caution - the syscall_stubs.c file is generated automatically
**		   - do not edit
**
***********************************************************/

#if defined(OSF1)
#	define __STDC__
#endif

#include "condor_syscalls.h"
#include "file_table_interf.h"
#include <stdio.h>
#include "unistd.h"
#include "fcntl.h"
#include <sys/types.h>
#include <sys/stat.h>

#if defined(ULTRIX42) || defined(ULTRIX43)
#	include <sys/param.h>
#	include <sys/mount.h>
#else
#	include <sys/mount.h>
#endif

#if defined(ULTRIX42) || defined(ULTRIX43)
	typedef int ssize_t;
#endif

#if defined(SUNOS41) || defined(HPUX9)
#	include <sys/vfs.h>		 /* for struct statfs */
#endif


%%
ssize_t read( map(int fd), void *buf, size_t len );
ssize_t write( map(int fd), const void *buf, size_t len );
off_t lseek( map(int fd), off_t offset, int whence );
int fstat( map(int fd), struct stat *buf );
int fchmod( map(int fd), mode_t mode );
int fchown( map(int fd), uid_t owner, gid_t group );
int flock( map(int fd), int op );
int fstatfs( map(int fd), struct statfs *buf );
int fsync( map(int fd) );
int ftruncate( map(int fd), off_t length );
int ioctl( map(int fd), int request, char *argp );
int readv( map(int fd), char *buf, int nbytes );
int writev( map(int fd), char *buf, int nbytes );
int fcntl( map(int fd), int req, int arg );
caddr_t mmap( caddr_t a, size_t l, int p, int f, map(int fd), off_t o );
int getdirentries( map(int fd), char *buf, int nbytes, long *basep );

