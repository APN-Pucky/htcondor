# Makefile generated by imake - do not edit!
# $XConsortium: imake.c /main/90 1996/11/13 14:43:23 lehors $

#
#  Copyright 1986, 1987, 1988, 1989, 1990, 1991 by the Condor Design Team
#
#  Permission to use, copy, modify, and distribute this software and its
#  documentation for any purpose and without fee is hereby granted,
#  provided that the above copyright notice appear in all copies and that
#  both that copyright notice and this permission notice appear in
#  supporting documentation, and that the names of the University of
#  Wisconsin and the Condor Design Team not be used in advertising or
#  publicity pertaining to distribution of the software without specific,
#  written prior permission.  The University of Wisconsin and the Condor
#  Design Team make no representations about the suitability of this
#  software for any purpose.  It is provided "as is" without express
#  or implied warranty.
#
#  THE UNIVERSITY OF WISCONSIN AND THE CONDOR DESIGN TEAM DISCLAIM ALL
#  WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE UNIVERSITY OF
#  WISCONSIN OR THE CONDOR DESIGN TEAM BE LIABLE FOR ANY SPECIAL, INDIRECT
#  OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
#  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
#  OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
#  OR PERFORMANCE OF THIS SOFTWARE.
#

#
#  This Makefile is generated specifically for X86_SOLARIS  machines.
#

TILDE = Tilde
LIBC = /lib/libc.a
SIMPLE_LIBC = /lib/libc.a
CRT0 =       /s/gcc-2.7.2.1-2/lib/gcc-lib/i386-unknown-solaris2.5.1/2.7.2.1/crt1.o
SYSCALLS_EXP =

TOP = $(TILDE)/CONDOR
INSTALL_DIR = /usr/uw/condor
TMP_DIR = /tmp

PLATFORM_DIR =		$(TOP)/ X86_SOLARIS

RELEASE_DIR =		../release_dir

LIB_DIR =			$(RELEASE_DIR)/lib
CONFIG_DIR = 		$(TOP)/config
SRC_TREE =			$(TOP)/src
DOC_TREE =			$(TOP)/doc
INCLUDE_DIR =		../h
NEW_INCLUDE_DIR =	../condor_includes
C_PLUS_INCLUDE =	../condor_c++_util

X11_INCLUDE = /s/X11R6-2/include

PS_DIR =			$(DOC_TREE)/POSTSCRIPT
CAT_DIR = 			$(DOC_TREE)/CAT
PLATFORM =			X86_SOLARIS

LIBX =   -L/s/X11R6-2/lib      -lX11   -R/s/X11R6-2/lib
LIBXEXT =   -L/s/X11R6-2/lib      -lXext   -R/s/X11R6-2/lib
CC = gcc
CPlusPlus = g++
STATIC	= -static
MKDEPEND = ../../GENERIC/mdepend.sh
STAR	= *

SYSCALL_LIB = syscall_lib_bsd

LIBDBM =

OS_FLAG = Solaris
ARCH_FLAG = X86

DEBUG_FLAG = -g

STD_C_PLUS_FLAGS =  	   -I$(INCLUDE_DIR) -I$(NEW_INCLUDE_DIR) -I$(C_PLUS_INCLUDE) -I$(X11_INCLUDE)   -D$(ARCH_FLAG) -D$(OS_FLAG) -DSolaris251 -DNFSFIX -DNDBM  -DVOID_SIGNAL_RETURN      $(DEBUG_FLAG)

STD_C_FLAGS =  $(STD_C_PLUS_FLAGS)
STATIC = -static

.SUFFIXES: .C

.C.o:
	$(CPlusPlus) $(C_PLUS_FLAGS) -c $<

DEMANGLE = 2>&1 | c++filt

#
#  Set the following if you want a PVM ready checkpointing library
#  compiled.  This will require that the PVM library be linked into
#  the application.
#

#  PVM_CHECKPOINT = -DPVM_CHECKPOINTING

SAVE_SIGSTATE = -DSAVE_SIGSTATE
SAVE_SIGSTATE_OBJ = signals_support.o
SAVE_SIGSTATE_SRC = signals_support.c

SIG_EXTRACT = SIGACTION.o _SIGACTION.o

EXTRACT = MMAP.o SYSCALL.o $(SIG_EXTRACT)

C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(SAVE_SIGSTATE) $(STATIC) $(PVM_CHECKPOINT)

CFLAGS = $(STD_C_FLAGS)

SRC_DIR = $(SRC_TREE)/condor_ckpt

OS = Solaris

FLOCK_OBJ = flock.o

UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o $(FLOCK_OBJ) $(GETWD_OBJ) uids.o

URL_OBJ = url_condor.o include_urls.o cbstp_url.o file_url.o http_url.o 	cfilter_url.o filter_url.o mailto_url.o ftp_url.o

SRC =	ToUpper.c image.C machdep.$(OS).C file_state.C tmp_stack.C 	syscall_mode.c local_startup.c fake_remote_syscall.c fake_hooks.c 	$(SAVE_SIGSTATE_SRC)

OBJ =	image.o machdep.$(OS).o file_state.o tmp_stack.o syscall_mode.o 	local_startup.o fake_remote_syscall.o fake_hooks.o 	$(SAVE_SIGSTATE_OBJ) $(EXTRACT) 	$(ASSEMBLER_OBJ) $(UTIL_OBJ)

all:  ToUpper machdep_test libckpt.a c_plus_alloc.o condor_rt0.o $(RELEASE_OBJ)

libckpt.a:	 $(OBJ)
	rm -f  libckpt.a
	ar vrs    libckpt.a      $(OBJ)
clean::
	rm -f  libckpt.a   $(OBJ)

$(RELEASE_DIR)/lib/libckpt.a:  libckpt.a
	cp -p    libckpt.a      $(RELEASE_DIR)/lib/libckpt.a

release::  $(RELEASE_DIR)/lib/libckpt.a

$(RELEASE_DIR)/lib/c_plus_alloc.o:  c_plus_alloc.o
	/bin/rm -f  $(RELEASE_DIR)/lib/c_plus_alloc.o
	cp  c_plus_alloc.o   $(RELEASE_DIR)/lib
	chmod  0644    $(RELEASE_DIR)/lib/c_plus_alloc.o
release::  $(RELEASE_DIR)/lib/c_plus_alloc.o

SIGNAL.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      signal.o 	  ; mv  signal.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/signal.o   SIGNAL.o   signal   SIGNAL
	rm -f $(TMP_DIR)/signal.o

i386_data.o : $(SIMPLE_LIBC)
	ar x $(SIMPLE_LIBC) i386_data.o

SIGVEC.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigvec.o 	  ; mv  sigvec.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigvec.o   SIGVEC.o   sigvec   SIGVEC
	rm -f $(TMP_DIR)/sigvec.o

_SIGVEC.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      _sigvec.o 	  ; mv  _sigvec.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/_sigvec.o   _SIGVEC.o   _sigvec   _SIGVEC
	rm -f $(TMP_DIR)/_sigvec.o

SIGACTION.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigaction.o 	  ; mv  sigaction.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigaction.o   SIGACTION.o   sigaction   SIGACTION
	rm -f $(TMP_DIR)/sigaction.o

MMAP.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      mmap.o 	  ; mv  mmap.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/mmap.o   MMAP.o   mmap   MMAP
	rm -f $(TMP_DIR)/mmap.o

SYSCALL.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      syscall.o 	  ; mv  syscall.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/syscall.o   SYSCALL.o   syscall   SYSCALL
	rm -f $(TMP_DIR)/syscall.o

_SIGACTION.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      _sigaction.o 	  ; mv  _sigaction.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/_sigaction.o   _SIGACTION.o   sigaction   SIGACTION
	rm -f $(TMP_DIR)/_sigaction.o

SIGPROCMASK.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigprocmask.o 	  ; mv  sigprocmask.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigprocmask.o   SIGPROCMASK.o   sigprocmask   SIGPROCMASK
	rm -f $(TMP_DIR)/sigprocmask.o

SIGSUSPEND.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigsuspend.o 	  ; mv  sigsuspend.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigsuspend.o   SIGSUSPEND.o   sigsuspend   SIGSUSPEND
	rm -f $(TMP_DIR)/sigsuspend.o

depend: ALWAYS
	$(MKDEPEND) $(CFLAGS)  $(SRC)

machdep_test :  machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) dprintf.o $(FLOCK_OBJ) MMAP.o SYSCALL.o uids.o
	$(CC) $(CFLAGS) -o  machdep_test   machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) dprintf.o $(FLOCK_OBJ) MMAP.o SYSCALL.o uids.o      $(LDFLAGS)
clean::
	rm -f  machdep_test   machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) dprintf.o $(FLOCK_OBJ) MMAP.o SYSCALL.o uids.o

ToUpper :  ToUpper.o   $(NULL)
	$(CC) $(CFLAGS) -o  ToUpper   ToUpper.o   $(NULL)  $(LDFLAGS)
clean::
	rm -f  ToUpper   ToUpper.o

$(RELEASE_DIR)/bin/ToUpper:  ToUpper
	/bin/rm -f  $(RELEASE_DIR)/bin/ToUpper
	cp  ToUpper   $(RELEASE_DIR)/bin
	chmod  0755    $(RELEASE_DIR)/bin/ToUpper
release::  $(RELEASE_DIR)/bin/ToUpper

#
#  Create a replacement for crt0.o to be linked with condor programs.
#  N.B. This is done differently than other objects in that we start out
#  with a copy of crt0.o, and change the name of "main" to "MAIN".
#

condor_rt0.o:       /s/gcc-2.7.2.1-2/lib/gcc-lib/i386-unknown-solaris2.5.1/2.7.2.1/crt1.o      ToUpper
	ToUpper       /s/gcc-2.7.2.1-2/lib/gcc-lib/i386-unknown-solaris2.5.1/2.7.2.1/crt1.o      condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o

IMPORT_LINKS = ../../config/import_links

$(UTIL_OBJ):
	$(IMPORT_LINKS)  ../condor_util_lib   $(UTIL_OBJ)
clean::
	rm -f  $(UTIL_OBJ)

clean::
	rm -f c_plus_alloc.o syscall_mode.o

ALWAYS:

