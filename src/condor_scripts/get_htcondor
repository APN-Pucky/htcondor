#!/bin/sh
set -e
# HTCondor for Linux Quick Install script
#
# See https://xxxx for the installation steps.
#
# This script is meant for quick & easy install via:
#   $ curl -fsSL https://xxx -o get-htcondor.sh
#   $ sh get-htcondor.sh
#
# For test builds (ie. release candidates):
#
# NOTE: Make sure to verify the contents of the script
#       you downloaded matches the contents of install.sh
#       located at https://github.com/....
#       before executing.
#


usage() {
	cat <<-EOF
	Options:
	--dry-run	: Do not install, just print commands [default]
	--no-dry-run	: Issue all the commands neeed to install HTCondor
	--channel NAME	: Specify version channel to install; NAME can be
	     current: Most recent release with new features [default]
	     stable : Most recent release with only bug-fixes
	--dist		: Display detected operating system and exit
	-h, --help	: Display this message and exit
	EOF
	exit 0
}

command_exists() {
	command -v "$@" > /dev/null 2>&1
}

install_config_file() {
	# Install a config file by either copying it from examples dir, or if
	# that does not exist, curl it.  Hopefully we do not need to curl it.
	if [ -r "/usr/share/condor/get_configs/$@" ]; then
		cp "/usr/share/condor/get_configs/$@" /etc/condor/config.d/.
		chmod 644 "/etc/condor/config.d/$@"
	fi
}

is_download() {
	if [ -z "$DOWNLOAD" ]; then
		return 1
	else
		return 0
	fi
}

is_dry_run() {
	if [ -z "$DRY_RUN" ]; then
		return 1
	else
		return 0
	fi
}

is_display_dist() {
	if [ -z "$DIST" ]; then
		return 1
	else
		return 0
	fi
}

is_darwin() {
	case "$(uname -s)" in
	*darwin* ) true ;;
	*Darwin* ) true ;;
	* ) false;;
	esac
}


# Check if this is a forked Linux distro
check_forked() {

	# Check for lsb_release command existence, it usually exists in forked distros
	if command_exists lsb_release; then
		# Check if the `-u` option is supported
		set +e
		lsb_release -a -u > /dev/null 2>&1
		lsb_release_exit_code=$?
		set -e

		# Check if the command has exited successfully, it means we're in a forked distro
		if [ "$lsb_release_exit_code" = "0" ]; then
			# Print info about current distro
			cat <<-EOF
			You're using '$lsb_dist' version '$dist_version'.
			EOF

			# Get the upstream release info
			lsb_dist=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')
			dist_version=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')

			# Print info about upstream distro
			cat <<-EOF
			Upstream release is '$lsb_dist' version '$dist_version'.
			EOF
			if is_display_dist; then
				exit 0
			fi
		else
			if [ -r /etc/debian_version ] && [ "$lsb_dist" != "ubuntu" ] && [ "$lsb_dist" != "raspbian" ]; then
				if [ "$lsb_dist" = "osmc" ]; then
					# OSMC runs Raspbian
					lsb_dist=raspbian
				else
					# We're Debian and don't even know it!
					lsb_dist=debian
				fi
				dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
				case "$dist_version" in
					10)
						dist_version_number=10
						dist_version="buster"
					;;
					9)
						dist_version_number=9
						dist_version="stretch"
					;;
					8|'Kali Linux 2')
						dist_version_number=8
						dist_version="jessie"
					;;
				esac
			fi
		fi
	fi
	if is_display_dist; then
		cat <<-EOF
		You're using '$lsb_dist' version '$dist_version'.
		EOF
		exit 0
	fi
}


get_distribution() {
	lsb_dist=""
	# Every system that we officially support has /etc/os-release
	if [ -r /etc/os-release ]; then
		lsb_dist="$(. /etc/os-release && echo "$ID")"
	fi
	lsb_dist="$(echo "$lsb_dist" | tr '[:upper:]' '[:lower:]')"

	# An empty string for lsb_dist should be alright since the
	# case statements don't act unless you provide an actual value

	case "$lsb_dist" in

		ubuntu)
			if command_exists lsb_release; then
				dist_version="$(lsb_release --codename | cut -f2)"
			fi
			if [ -z "$dist_version" ] && [ -r /etc/lsb-release ]; then
				dist_version="$(. /etc/lsb-release && echo "$DISTRIB_CODENAME")"
			fi
		;;

		debian|raspbian)
			dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
			case "$dist_version" in
				10)
					dist_version="buster"
				;;
				9)
					dist_version="stretch"
				;;
				8)
					dist_version="jessie"
				;;
			esac
		;;

		centos|rhel)
			if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
				dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
			fi
			dist_version="$(echo "$dist_version" | cut -d. -f1)"
		;;

		*)
			if command_exists lsb_release; then
				dist_version="$(lsb_release --release | cut -f2)"
			fi
			if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
				dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
			fi
		;;

	esac

	# Check if this is a forked Linux distro
	check_forked
}

do_configure_firewall() {
	if command_exists firewall-cmd; then
		echo -e "\n# Open port 9618 for use by HTCondor"
		(
			if ! is_dry_run; then
				set -x
			fi
			$sh_c "firewall-cmd --zone=public --add-port=9618/tcp --permanent"
			$sh_c "firewall-cmd --reload"
		)
	fi
}

do_start_service() {
	# Start HTCondor via systemd if detected, else via just condor_master
	if [ "$(ps --pid 1 -o comm -h)" != 'systemd' ] && command_exists systemctl; then
		echo -e "\n# Start the HTCondor service in the background (without systemd)"
		(
			if ! is_dry_run; then
				set -x
			fi
			$sh_c "mkdir --mode=0755 /var/lock/condor /var/run/condor; chown condor:condor /var/lock/condor /var/run/condor"
			$sh_c "condor_master"
		)
	else
		echo -e "\n# Start the HTCondor service via systemd"
		(
			if ! is_dry_run; then
				set -x
			fi
			$sh_c "systemctl enable condor"
			$sh_c "systemctl start condor"
		)
	fi
}

do_install() {
	# Figure out the distribution and version we are running on.
    # This will set $lsb_dist and $dist_version.
	get_distribution

	if [ -f "/etc/condor/condor_config" ]; then
		cat >&2 <<-'EOF'
			Error: HTCondor appears to have been installed previously on this system. 

			You may update the existing install, or remove and then re-install.
		EOF
		case "$lsb_dist" in
		fedora)
			cat >&2 <<-'EOF'
			To update enter as root: SOME DNF MAGIC
			To remove enter as root: SOME DNF MAGIC
			EOF
			;;
		ubuntu|debian)
			cat >&2 <<-'EOF'
			To update enter as root: SOME APT-GET MAGIC
			To remove enter as root: SOME APT-GET MAGIC
			EOF
			;;
		centos|rhel|amzn)
			cat >&2 <<-'EOF'
			To update enter as root: yum update condor
			To remove enter as root: yum remove condor
			EOF
			;;
		esac
		exit 1
	fi

	user="$(id -un 2>/dev/null || true)"

	if is_dry_run; then
		sh_c="echo"
	elif [ "$user" != 'root' ]; then
		if command_exists sudo; then
			sh_c='sudo -E sh -c'
		elif command_exists su; then
			sh_c='su -c'
		else
			cat >&2 <<-'EOF'
			Error: this installer needs the ability to run commands as root.
			We are unable to find either "sudo" or "su" available to make this happen.
			EOF
			exit 1
		fi
	fi



	echo -e "\n# Installing HTCondor for ${lsb_dist^} $dist_version"

	# Run install binaries for each distro accordingly
	case "$lsb_dist" in
		ubuntu|debian)
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "apt-get install -y -qq --no-install-recommends XXX >/dev/null"
			)
			;;
		centos|rhel|amzn)
			repo_dist="$lsb_dist"
			if [ "$lsb_dist" = "centos" ]; then
				repo_dist="rhel"
			fi
			yum_repo="$DOWNLOAD_URL/yum/repo.d/htcondor-$CHANNEL-$repo_dist$dist_version.repo"
			if ! curl -Ifs "$yum_repo" > /dev/null; then
				echo "Error: Unable to access repository file $yum_repo, is it valid?"
				exit 1
			fi
			if [ "$lsb_dist" = "fedora" ]; then
				pkg_manager="dnf"
				config_manager="dnf config-manager"
				pre_reqs="dnf-plugins-core"
				pkg_suffix="fc$dist_version"
			else
				pkg_manager="yum"
				config_manager="yum-config-manager"
				pre_reqs="yum-utils epel-release"
				pkg_suffix="el"
			fi
			echo -e "\n# Installing prerequisite tools and repositories"
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "$pkg_manager install -y $pre_reqs"
				$sh_c "rpm --import https://research.cs.wisc.edu/htcondor/yum/RPM-GPG-KEY-HTCondor"
				$sh_c "$config_manager --add-repo $yum_repo"
			)
			echo -e "\n# Installing HTCondor binaries and dependencies"
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "$pkg_manager --setopt=tsflags='' install -y minicondor"
			)
			;;
		*)
			if [ -z "$lsb_dist" ]; then
				if is_darwin; then
					echo
					echo "Error: Unsupported operating system 'macOS'"
					echo
					exit 1
				fi
			fi
			echo
			echo "Error: Unsupported distribution '$lsb_dist'"
			echo
			exit 1
			;;
	esac

	# Now that the binaries are installed, drop config files into config.d

	# Open port 9618 on system firewall
	do_configure_firewall

	# Finally, start the HTCondor service
	do_start_service

	echo
}

do_download() {
	get_distribution

	# FIXME: The 'stable' symlink doesn't exist here yet.
	TARBALL_BASE_URL=${DOWNLOAD_URL}/tarball/${CHANNEL}

	# FIXME: How do we figure this out?
	CONDOR_VERSION=8.9.9

	TARBALL_DIR_URL=${TARBALL_BASE_URL}/${CONDOR_VERSION}/release

	OS_VERSION=$dist_version
	case "$lsb_dist" in
		fedora)
			# FIXME: we don't have a Fedora tarball.
			;;
		ubuntu)
			OS_NAME=Ubuntu
			dist_version_number="$(. /etc/os-release && echo "$VERSION_ID")"
			dist_version_number=`echo $dist_version_number | sed -e s'/\.[0-9]*//'`
			OS_VERSION=$dist_version_number
			;;
		debian)
			OS_NAME=Debian
			OS_VERSION=$dist_version_number
			;;
		centos|rhel|amzn)
			OS_NAME=CentOS
			;;
	esac

    TARBALL_NAME=condor-${CONDOR_VERSION}-x86_64_${OS_NAME}${OS_VERSION}-stripped.tar.gz
	TARBALL_URL=${TARBALL_DIR_URL}/${TARBALL_NAME}

	# FIXME: On Ubuntu 16, and possibly others, curl may not exist.  Install
	# it during the previous step.
	echo "Downloading ${TARBALL_NAME}..."
	curl -fSL ${TARBALL_URL} -o ${TARBALL_NAME}
}

# Set global defaults
CHANNEL="current"
DOWNLOAD_URL="https://research.cs.wisc.edu/htcondor"
DRY_RUN=1
sh_c='sh -c'
unset DIST

# Process command-line options
while [ $# -gt 0 ]; do
	case "$1" in
		--channel)
			case "$2" in
				stable)
					CHANNEL="stable"
					;;
				current|latest|developer)
					CHANNEL="current"
					;;
				*)
					echo "Illegal option $2 for --channel"
					echo "Run $0 --help for usage"
					exit 1
					;;
			esac
			shift
			;;
		--no-dry-run)
			unset DRY_RUN
			;;
		--dry-run)
			DRY_RUN=1
			;;
		--dist)
			DIST=1
			;;
		--download)
			DOWNLOAD=1
			;;
		--help|-h)
			usage
			;;
		*)
			echo "Illegal option $1"
			echo "Run $0 --help for usage"
			exit 1
			;;
	esac
	shift $(( $# > 0 ? 1 : 0 ))
done

# wrapped up in functions so that we have some protection against only getting
# half the file during "curl | sh"

if is_download; then
	do_download
else
	do_install
fi

exit 0
