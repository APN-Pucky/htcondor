#!/s/std/bin/perl

# Perl script to turn Condor off or on on compute cluster nodes. 
# Written 1/14/00 by Derek Wright <wright@cs.wisc.edu>
#
# This is a very simple, first pass to solve this problem.
# Future work required: 
#   knowing who reserved a node
#   reservations into the future
#   length of reservations
#   automatic checking of stale/idle reservations
#   ...
#
# Usage:
# condor_cluster_tool off N
#     turns off Condor on N nodes, and prints their hostnames to STDOUT  
# condor_cluster_tool on [hosts]
#     turns on Condor on the given hosts
# condor_cluster_tool check [hosts]
#     prints the status of Condor on the given hosts

##################################################
# Config variables
##################################################
$RELEASE_DIR = "/unsup/condor";
$NUMNODES = 64;
$CONDOR_CM = "condor.cs.wisc.edu";
$CLUSTER_CONSTRAINT = "-const 'OpSys == \"LINUX\" && IsDedicated == True'";

##################################################
# Global variables (not user-servicable)
##################################################
$SBIN = "$RELEASE_DIR/sbin";
$BIN = "$RELEASE_DIR/bin";
$CONDOR_OFF = "$SBIN/condor_off -pool $CONDOR_CM";
$CONDOR_ON = "$SBIN/condor_on -pool $CONDOR_CM";
$CONDOR_STATUS = "$BIN/condor_status -pool $CONDOR_CM";

##################################################
# The guts
##################################################
# $#ARGV is 1 less than the # of args...
if( $#ARGV+1 < 2 ) {
    usage();
}
$cmd = shift;
@args = @ARGV;
if( ($cmd =~ /on/) ) {
    start( @args );
} elsif( ($cmd =~ /of/) ) {
    stop( @args );
} elsif( ($cmd =~ /ch/) ) {
    check( @args );
} else {
    usage();
}
exit(0);


##################################################
# Subroutines
##################################################
sub usage {
    print STDERR "\nUsage:  $0 off N\n";
    print STDERR "        $0 on [hosts]\n";
    print STDERR "        $0 check [hosts]\n";
    print STDERR "  off   Turn off Condor on N nodes, and print their ";
    print STDERR "hostnames to STDOUT\n";
    print STDERR "  on    Turn on Condor on the given hosts\n";
    print STDERR "  check Print status of Condor on the given hosts\n";
    print STDERR "Examples:\n";
    print STDERR "  $0 off 4\n";
    print STDERR "  $0 on c03 c05 c07 c09\n";
    print STDERR "  $0 check c03 c04\n";
    print STDERR "\n";
    exit(1);
}


sub start {
    my( @hosts ) = @_;
    foreach $host ( @hosts ) {
	open( CMD, "$CONDOR_ON $host |" );
	while( <CMD> ) {
	    print;
	}
	close CMD;
    }
}


sub stop {
    my( $num ) = @_;
    my( $host, @hosts );
    if( ($num =~ /.*\D.*/) ) {
	die "Error: $num is not a number, try again\n";
    }
    if( $num > $NUMNODES ) {
	die "Error: The cluster only has $NUMNODES machines, try again\n";
    }

    @hosts = find_avail($num);
    foreach $host ( @hosts ) {
	kill_condor( $host );
    }

    # Maybe we should wait here until Condor is really gone...

    foreach $host ( @hosts ) {
	print $host . "\n";
    }
}


sub find_avail {
    my( $num ) = @_;
    my( $found, $host, @avail );
    parse_cluster_status();
    $found = 0;
    for( $i = 1; $i <= $NUMNODES; $i++ ) {
	if( $i < 10 ) {
	    $host = "c0$i";
	} else {
	    $host = "c$i";
	}
	if( @status{"vm1\@$host.cs.wisc.edu"} ) {
	    # This node is up, give it up.
	    push @avail, $host;
	    $found++;
	} 
	if( $found == $num ) {
	    return @avail;
	}
    }
    die "Not enough nodes running Condor to satisfy your request\n"
}


sub parse_cluster_status {
    my( $format, $name, $state, $act );
    $format = "-format \"%s:\" Name -format \"%s:\" State -format \"%s\n\" Activity";
    open( CMD, "$CONDOR_STATUS $CLUSTER_CONSTRAINT $format |" );
    while( <CMD> ) {
	chomp;
	($name, $state, $act) = split /:/;
	@status{$name} = ($state, $act);
    }
}


sub kill_condor {
    my( $host ) = @_;
    `$CONDOR_OFF $host`;
}


sub check {
    my( @hosts ) = @_;
    foreach $host ( @hosts ) {
	$status = check_host( $host );
	print "$host: $status\n";
    }
}


sub check_host {
    my( $host ) = @_;
    my( $status );
    open( CMD, "$CONDOR_STATUS $host 2>&1 |" );
    while( <CMD> ) {
	if( /.*unknown host.*/ ) {
	    $status = "Unknown host";
	} elsif( /^$/ ) {
	    $status = "Condor is down";
	} else {
	    $status = "Condor is up";
	}
    }
    return $status
}
