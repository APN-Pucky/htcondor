#!/s/std/bin/perl
#
# Script to set/check whether Condor is running on compute cluster nodes.
#
# 14-Jan-2000 Derek Wright <wright@cs.wisc.edu>
# 21-Jan-2000 Peter Couvares <pfc@cs.wisc.edu> many fixes/improvements
# 25-Feb-2000 Peter Couvares <pfc@cs.wisc.edu> added logging
#
# This is a very simple, first pass to solve this problem.
# Future work required:
#   knowing who reserved a node
#   reservations into the future
#   length of reservations
#   automatic checking of stale/idle reservations
#   ...
#
# Usage:
# condor_cluster_tool off N
#     turns off Condor on N nodes, and prints their hostnames to STDOUT
# condor_cluster_tool on [hosts]
#     turns on Condor on the given hosts
# condor_cluster_tool check [hosts]
#     prints the status of Condor on all nodes by default, or on only
#     the given hosts if specified

use English;
use FileHandle;

### Config variables

       $RELEASE_DIR = "/unsup/condor";
          $NUMNODES = 64;   # (note: we assume $NUMNODES <=99 in a few places)
         $STARTNODE = 2;
         $CONDOR_CM = "condor.cs.wisc.edu";
           $LOGFILE = "/p/condor/workspaces/cluster/condor_cluster_tool.log";
             $DEBUG = 0;


### Global variables (not user-servicable)

         $SBIN = "$RELEASE_DIR/sbin";
          $BIN = "$RELEASE_DIR/bin";
   $CONDOR_OFF = "$SBIN/condor_off -pool $CONDOR_CM";
    $CONDOR_ON = "$SBIN/condor_on -pool $CONDOR_CM";
$CONDOR_STATUS = "$BIN/condor_status -pool $CONDOR_CM";


### The guts

# remember, $#ARGV is always 1 less than the # of args...
if( $#ARGV < 0 ) {
    usage();
    exit 1;
}

# determine username & timestamp and then open logfile
$user = scalar getpwuid( $UID );
$datetime = scalar localtime();
open( LOG, ">>$LOGFILE" ) || warn "$0: error opening $LOGFILE: $!\n";

# make sure partial logging occurs even if user kills us mid-way
LOG->autoflush();

# log command-line args
print LOG "$datetime $user";
foreach $arg ( @ARGV ) {
    print LOG " $arg";
}
print LOG "\n";

# parse args
$cmd = shift;    # "on, "off", "check", etc.
@args = @ARGV;   # args to prior command, if any

if( $cmd eq "on" )
{
    if( $#args < 0 )
    {
	usage();
	exit 1;
    }
    start_condor( @args );
}
elsif( $cmd =~ /^of/ )
{
    if( $#args < 0 )
    {
	usage();
	exit 1;
    }
    stop_condor( @args );
}
elsif( $cmd =~ /^ch/ )
{
    if( $#args < 0 )
{
	foreach $n ($STARTNODE .. 9)
	{
	    push @args, "c0$n";
	}
	foreach $n (10 .. $NUMNODES)
	{
	    push @args, "c$n";
	}
    }
    check_condor( @args );
}
else
{
    usage();
    exit 1;
}

close LOG || warn "$0: error closing $LOGFILE: $!\n";
exit 0;


### Subroutines

sub usage()
{
    print STDERR
	"Usage: $0 off N\n",
	"       $0 on hosts\n",
	"       $0 check [hosts]\n",
	"\n",
	"       off   Stop Condor on any N nodes, and print their hostnames ",
	"to STDOUT\n",
	"       on    Start Condor on the given hosts\n",
	"       check Print state of Condor on all nodes (or specific nodes, if given)\n",
	"\n",
	"       Examples:\n",
	"          $0 off 4\n",
	"          $0 on c03 c05 c07 c09\n",
	"          $0 check c03 c04\n";
}


sub start_condor
{
    my @hosts = @_;
    foreach $host ( @hosts )
    {
	# if the user just specified a number, translate to a "cXX" node name
	if( $host =~ /^\d+$/ )
	{
	    if( $host < 10 )
	    {
		$host = "c0$host";
	    }
	    else
	    {
		$host = "c$host";
	    }
	}
	print LOG "$datetime $user    (returned $host)\n";
	system( "$CONDOR_ON $host" );
    }
}


sub stop_condor {
    my ($num) = @_;
    my ($host, @hosts);

    if( $num =~ /\D/ ) {
	die "$0: error: $num is not a number, try again\n";
    }
    if( $num > $NUMNODES ) {
	die "$0: error: the cluster only has $NUMNODES machines, try again\n";
    }

    @hosts = find_avail( $num );

    foreach $host ( @hosts ) {
	kill_condor( $host );
    }

    foreach $host ( @hosts )
    {
	while( condor_up( $host ) )
	{
	    print "DEBUG: $host still up...\n" if $DEBUG;
	    sleep 1;
	}
	print $host, "\n";
	print LOG "$datetime $user    (given $host)\n";
    }
}


sub find_avail {
    my ($num) = @_;
    my ($found, $host, @avail);

    $found = 0;
    for( $i = $STARTNODE; $i <= $NUMNODES; $i++ ) {
	if( $i < 10 ) {
	    $host = "c0$i";
	} else {
	    $host = "c$i";
	}
	if( condor_up ( $host ) )
	{
	    # this node is available; give it up
	    push @avail, $host;
	    $found++;
	} 
	if( $found == $num ) {
	    return @avail;
	}
    }
    die "$0: error: only $found nodes found running Condor, try again\n";
}


sub condor_up()
{
    my $node = shift;

    open( CMD, "$CONDOR_STATUS $node |" )
	|| die "$0: error running \"$CONDOR_STATUS $node\": $!\n";

    while( <CMD> )
    {
	chomp;
	if ( /^condor_status: / )
	{
	    die "$_\n$0: error running \"$CONDOR_STATUS $node\"\n";
	}
	elsif ( /^vm\d+\@$node/ || /^$node/ )
	{
	    return 1;
	}
    }
    return 0;
}


sub kill_condor {
    my( $host ) = @_;
    `$CONDOR_OFF $host`;
}


sub check_condor {
    my( @hosts ) = @_;

    foreach $host ( @hosts ) {
	# if the user just specifies a number, prepend the "cXX" node name
	if( $host =~ /^\d+$/ ) {
	    if( $host < 10 ) {
		$host = "c0$host";
	    }
	    else {
		$host = "c$host";
	    }
	}
	$status = check_host( $host );
	print "$host: $status\n";
    }
}

sub check_host {
    my( $host ) = @_;
    my( $status );
    open( CMD, "$CONDOR_STATUS $host 2>&1 |" );
    while( <CMD> ) {
	if( /unknown host/ ) {
	    $status = "Unknown host";
	} elsif( /^$/ ) {
	    $status = "Condor is down";
	} else {
	    $status = "Condor is up";
	}
    }
    return $status
}
