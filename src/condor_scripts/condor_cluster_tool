#!/s/std/bin/perl
#
# Script to set/check whether Condor is running on compute cluster nodes.
#
# 14-Jan-2000 Derek Wright <wright@cs.wisc.edu>
# 21-Jan-2000 Peter Couvares <pfc@cs.wisc.edu>
#
# This is a very simple, first pass to solve this problem.
# Future work required:
#   knowing who reserved a node
#   reservations into the future
#   length of reservations
#   automatic checking of stale/idle reservations
#   ...
#
# Usage:
# condor_cluster_tool off N
#     turns off Condor on N nodes, and prints their hostnames to STDOUT
# condor_cluster_tool on [hosts]
#     turns on Condor on the given hosts
# condor_cluster_tool check [hosts]
#     prints the status of Condor on all nodes by default, or on only
#     the given hosts if specified


### Config variables

       $RELEASE_DIR = "/unsup/condor";
          $NUMNODES = 64;   # (note: we assume $NUMNODES <=99 in a few places)
         $STARTNODE = 2;
         $CONDOR_CM = "condor.cs.wisc.edu";
$CLUSTER_CONSTRAINT = "-const 'IsComputeCluster == True'";


### Global variables (not user-servicable)

         $SBIN = "$RELEASE_DIR/sbin";
          $BIN = "$RELEASE_DIR/bin";
   $CONDOR_OFF = "$SBIN/condor_off -pool $CONDOR_CM";
    $CONDOR_ON = "$SBIN/condor_on -pool $CONDOR_CM";
$CONDOR_STATUS = "$BIN/condor_status -pool $CONDOR_CM";


### The guts

if( $#ARGV < 0 ) {   # $#ARGV is 1 less than the # of args...
    usage();
    exit 1;
}
$cmd = shift;
@args = @ARGV;
if( $cmd eq "on" ) {
    if( $#args < 0 ) {
	usage();
	exit 1;
    }
    start_condor( @args );
} elsif( $cmd =~ /^of/ ) {
    if( $#args < 0 ) {
	usage();
	exit 1;
    }
    stop_condor( @args );
} elsif( $cmd =~ /^ch/ ) {
    if( $#args < 0 ) {
	foreach $n ($STARTNODE .. 9) {
	    push @args, "c0$n";
	}
	foreach $n (10 .. $NUMNODES) {
	    push @args, "c$n";
	}
    }
    check_condor( @args );
} else {
    usage();
    exit 1;
}

exit 0;


### Subroutines

sub usage {
    print STDERR
	"Usage: $0 off N\n",
	"       $0 on hosts\n",
	"       $0 check [hosts]\n",
	"\n",
	"       off   Stop Condor on any N nodes, and print their hostnames ",
	"to STDOUT\n",
	"       on    Start Condor on the given hosts\n",
	"       check Print state of Condor on all nodes (or specific nodes, if given)\n",
	"\n",
	"       Examples:\n",
	"          $0 off 4\n",
	"          $0 on c03 c05 c07 c09\n",
	"          $0 check c03 c04\n";
}


sub start_condor {
    my @hosts = @_;
    foreach $host ( @hosts ) {
	# if the user just specifies a number, prepend the "cXX" node name
	if( $host =~ /^\d+$/ ) {
	    if( $host < 10 ) {
		$host = "c0$host";
	    }
	    else {
		$host = "c$host";
	    }
	}
	system( "$CONDOR_ON $host" );
    }
}


sub stop_condor {
    my ($num) = @_;
    my ($host, @hosts);

    if( $num =~ /\D/ ) {
	die "$0: error: $num is not a number, try again\n";
    }
    if( $num > $NUMNODES ) {
	die "$0: error: the cluster only has $NUMNODES machines, try again\n";
    }

    @hosts = find_avail( $num );

    foreach $host ( @hosts ) {
	kill_condor( $host );
    }

    foreach $host ( @hosts ) {
	parse_cluster_status();
	while( defined $status{"vm1\@$host"} ||
	       defined $status{"vm2\@$host"} ) {
	    sleep 1;
	    parse_cluster_status();
	}
	print $host, "\n";
    }
}


sub find_avail {
    my ($num) = @_;
    my ($found, $host, @avail);

    parse_cluster_status();

    $found = 0;
    for( $i = $STARTNODE; $i <= $NUMNODES; $i++ ) {
	if( $i < 10 ) {
	    $host = "c0$i";
	} else {
	    $host = "c$i";
	}
	if( @status{"vm1\@$host.cs.wisc.edu"} ) {
	    # This node is up, give it up.
	    push @avail, $host;
	    $found++;
	} 
	if( $found == $num ) {
	    return @avail;
	}
    }
    die "$0: error: only $found nodes found running Condor, try again\n";
}


sub parse_cluster_status {
    my ($format, $name, $state, $act);

    $format =
	"-format \"%s:\" Name " .
	"-format \"%s:\" State " .
	"-format \"%s\n\" Activity";

    open( CMD, "$CONDOR_STATUS $CLUSTER_CONSTRAINT $format |" )
	|| die "$0: error running $CONDOR_STATUS: $!\n";

    undef @status;

    while( <CMD> ) {
	chomp;
	($name, $state, $act) = split /:/;
	$status{$name} = ($state, $act);
    }
}


sub kill_condor {
    my( $host ) = @_;
    `$CONDOR_OFF $host`;
}


sub check_condor {
    my( @hosts ) = @_;
    foreach $host ( @hosts ) {
	$status = check_host( $host );
	print "$host: $status\n";
    }
}

sub check_host {
    my( $host ) = @_;
    my( $status );
    open( CMD, "$CONDOR_STATUS $host 2>&1 |" );
    while( <CMD> ) {
	if( /unknown host/ ) {
	    $status = "Unknown host";
	} elsif( /^$/ ) {
	    $status = "Condor is down";
	} else {
	    $status = "Condor is up";
	}
    }
    return $status
}
