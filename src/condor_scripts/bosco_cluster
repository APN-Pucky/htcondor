#!/bin/sh
# bosco_add_host: Used to install ssh keys and blahp on remote hosts.

# 
# Arguments:
# add host: add host to cluster
#

# Bosco key location
bosco_key=$HOME/.ssh/bosco_key.rsa

# Bosco password location
PASSPHRASE_LOCATION=$HOME/.bosco/.pass

# Bosco cluster list location
CLUSTERLIST_LOCATION=$HOME/.bosco/.clusterlist

usage()
{
cat << EOM
usage: $0 command

commands:
 -l|--list          List the installed clusters
 -a|--add host      Install and add a cluster
 -r|--remove host   Remove the installed cluster
 -t|--test host     Test the installed cluster
 -h|--help          Show this help message

Where host is user@fqdn.example.com

EOM
}

list()
{
    # Check for the cluster_list file
    if [ -e $CLUSTERLIST_LOCATION ]; then
        cat $CLUSTERLIST_LOCATION
    else
        echo "No clusters configured"
    fi
}

remove_cluster () {
    # $1 = cluster to remove

    # First, check if the cluster is in the cluster list

    # Remove bosco from the remote cluster

    # Remove the host from the cluster list

}

# The getopt command line.  Using -a for alternate (allow options with only 1 '-')
TEMP=`getopt -a -o a:lt:r:h --longoptions add:,list,test:,remove:help  -n 'bosco_cluster' -- "$@"`

if [ $? != 0 ]; then usage; echo "Terminating..." >&2; exit 1; fi

eval set -- "$TEMP"

while true; do
    case "$1" in
        -h|--help) usage; exit 1; shift ;;
        -a|--add) remote_host=$2; shift 2; break ;;
        -l|--list) list; exit 0 ;;
        -t|--test) test_cluster;  shift 2 ;;
        -r|--remove) remove_cluster $2; shift 2; break;;
        
        --) echo "No command found" >&2; usage; exit 1;;
        *) echo "Unknown option"; exit 1;;
    esac
done


################################################################
# The rest of the file covers the 'add' cluster functionality.
################################################################

# If the key doesn't exist, create it
if [ ! -e $bosco_key ]; then
    # Read in password for bosco key
    stty -echo
    read -p "Enter password for bosco ssh key: " PASSPHRASE; echo
    stty echo

    # Output the password to a specially crafted file
    mkdir -p $HOME/.bosco
    echo $PASSPHRASE > $PASSPHRASE_LOCATION
    chmod go-rwx $PASSPHRASE_LOCATION
    
    ssh-keygen -q -t rsa -f $bosco_key -P $PASSPHRASE > /dev/null
fi


# Transfer the public key to the remote host
# ssh-copy-id is available on el5 from openssh-clients
echo "Enter password to copy ssh keys to $remote_host:"
ssh-copy-id -i $bosco_key $remote_host > /dev/null


# Copy blahp
PASSPHRASE=""
if [ -f $PASSPHRASE_LOCATION ]; then
    PASSPHRASE=`cat $PASSPHRASE_LOCATION`
fi

# Start the ssh-agent
eval `ssh-agent -s` > /dev/null

# Create an ssh-agent session to handle the transfers
# Copied from remote_gahp
# create a temp file for the expect script
SSH_ADD_SCRIPT=`mktemp`
chmod 700 $SSH_ADD_SCRIPT

# Create the expect script
echo "#!/usr/bin/expect -f
    # get arguments
    set num_args [llength \$argv]
    set private_key_loc [lindex \$argv 0]

    # spawn ssh-add process
    spawn ssh-add $bosco_key

    set spawn_pid [exp_pid]

    # set timeout for expected input
    set timeout 5

    expect {
        # no passphrase required
        \"*Identity added*\" {
            exit 0
        }
        # sends passphrase
        \"*passphrase*\" {
            send -- \"$PASSPHRASE\r\"
        }
        # no ssh-agent running
        \"*authentication agent*\" {
            exit -1
        }
        # incorrect private key location
        timeout {
            exit -2
        }
    }

    expect {
        # all done
        eof {
            exit 0
        }
        # incorrect passphrase
        \"*passphrase*\" {
            exit -3
        }
        # timeout
        timeout {
            exit -4
        }
    }" > $SSH_ADD_SCRIPT


# call the expect script to ssh-add identity
$SSH_ADD_SCRIPT > /dev/null
ADD_STATUS=$?

# remove temporary script
rm $SSH_ADD_SCRIPT

# check if ssh-add failed
if [ $ADD_STATUS != 0 ] ; then
    # ssh-add script not found
    if [ $ADD_STATUS == 1 ] ; then
        ADD_STATUS=-1
    fi
    eval `ssh-agent -sk`
    exit $ADD_STATUS
fi


# First, find the blahp
glite_location=`condor_config_val GLITE_LOCATION`
release_dir=`condor_config_val RELEASE_DIR`

echo "Installing BOSCO on $remote_host..."

# Make the necessary remote directories
ssh $remote_host "mkdir -p bosco/glite/lib"

# Copy over blahp
rsync -aq $glite_location/[^l]* $remote_host:bosco/glite/
if [ -d $release_dir/lib64 ] ; then
    libdir=lib64
else
    libdir=lib
fi
rsync -aq  $release_dir/$libdir/libclassad.so* $remote_host:bosco/glite/lib/
rsync -aq  $release_dir/$libdir/condor $remote_host:bosco/glite/lib/

# Add the cluster to the cluster list
echo $remote_host > $CLUSTERLIST_LOCATION

echo "Installation complete"

# Shut down ssh-agent
eval `ssh-agent -sk` > /dev/null
