#!/usr/bin/env python3

import argparse
import htcondor
import os
import re
import sys


def print_help(stream=sys.stderr):
    help_msg = """Usage: {0} <slurm-job-id>

"""
    stream.write(help_msg.format(sys.argv[0]))


def parse_args():

    # The only arguments that are acceptable are
    # <this> <dagman-job-id>
    # Assume dagman-job-id could be in NNN or NNN.0 format

    if len(sys.argv) != 2:
        print_help()
        sys.exit(-1)

    parser = argparse.ArgumentParser()
    parser.add_argument("id", nargs=1)
    args = parser.parse_args()
    
    return {"dagman_cluster_id": args.id[0].split('.')[0]}


# Retrieve the filenames of a DAGs output and event logs based on DAGMan cluster id
def get_dagman_files(dagman_cluster_id):
    
    schedd = htcondor.Schedd()
    env = schedd.query(
        constraint=f"ClusterId == {dagman_cluster_id}",
        projection=["Env"],
    )
    env = dict(item.split("=") for item in env[0]["Env"].split(";"))
    out = env["_CONDOR_DAGMAN_LOG"]
    log = out.replace(".dagman.out", ".nodes.log")
    
    return out, log


def main():

    # Internal variables
    dagman_cluster_id = None
    provisioner_cluster_id = None
    slurm_cluster_id = None
   
    # User-facing variables (all values set below are default/initial state)
    slurm_job_state = "NOT SUBMITTED"
    slurm_nodes_requested = None

    # Parse arguments and set default values if undeclared
    try:
        args = parse_args()
    except Exception as err:
        print(f"Failed to parse arguments: {err}", file=sys.stderr)

    dagman_cluster_id = args['dagman_cluster_id']
    dagman_out, dagman_log = get_dagman_files(dagman_cluster_id)

    # Parse the DAGMan event log for useful information
    dagman_events = htcondor.JobEventLog(dagman_log)
    for event in dagman_events.events(0):
        #print(event)
        #print(event.keys())
        #print(event.values())
        print(f"Event: cluster = {event.cluster}, type = {event.type}")
        if "LogNotes" in event.keys() and event["LogNotes"] == "DAG Node: B":
            provisioner_cluster_id = event.cluster
            slurm_job_state = "PROVISIONING REQUEST PENDING"
        if "LogNotes" in event.keys() and event["LogNotes"] == "DAG Node: C":
            slurm_cluster_id = event.cluster
        if event.cluster == slurm_cluster_id and event.type == htcondor.JobEventType.EXECUTE:
            slurm_job_state = "RUNNING"

    # Parse the DAGMan output for useful information
    """
    dagman_out_file = open(dagman_out, "r")
    for line in dagman_out_file.readlines():
        if "SlurmNodeCount" in line:
            # TODO: Figure out how to extract the node count
            m = re.match("\W*productId[^:]*:\D*(\d+)", t)
            if m:
                print m.group(1)  
   """

    # Now that we have all the information we want, display it
    print(f"The status of Slurm job {dagman_cluster_id}.0 is:")
    print(f"Job is {slurm_job_state}")

if __name__ == "__main__":
    main()
