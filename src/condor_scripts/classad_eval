#!/usr/bin/python3

import sys
import argparse

import classad
import htcondor


def makeClassAd(adString):
    try:
        return classad.ClassAd(adString)
    except SyntaxError:
        modifiedAdString = "[" + adString + "]"
        return classad.ClassAd(modifiedAdString)


def usage(name):
    print("Usage: {0} [-target-file <file>] [-file <file>] <expr|assignment>[ <expr|assignment>]*".format(name))
    print("Evaluate ClassAd expressions.")
    print("Assignments modify the ClassAd context.");
    print("")
    print("Options:")
    print("\t-target-file <file>\tA file containing the target ClassAd");
    print("\t-file <file>       \tA file containing the initial ClassAd context");
    print("\t-debug             \tEnable debug mode");
    print("")
    print("Flags may replace expressions or assignments:")
    print("\t-quiet             \tDon't print the ClassAd context after this flag");

class AppendToConst(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        value = getattr(namespace, self.const)
        if value is None:
            value = []
        value.append(option_string)
        value.extend(values)
        setattr(namespace, self.const, value)

def evaluateAndPrint():
    # Why does this think it's OK to the eat whitespace in my description?
    # I need to add usage for -quiet, as well...
    # also, the whole "positional arguments" section in the auto-created
    # usage should not exist.
    parser = argparse.ArgumentParser(add_help=False,
        description="Evaluate ClassAd expressions.\nAssignments modify the ClassAd context.")
    parser.add_argument("-debug", action='store_true',
        help="Enable debug mode")
    parser.add_argument("-file",
        help="A file containing the initial ClassAd context",
        metavar="<file>");
    parser.add_argument("-target-file",
        help="A file containing the target ClassAd context",
        metavar="<file>");
    parser.add_argument("-help", action='help')
    # As implemented, this can't be the first flag, because something
    # eats the value of "expression" in the namespace before the return.
    parser.add_argument("-quiet", nargs='+', metavar='',
        action=AppendToConst, const="expression")
    parser.add_argument("expression", nargs='*',
        metavar="<expr|assignment>")
    # We'll switch to parse_intermixed_args() once we no longer support
    # Python 3.6 anywhere.
    args = parser.parse_args()

    if args.debug:
        htcondor.enable_debug()

    targetAd = None
    if args.target_file:
        targetAdFileName = args.target_file
        targetAdString = open(targetAdFileName).read()
        try:
            targetAd = makeClassAd(targetAdString)
            print(repr(targetAd))
        except SyntaxError:
            sys.exit("Unable to turn target file '" + targetAdStringFileName + "' into a ClassAd.")

    ad = None
    if args.file:
        adStringFileName = args.file
        adString = open(adStringFileName).read()
        try:
            ad = makeClassAd(adString)
        except SyntaxError:
            sys.exit("Unable to turn file '" + adStringFileName + "' into a ClassAd.")
    else:
        ad = classad.ClassAd()

    quiet = False
    updated = True
    expressions = args.expression
    for i in range(0,len(expressions)):
        if expressions[i] == "-quiet":
            quiet = True
            continue

        try:
            newAd = makeClassAd(expressions[i])
            ad.update(newAd)
            updated = True
        except SyntaxError:
            try:
                if updated:
                    updated = False
                    if not quiet:
                        print(repr(ad))
                expr = classad.ExprTree(expressions[i])
            except SyntaxError:
                sys.exit("Unable to turn '" + expressions[i] + "' into a ClassAd or an expression.")

            result = expr.simplify(ad, targetAd)
            print(repr(result))

    return 0


def main():
    return evaluateAndPrint()

if __name__ == "__main__":
    exit(main())
