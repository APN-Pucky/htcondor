#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use JSON;

my( $prettyPrint );
GetOptions(
	'pretty-print'	=> \$prettyPrint
);

# FIXME: This should read from (by default) the local 'userData' file.
my $userData = "#!/bin/bash
	echo bar > /tmp/foo
	";

my $template;
$template->{ AWSTemplateFormatVersion } = "2010-09-09";
$template->{ Description } = "HTCondor Marketplace v1";

$template->{ Mappings }->{ RegionToDefaultAMI } = {
	"us-east-1" => { DefaultAMI => "ami-56aeb43c" }
};

# There's no obvious way to allow the user to pick from the list of
# existing resources xor ask the template to create a new one.  There's
# also no obvious way of constraining the chosen subnet or security group
# to be part of the specified VPC (or deriving the latter from the former).
#
# At some point, to cut down on the number of meaningless options we give our
# poor users, I'm just creating a default VPC, Subnet, and the gibberish
# associated with making them publicly-accessible.
$template->{ Parameters }->{ KeyName } = { Type => "AWS::EC2::KeyPair::KeyName" };
# $template->{ Parameters }->{ VPC } = { Type => "AWS::EC2::VPC::Id" };
# $template->{ Parameters }->{ Subnet } = { Type => "AWS::EC2::Subnet::Id" };
# $template->{ Parameters }->{ SecurityGroup } = { Type => "AWS::EC2::SecurityGroup::Id" };

$template->{ Resources }->{ DefaultSecurityGroup } = {
	Type => "AWS::EC2::SecurityGroup",
	Properties => {
		VpcId => { Ref => "DefaultVPC" },
		GroupDescription => "SSH",
		SecurityGroupIngress => [
			{
				IpProtocol => "tcp",
				FromPort => 22,
				ToPort => 22,
				CidrIp => "0.0.0.0/0"
			}
		]
	}
};

$template->{ Resources }->{ DefaultInternetGateway } = {
	Type => "AWS::EC2::InternetGateway",
	Properties => { }
};

$template->{ Resources }->{ DefaultVPC } = {
	Type => "AWS::EC2::VPC",
	Properties => {
		"CidrBlock" => "10.0.0.0/16",
		EnableDnsSupport => "true",
		EnableDnsHostnames => "true"
	}
};

$template->{ Resources }->{ DefaultVPCGatewayAttachment } = {
	Type => "AWS::EC2::VPCGatewayAttachment",
	Properties => {
		InternetGatewayId => { Ref => "DefaultInternetGateway" },
		VpcId => { Ref => "DefaultVPC" }
	}
};

$template->{ Resources }->{ DefaultSubnet } = {
	Type => "AWS::EC2::Subnet",
	Properties => {
		VpcId => { Ref => "DefaultVPC" },
		CidrBlock => "10.0.0.0/16",
		MapPublicIpOnLaunch => "true"
	}
};

$template->{ Resources }->{ DefaultRouteTable } = {
	Type => "AWS::EC2::RouteTable",
	Properties => {
		VpcId => { Ref => "DefaultVPC" }
	}
};

$template->{ Resources }->{ DefaultRoute } = {
	Type => "AWS::EC2::Route",
	DependsOn => [ "DefaultInternetGateway", "DefaultRouteTable", "DefaultVPCGatewayAttachment" ],
	Properties => {
		DestinationCidrBlock => "0.0.0.0/0",
		GatewayId => { Ref => "DefaultInternetGateway" },
		RouteTableId => { Ref => "DefaultRouteTable" }
	}
};

$template->{ Resources }->{ DefaultSubnetRouteAssociation } = {
	Type => "AWS::EC2::SubnetRouteTableAssociation",
	Properties => {
		RouteTableId => { Ref => "DefaultRouteTable" },
		SubnetId => { Ref => "DefaultSubnet" }
	}
};

# ----------------------------------------------------------------------------
# The interesting part of the template starts here.

$template->{ Resources }->{ CentralManager } = {
	Type => "AWS::EC2::Instance",
	DependsOn => "DefaultSubnetRouteAssociation",
	Properties => {
		ImageId => { "Fn::FindInMap" => [ "RegionToDefaultAMI", { Ref => "AWS::Region" }, "DefaultAMI" ] },
		SecurityGroupIds => [ { "Fn::GetAtt" => [ "DefaultSecurityGroup", "GroupId" ] } ],
		UserData => { "Fn::Base64" => $userData },
		InstanceInitiatedShutdownBehavior => "terminate",
		InstanceType => "t2.micro",
		KeyName => { Ref => "KeyName" },
		SubnetId => { Ref => "DefaultSubnet" }
	}
};

$template->{ Outputs }->{ SSHCommand } = {
	Description => "The SSH command to run to access the central manager.",
	Value => { "Fn::Join" => [ "", [ "ssh -i ", { Ref => "KeyName" }, ".pem ec2-user@", { "Fn::GetAtt" => [ "CentralManager", "PublicIp" ] } ] ] }
};

if( defined( $prettyPrint ) ) {
	print( to_json( $template, { utf8 => 1, pretty => 1 } ) . "\n" );
} else {
	print( encode_json( $template ) . "\n" );
}

exit( 0 );
