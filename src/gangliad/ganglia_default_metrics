[
  name   = strcat(MyType,"UpdatesLost");
  value  = UpdatesLost;
  verbosity = 1;
  desc   = "Number of ClassAd updates that were sent by this daemon but not received by the collector";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"UpdatesTotal");
  value  = UpdatesTotal;
  verbosity = 1;
  desc   = "Number of ClassAd updates that were sent by this daemon";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"DaemonCoreDutyCycle");
  value  = DaemonCoreDutyCycle;
  desc   = "Recent fraction of busy time in the daemon event loop";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfAge");
  value  = MonitorSelfAge;
  desc   = "Age of this daemon";
  units  = "seconds";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfCPUUsage");
  value  = MonitorSelfCPUUsage;
  verbosity = 1;
  desc   = "The fraction of one CPU recently used by this daemon";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfImageSize");
  value  = MonitorSelfImageSize;
  desc   = "Memory allocated to this daemon (i.e. virtual image size)";
  units  = "kbytes";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfRegisteredSocketCount");
  value  = MonitorSelfRegisteredSocketCount;
  verbosity = 1;
  desc   = "Number of sockets registered in this daemon's event loop";
  units  = "sockets";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfResidentSetSize");
  value  = MonitorSelfResidentSetSize;
  verbosity = 1;
  desc   = "RAM allocated to this daemon";
  units  = "kbytes";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]
[
  name   = strcat(MyType,"MonitorSelfSecuritySessions");
  value  = MonitorSelfSecuritySessions;
  verbosity = 1;
  desc   = "Number of security sessions in this daemon's cache";
  daemon = "Scheduler,Negotiator,Machine_slot1";
]

[
  name   = "JobsAccumBadputTime";
  desc   = "Runtime of jobs that were aborted (removed or held) or (standard universe only) evicted without a checkpoint.";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "JobsAccumExecuteTime";
  desc   = "Time spent running jobs.  Does not include file transfer and other job handling time.";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "JobsAccumPostExecuteTime";
  verbosity = 1;
  desc   = "Time spent processing a completed job (includes output file transfer)";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "JobsAccumPreExecuteTime";
  verbosity = 1;
  desc   = "Time spent preparing to run a job (includes input file transfer)";
  units  = "";
  daemon = "Scheduler";
]
[
  name   = "JobsAccumRunningTime";
  desc   = "Time spent running jobs that were not counted as badput (i.e. not removed or held).  Includes file transfer and other handling time.";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "JobsAccumTimeToStart";
  verbosity = 1;
  desc   = "Time between submit and running of a job";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "JobsCheckpointed";
  verbosity = 1;
  desc   = "Number of job run attempts that were interrupted and successfully checkpointed";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsCompleted";
  desc   = "Number of jobs that terminated normally (i.e. not via a signal or abort)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsCoredumped";
  desc   = "Number of jobs that crashed and generated a core file";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsDebugLogError";
  verbosity = 1;
  desc   = "Count of shadows that exited due to debug log errors";
  units  = "shadows";
  daemon = "Scheduler";
]
[
  name   = "JobsExecFailed";
  desc   = "Count of job run attempts that failed to execute the specified command";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsExited";
  verbosity = 1;
  desc   = "Count of job run attempts that have completed (successfully or not)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsExitedAndClaimClosing";
  verbosity = 1;
  desc   = "Count of job run attempts that have completed when claim was not accepting additional jobs";
  units  = "jobs";
  daemon = "Scheduler";
]
/* JobsExitedNormally is the same as JobsCompleted, so don't bother. */
/*
[
  name   = "JobsExitedNormally";
  desc   = "";
  units  = "";
  daemon = "Scheduler";
]
*/
[
  name   = "JobsExitException";
  verbosity = 1;
  desc   = "Count of job run attempts that ended with a job handling exception (shadow exception)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsKilled";
  desc   = "Count of job run attempts in which the job was killed (i.e. evicted)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsMissedDeferralTime";
  verbosity = 1;
  desc   = "Count of job run attempts that failed because the specified deferral time was missed";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsNotStarted";
  verbosity = 1;
  desc   = "Count of job run attempts that failed because the request to activate the claim failed";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsShadowNoMemory";
  verbosity = 1;
  desc   = "Count of job run attempts that failed because there was not enough memory (RESERVED_SWAP)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsShouldHold";
  verbosity = 1;
  desc   = "Count of job run attempts that have resulted in the job going on hold";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsShouldRemove";
  verbosity = 1;
  desc   = "Count of job run attempts that have resulted in the job being removed (e.g. periodic_remove policy)";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsShouldRequeue";
  verbosity = 1;
  desc   = "Count of job run attempts that ended with the job being requeued due to handling failures or OnExitRemove=false";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsStarted";
  desc   = "Number of job run attempts started";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "JobsSubmitted";
  desc   = "Number of jobs submitted";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "MaxJobsRunning";
  desc   = "Configured limit on number of running jobs";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "NumUsers";
  desc   = "Number of different users who currently have jobs in the queue";
  units  = "users";
  daemon = "Scheduler";
]
[
  name   = "RecentStatsLifetime";
  verbosity = 1;
  desc   = "Seconds elapsed since the beginning of the current stats collection window";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "ScheddSwapExhausted";
  verbosity = 1;
  desc   = "Non-zero when jobs cannot be started due to RESERVED_SWAP";
  daemon = "Scheduler";
]
[
  name   = "ShadowsRunning";
  verbosity = 1;
  desc   = "Number of shadow processes currently running";
  units  = "shadows";
  daemon = "Scheduler";
]
[
  name   = "ShadowsStarted";
  verbosity = 1;
  desc   = "Number of shadow processes started";
  units  = "shadows";
  daemon = "Scheduler";
]
[
  name   = "StatsLifetime";
  verbosity = 1;
  desc   = "Seconds of elapsed time since the beginning of the schedd lifetime stat collection window";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "TotalFlockedJobs";
  desc   = "Number of jobs from this schedd that are flocked to other pools";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalHeldJobs";
  desc   = "Number of jobs in this schedd that are on hold";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  aggregate = "SUM";
  name   = "Held Jobs in Pool";
  value  = TotalHeldJobs;
  desc   = "Number of jobs on hold in schedds reporting to this pool";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalIdleJobs";
  desc   = "Number of idle jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  aggregate = "SUM";
  name   = "Idle Jobs in Pool";
  value  = TotalIdleJobs;
  desc   = "Number of idle jobs in schedds reporting to this pool";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalJobAds";
  desc   = "Number of jobs currently in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  aggregate = "SUM";
  name   = "Jobs in Pool";
  value  = TotalJobAds;
  desc   = "Number of jobs currently in schedds reporting to this pool";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalLocalJobsIdle";
  verbosity = 1;
  desc   = "Number of local universe jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalLocalJobsRunning";
  verbosity = 1;
  desc   = "Number of running local universe jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalRemovedJobs";
  desc   = "Number of jobs that are in the process of being removed";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalRunningJobs";
  desc   = "Number of running jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  aggregate = "SUM";
  name   = "Running Jobs in Pool";
  value  = TotalRunningJobs;
  desc   = "Number of running jobs in schedds reporting to this pool";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalSchedulerJobsIdle";
  verbosity = 1;
  desc   = "Number of idle scheduler universe jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]
[
  name   = "TotalSchedulerJobsRunning";
  verbosity = 1;
  desc   = "Number of running scheduler universe jobs in this schedd's queue";
  units  = "jobs";
  daemon = "Scheduler";
]

[
  name   = "FileTransferDownloadBytes";
  derivative = true;
  title  = "File Transfer Download Bandwidth";
  desc   = "Output transfers from jobs";
  units  = "bytes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferDownloadBytesPerSecond_5m";
  desc   = "Rate of output transfers from jobs";
  units  = "bytes/s";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  regex  = "Owner_([^_]*)_FileTransferDownloadBytesPerSecond_5m";
  verbosity = 1;
  desc   = "Rate of output transfers from jobs by user \\1";
  units  = "bytes/s";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferFileReadLoad_5m";
  desc   = "Number of file transfer processes reading input data from files";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferFileReadSeconds";
  derivative = true;
  title  = "File Transfer File Read Load";
  desc   = "Number of file transfer processes reading input data from files";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferFileWriteLoad_5m";
  desc   = "Number of file transfer processes writing output data to files";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferFileWriteSeconds";
  derivative = true;
  title  = "File Transfer File Write Load";
  desc   = "Number of file transfer processes writing output data to files";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferNetReadLoad_5m";
  desc   = "Number of file transfer processes reading output data from the network";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferNetReadSeconds";
  derivative = true;
  desc   = "Number of file transfer processes reading output data from the network";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferNetWriteLoad_5m";
  desc   = "Number of file transfer processes writing input data to the network";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferNetWriteSeconds";
  derivative = true;
  title  = "File Transfer Net Write Load";
  desc   = "Number of file transfer processes writing input data to the network";
  units  = "processes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferUploadBytes";
  derivative = true;
  title  = "File Transfer Upload Bandwidth";
  desc   = "Input transfers to jobs";
  units  = "bytes";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "FileTransferUploadBytesPerSecond_5m";
  desc   = "Rate of input transfers to jobs";
  units  = "bytes/s";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  regex  = "Owner_([^_]*)_FileTransferUploadBytesPerSecond_5m";
  verbosity = 1;
  desc   = "Rate of input transfers from jobs by user \\1";
  units  = "bytes/s";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "TransferQueueDownloadWaitTime";
  desc   = "Oldest output file transfer waiting in the transfer queue";
  units  = "seconds";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  aggregate = "MAX";
  name   = "Pool Max TransferQueueDownloadWaitTime";
  value  = TransferQueueDownloadWaitTime;
  desc   = "Oldest output file transfer waiting in the transfer queues reporting to this pool";
  units  = "seconds";
  daemon = "Scheduler";
]
[
  name   = "TransferQueueNumDownloading";
  desc   = "Number of jobs actively transferring output";
  units  = "jobs";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "TransferQueueNumUploading";
  desc   = "Number of jobs actively transferring input";
  units  = "jobs";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "TransferQueueNumWaitingToDownload";
  desc   = "Number of jobs waiting in the transfer queue to transfer output";
  units  = "jobs";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "TransferQueueNumWaitingToUpload";
  desc   = "Number of jobs waiting in the transfer queue to transfer input";
  units  = "jobs";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  name   = "TransferQueueUploadWaitTime";
  desc   = "Oldest input file transfer waiting in the transfer queue";
  units  = "seconds";
  daemon = "Scheduler";
  group  = "HTCondor.FileTransfer";
]
[
  aggregate = "MAX";
  name   = "Pool Min TransferQueueUploadWaitTime";
  value  = TransferQueueUploadWaitTime;
  desc   = "Oldest input file transfer waiting in the transfer queues reporting to this pool";
  units  = "seconds";
  daemon = "Scheduler";
]

[
  name   = "LastNegotiationCycleActiveSubmitterCount0";
  desc   = "The number of job submitters considered in the negotiation cycle";
  units  = "submitters";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleCandidateSlots0";
  verbosity = 1;
  desc   = "The number of slot ClassAds considered for matchmaking (reduced by NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT if applicable)";
  units  = "slots";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleDuration0";
  desc   = "The number of seconds that it took to complete the negotiation cycle";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleMatches0";
  desc   = "The number of successful matches that were made in the negotiation cycle";
  units  = "matches";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleMatchRate0";
  desc   = "Matches made per second during negotiation cycle";
  units  = "matches/s";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleMatchRateSustained0";
  desc   = "Matches made per second, including waiting time between negotiation cycles";
  units  = "matches/s";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleNumIdleJobs0";
  desc   = "The number of idle jobs belonging to job submitters";
  units  = "jobs";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleNumJobsConsidered0";
  desc   = "The number of jobs considered for matchmaking (may be mutch lower than idle jobs due to auto-cluster optimizations)";
  units  = "jobs";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleNumSchedulers0";
  verbosity = 1;
  desc   = "The number of schedds involved in negotiation for resources";
  units  = "schedds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCyclePeriod0";
  desc   = "Seconds between the end of one cycle the the end of the next";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCyclePhase1Duration0";
  verbosity = 1;
  desc   = "Duration of Phase 1: getting submitter and machine ClassAds";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCyclePhase2Duration0";
  verbosity = 1;
  desc   = "Duration of Phase 2: filtering slots and processing accounting group configuration";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCyclePhase3Duration0";
  verbosity = 1;
  desc   = "Phase 3 of the negotiation cycle: sorting submitters by priority";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCyclePhase4Duration0";
  verbosity = 1;
  desc   = "Phase 4 of the negotiation cycle: matching slots to jobs";
  units  = "seconds";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleRejections0";
  desc   = "The number of rejections that occurred in the negotiation cycle (only one per auto-cluster)";
  units  = "jobs";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleSlotShareIter0";
  verbosity = 1;
  desc   = "The number of iterations in the negotiation cycle";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleTotalSlots0";
  desc   = "The total number of slot ClassAds that matched NEGOTIATOR_SLOT_CONSTRAINT";
  units  = "slots";
  daemon = "Negotiator";
]
[
  name   = "LastNegotiationCycleTrimmedSlots0";
  verbosity = 1;
  desc   = "The number of slot ClassAds considered for matchmaking, after filtering by Negotiator_CONSIDER_PREEMPTION, if applicable";
  units  = "slots";
  daemon = "Negotiator";
]

[
  name   = "ExpectedMachineGracefulDrainingBadput";
  verbosity = 1;
  desc   = "Job runtime that would be lost if graceful draining were initiated now.";
  units  = "cpus*seconds";
  daemon = "Machine_slot1";
]
[
  name   = "ExpectedMachineGracefulDrainingCompletion";
  value  = ExpectedMachineGracefulDrainingCompletion - CurrentTime;
  verbosity = 1;
  desc   = "Time graceful draining could take to complete, assuming jobs take full retirement and vacate time and there is no suspension";
  units  = "seconds";
  daemon = "Machine_slot1";
]
[
  name   = "ExpectedMachineQuickDrainingBadput";
  verbosity = 1;
  desc   = "Job runtime that would be lost if quick draining were initiated now.";
  units  = "cpus*seconds";
  daemon = "Machine_slot1";
]
[
  name   = "ExpectedMachineQuickDrainingCompletion";
  verbosity = 1;
  desc   = "Time quick draining could take to complete, assuming jobs take full retirement and vacate time and there is no suspension";
  units  = "seconds";
  daemon = "Machine_slot1";
]
[
  name   = "KFlops";
  verbosity = 1;
  desc   = "Linpack floating point benchmark";
  units  = "kflops";
  daemon = "Machine_slot1";
]
[
  name   = "Mips";
  verbosity = 1;
  desc   = "Dhrystone integer benchmark";
  units  = "mips";
  daemon = "Machine_slot1";
]
[
  name   = "TotalCondorLoadAvg";
  desc   = "The CPU load attributed to jobs";
  daemon = "Machine_slot1";
]
[
  name   = "TotalCpus";
  verbosity = 1;
  desc   = "Number of cores";
  units  = "cores";
  daemon = "Machine_slot1";
]
[
  aggregate = "SUM";
  name   = "Cpus in Pool";
  value  = TotalCpus;
  verbosity = 1;
  desc   = "Number of cores in the pool";
  units  = "cores";
  daemon = "Machine_slot1";
]
[
  name   = "TotalDisk";
  verbosity = 1;
  desc   = "Disk space in the job execute directory";
  units  = "KB";
  daemon = "Machine_slot1";
]
[
  name   = "TotalLoadAvg";
  verbosity = 1;
  desc   = "System load average";
  daemon = "Machine_slot1";
]
[
  name   = "TotalMemory";
  verbosity = 1;
  desc   = "RAM in MB";
  units  = "MB";
  daemon = "Machine_slot1";
]
[
  name   = "TotalSlots";
  verbosity = 1;
  desc   = "Number of slots";
  units  = "slots";
  daemon = "Machine_slot1";
]
[
  aggregate = "SUM";
  name   = "Pool Slot Count";
  value  = TotalSlots;
  desc   = "Number of slots in the pool";
  units  = "slots";
  daemon = "Machine_slot1";
]
[
  name   = "TotalMachineDrainingBadput";
  desc   = "Job runtime that has been lost due to job evictions caused by draining";
  units  = "cpus*seconds";
  daemon = "Machine_slot1";
]
[
  name   = "TotalMachineDrainingUnclaimedTime";
  desc   = "Time that has not been used due to draining";
  units  = "cpus*seconds";
  daemon = "Machine_slot1";
]
[
  name   = "TotalVirtualMemory";
  verbosity = 1;
  desc   = "Addressable memory (RAM plus swap)";
  units  = "KB";
  daemon = "Machine_slot1";
]
