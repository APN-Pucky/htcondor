#!/s/std/bin/perl

# customize
#
# Perl script that performs platform-specific customization of the
# various files here and creates the proper versions in the
# release_dir. 
#
# Written by Derek Wright <wright@cs.wisc.edu> on 2/27/98
#

&get_platform_defaults();
&customize_config_file( "condor_config.generic",
		       "../release_dir/etc/examples/condor_config.generic" );
&customize_config_file( "condor_config.submit.generic",
		       "../release_dir/etc/examples/condor_config.submit.generic" );
&customize_config_file( "condor_config.root.generic",
		       "../release_dir/etc/examples/condor_config.root.generic" );
&customize_config_file( "condor_config.local.central.manager",
	       "../release_dir/etc/examples/condor_config.local.central.manager" );
&customize_boot_script();


sub get_platform_defaults {
    local( $mach, $os, $rel );
    chop($mach = `uname -m`);
    chop($os = `uname`);
    chop($rel = `uname -r`);
    $console_devs="";
    $needs_kbd=0;
    $special_arch_string="";

    $_ = $os;
  SWITCH: {
      if(/^Linux/) { 
	  $mail_path="/usr/bin/mail";
	  $os_name="LINUX";
	  $arch_name="INTEL";
	  $ps_path="/bin/ps -auwx";
	  $console_devs="mouse, console";
	  last SWITCH;
      }
      if(/^SunOS/) {
	  $mail_path="/usr/ucb/mail";
	  $ps_path="/usr/ucb/ps -auwx";

	  $_ = $rel;
	  if( /5\.5\.1/ ) {
	      $os_name="SOLARIS251";
	  } elsif( /5\.6/ ) {
	      $os_name="SOLARIS26";
	  } else {
	      $os_name="SOLARIS";
	  }

	  $_ = $mach;
	  if( /^i86pc/ ) {
	      $console_devs="kdmouse, vt00, tty00";
	      $arch_name="INTEL";
	  } else {
	      # Sparc
	      $console_devs="mouse, kbd";
	      $arch_name="SUN4x";
	      $special_arch_string = 
"##
## Although they all share the same binaries under Solaris 2.x, Condor
## can handle jobs migrating between sun4c and sun4m CPUs, but jobs which
## checkpoint on a sun4c or sun4m CPU cannot restart on a sun4u (UltraSparc),
## and vice-versa.  SO, to ensure jobs which checkpoint on an UltraSparc
## only restart on an UltraSparc, set the \"ARCH\" parameter below to \"SUN4u\"
## on any UltraSparc in your pool.  (You should probably set the ARCH here to 
## the kind of machine you have the most of in your pool, and set the ARCH
## for the other types in their LOCAL_CONFIG_FILE specified above).\n";
	  }
	  last SWITCH;
      }
      if(/^HP-UX/) {
	  $os_name="HPUX10";
	  $arch_name="HPPA1";
	  $console_devs="ps2mouse, ps2kbd, hil1, hil2, hil3, hil4, hil5, hil6, hil7";
	  $mail_path="/bin/mailx";
	  $special_arch_string = 
"##
## Although HP PA-RISC 1.1 machines and HP PA-RISC 2.x machines, 
## such as machines with the PA8000 CPU, share the same set of binaries,
## Condor cannot checkpoint a job on a PA 1.1 machine and restart it on
## a PA 2.x machine (or vice versa).  SO, to ensure jobs which checkpoint 
## on a PA 1.1 machine only restart on a PA 1.1 machine, set the \"ARCH\"
## parameter below to \"HPPA1\" for all PA 1.1 machines (i.e. a 
## PA7000-series CPU), and set it to \"HPPA2\" for all PA 2.x machine (i.e.
## based around the PA8000 CPU).  (You should probably set the ARCH here to 
## the kind of machine you have the most of in your pool, and set the ARCH
## for the other types in their LOCAL_CONFIG_FILE specified above).\n";

	  last SWITCH;
      }
      if(/^IRIX5/) {
	  $os_name="IRIX5";
	  $arch_name="SGI";
	  $mail_path="/usr/sbin/Mail";
	  $needs_kbd=1;
	  last SWITCH;
      }
      if(/^IRIX/) {
	  $os_name="IRIX6";
	  $arch_name="SGI";
	  $mail_path="/usr/sbin/mailx";
	  $needs_kbd=1;
	  last SWITCH;
      }
      if(/^OSF1/)  {
	  $os_name="OSF1";
	  $arch_name="ALPHA";
	  $mail_path="/usr/ucb/mailx";
	  $needs_kbd=1;
	  last SWITCH;
      }
  }
}


sub customize_config_file {
    local( $generic, $target ) = @_;
    
    -f $target && unlink( $target );
    
    open( TARGET, ">$target" ) ||
	die "Can't open $target: $!\n";
    open( GENERIC, "<$generic" ) || 
	die "Can't open $generic: $!\n";
    
    print "Configuring $generic ... ";
  LINE: while( <GENERIC> ) {
    SWITCH: {
	if( /^MAIL.*$/ ) { $_ = "MAIL\t\t\t= $mail_path\n"; last SWITCH; }
	if( /^ARCH.*$/ ) { 
	    print TARGET $special_arch_string;
	    $_ = "ARCH\t\t= $arch_name\n"; last SWITCH;
	}
	if( /^OPSYS.*$/ ) { $_ = "OPSYS\t\t= $os_name\n"; last SWITCH; }
	if( /^#CONSOLE_DEVICES.*$/ ) {
	   if( $console_devs ) {
	       $_ = "CONSOLE_DEVICES\t= $console_devs\n";
	   }
	   last SWITCH;
        }
	if( /^DAEMON_LIST.*$/ ) {
	    if( $needs_kbd ) {
		chop($_);
		$_ = "$_, KBDD\n";
	    } 
	    last SWITCH;
	}
	if( /^STARTD_DEBUG.*/ && $needs_kbd ) {
	    $_ = "STARTD_DEBUG\t\t= ";
	    last SWITCH;
	}
    }
      print TARGET $_;

  }
    print "done.\n";
    close TARGET;
    close GENERIC;
}


sub customize_boot_script {
    open( GENERIC, "<condor.boot.generic" ) || 
	die "Can't open condor.boot.generic: $!\n";
    open( TARGET, ">../release_dir/etc/examples/condor.boot" ) ||
	die "Can't open target condor.boot: $!\n";

    print "Configuring condor.boot.generic ... ";
    while( <GENERIC> ) {
	if( /^PS.*/ ) {
	    $_ = "PS=\"$ps_path\"\n";
	}
	print TARGET $_;
    }
    print "done.\n";
    close TARGET;
    close GENERIC;
    chmod( 0755, "../release_dir/etc/examples/condor.boot" );
}    
