######################################################################
##
##  condor_config.local.central.manager
##
##  This is the default local configuration file for your central
##  manager machine.  You should copy this file to the appropriate
##  location and customize it for your needs.  The file is divided
##  into three main parts: Local settings of your own, settings you
##  may want to customize and settings you should probably leave alone
##  (unless you know what you're doing).
##
######################################################################

######################################################################
######################################################################
##  Local settings 
######################################################################
######################################################################

##  Place your own local configuration settings for your central
##  manager here.




######################################################################
######################################################################
##  Settings you may want to customize: 
##  (it is generally safe to leave these untouched) 
######################################################################
######################################################################

##  What daemons do you want to run on your central manager?  
##  NOTE: For it to be the central manager, you need the NEGOTIATOR
##  and COLLECTOR to run.  It's optional whether or not you want to
##  run the schedd (to allow jobs to be submited) and/or the startd
##  (to allow Condor jobs to execute) on your central manager.
DAEMON_LIST	= MASTER, COLLECTOR, NEGOTIATOR, STARTD, SCHEDD

##  Where are the binaries for these daemons?  (Note: MASTER, SCHEDD,
##  and STARTD are already defined in the global config file).
COLLECTOR	= $(SBIN)/condor_collector
NEGOTIATOR	= $(SBIN)/condor_negotiator


######################################################################
######################################################################
##  Settings you should probably leave alone:
##  (unless you know what you're doing)
######################################################################
######################################################################

##--------------------------------------------------------------------
##  condor_collector
##--------------------------------------------------------------------
##  How long can a classad remain in the collector before it is
##  discarded as stale information?  (Defaults to 15 minutes.  The 
##  daemons send updates every 5 minutes by default).
CLASSAD_LIFETIME	= 900

##  How often should the collector check for machines that don't have
##  classads from the condor_master and send email about it? (3
##  hours by default).
MASTER_CHECK_INTERVAL	= 10800

##  Network timeout when talking to daemons that are sending an
##  update: 
CLIENT_TIMEOUT		= 30

##  Network timeout when talking to anyone doing a query:
QUERY_TIMEOUT		= 60

##  Email address of the condor-developers at UW-Madison.  
CONDOR_DEVELOPERS	= condor-admin@cs.wisc.edu

##  Every pool can have a name associated with it.  This should be a
##  short description (20 characters or so) that describes your site.
##  For example, the name for the UW-Madison Computer Science Condor
##  Pool is: "UW-Madison CS" (you don't need to put in the " marks).
#COLLECTOR_NAME		= Short Description of your pool

##  By default, every pool sends periodic updates to a central
##  condor_collector at UW-Madison with basic information about the
##  status of your pool.  This includes only the number of total
##  machines, the number of jobs submitted, the number of machines
##  running jobs, the hostname of your central manager, and the
##  "COLLECTOR_NAME" specified above.  These updates help us see
##  how Condor is being used around the world.  By default, they will
##  be sent to condor.cs.wisc.edu.  If you don't want these updates to
##  be sent from your pool, uncomment the following line.
#CONDOR_DEVELOPERS_COLLECTOR = NONE


##--------------------------------------------------------------------
##  condor_negotiator
##--------------------------------------------------------------------
##  How often should the negotiator start a negotiation cycle?
NEGOTIATOR_INTERVAL	= 300

##  What timeout should the negotiator use on it's network connections
##  to the schedds and startds?
NEGOTIATOR_TIMEOUT	= 30

##  What is the halflife of the user priorities? (1 day)
PRIORITY_HALFLIFE	= 86400

##  The negotiator will not preempt a job running on a given machine
##  unless the PREEMPTION_REQUIREMENTS expression evaluates to true
##  and the owner of the idle job has a better priority than the owner
##  of the running job.  This expression defaults to false.  
PREEMPTION_REQUIREMENTS : $(StateTimer) > (1 * $(HOUR)) && RemoteUserPrio > SubmittorPrio * 1.2

##  The PREEMPTION_RANK expression is used to rank machines which the
##  job ranks the same.  For example, if the job has no preference, it
##  is usually preferrable to preempt a job with a small ImageSize
##  instead of a job with a large ImageSize.  The default is to rank
##  all preemptible matches the same.  However, the negotiator will
##  always prefer to match the job with an idle machine over a
##  preemptible machine, if the job has no preference between them.
PREEMPTION_RANK : (RemoteUserPrio * 1000000) - ImageSize

##  The NEGOTIATOR_TRAFFIC_LIMIT macro specifies the maximum
##  amount of network traffic (in KB) the negotiator may initiate per
##  NEGOTIATOR_TRAFFIC_INTERVAL} for job placement and preemption.
##  The negotiator uses the job ImageSize and ExecutableSize
##  parameters to track network usage.  The negotiator will try to use
##  bandwidth up to the limit, so if starting a large ImageSize job
##  would put the negotiator over the limit, it will try to start a
##  small ImageSize job in its place.  Thus, using traffic limits
##  penalizes large ImageSize jobs for the load they place on the
##  network.  This parameter defaults to 0, which disables network
##  usage management in the negotiator.
#NEGOTIATOR_TRAFFIC_LIMIT = 300000

##  The NEGOTIATOR_TRAFFIC_INTERVAL macro specifies the interval
##  (in seconds) to be used in maintaining the
##  NEGOTIATOR_TRAFFIC_LIMIT.  This parameter defaults to 0, which
##  disables network usage management in the negotiator.  It is common
##  to set this parameter equal to NEGOTIATOR_INTERVAL.
#NEGOTIATOR_TRAFFIC_INTERVAL = $(NEGOTIATOR_INTERVAL)

##  The NEGOTIATOR_SOCKET_CACHE_SIZE macro defines the maximum number
##  of sockets which the negotiator should keep in its open socket
##  cache.  Caching open sockets makes the negotiation protocol more
##  efficient by eliminating the need for socket connection
##  establishment for each negotiation cycle.  The default is
##  currently 16.  To be effective, this parameter should be set to a
##  value greater than the number of schedds submitting jobs to the
##  negotiator at any time.
#NEGOTIATOR_SOCKET_CACHE_SIZE = 16
