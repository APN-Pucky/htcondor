#####################################################################
##
##  condor_config.policy
##
##  This is the configuration file that controls the policy for
##  starting, stopping, checkpointing, etc. for your machines.
##
##  This file ships with the default configuration file we use
##  here at the Computer Science department at the University
##  of Wisconsin.  Your needs might be different, but we fell
##  that this is a generically fair policy.
##
##  Also here is what is referred to as the ALWAYS_*, which is
##  a quick hardwired way to test Condor.
##
##  Unless otherwise indicated, all settings which specify a time are
##  defined in seconds.
##
######################################################################

######################################################################
######################################################################
##  Settings control the policy for running, stopping, and
##  periodically checkpointing condor jobs:
######################################################################
######################################################################

##  This section contains macros are here to help write legible
##  expressions:
MINUTE		= 60
HOUR		= (60 * $(MINUTE))
StateTimer	= (CurrentTime - EnteredCurrentState)
ActivityTimer	= (CurrentTime - EnteredCurrentActivity)
ActivationTimer = (CurrentTime - JobStart)
LastCkpt	= (CurrentTime - LastPeriodicCheckpoint)

##  The JobUniverse attribute is just an int.  These macros can be
##  used to specify the universe in a human-readable way:
STANDARD	= 1
PVM		= 4
VANILLA		= 5
IsPVM           = (JobUniverse == $(PVM))
IsVanilla       = (JobUniverse == $(VANILLA))
IsStandard      = (JobUniverse == $(STANDARD))

NonCondorLoadAvg	= (LoadAvg - CondorLoadAvg)
BackgroundLoad		= 0.3
HighLoad		= 0.5
StartIdleTime		= 15 * $(MINUTE)
ContinueIdleTime	=  5 * $(MINUTE)
MaxSuspendTime		= 10 * $(MINUTE)
MaxVacateTime		= 10 * $(MINUTE)

KeyboardBusy		= (KeyboardIdle < $(MINUTE))
ConsoleBusy		= (ConsoleIdle  < $(MINUTE))
CPU_Idle		= ($(NonCondorLoadAvg) <= $(BackgroundLoad))
CPU_Busy		= ($(NonCondorLoadAvg) >= $(HighLoad))

BigJob		= (ImageSize >= (50 * 1024))
MediumJob	= (ImageSize >= (15 * 1024) && ImageSize < (50 * 1024))
SmallJob	= (ImageSize <  (15 * 1024))

JustCPU			= ($(CPU_Busy) && ($(KeyboardBusy) == False))
MachineBusy		= ($(CPU_Busy) || $(KeyboardBusy))

##  The RANK expression controls which jobs this machine prefers to
##  run over others.  Some examples from the manual include:
##    RANK = ImageSize
##    RANK = (Owner == "coltrane") + (Owner == "tyner") \
##                  + ((Owner == "garrison") * 10) + (Owner == "jones")
##  By default, RANK is always 0, meaning that all jobs have an equal
##  ranking.
#RANK			= 0


#####################################################################
##  This where you choose the configuration that you would like to
##  use.  It has no defaults so it must be defined.  We start this
##  file off with the UWCS_* policy.
######################################################################

##  Replace UWCS_* with TESTINGMODE_* if you wish to do testing mode.
##  For example:
##  WANT_SUSPEND 		= $(UWCS_WANT_SUSPEND)
##  becomes
##  WANT_SUSPEND 		= $(TESTINGMODE_WANT_SUSPEND)

WANT_SUSPEND 		= $(UWCS_WANT_SUSPEND)
WANT_VACATE		= #(UWCS_WANT_VACATE)
START			= $(UWCS_START)
SUSPEND			= $(UWCS_SUSPEND)
CONTINUE		= $(UWCS_CONTINUE)
PREEMPT			= $(UWCS_PREEMPT)
KILL			= $(UWCS_KILL)
PERIODIC_CHECKPOINT	= $(UWCS_PERIODIC_CHECKPOINT)

#####################################################################
## This is the UWisc - CS Department Configuration.
#####################################################################
UWCS_WANT_SUSPEND	= ( $(SmallJob) || $(JustCpu) || $(IsPVM) \
			   || $(IsVanilla) )
UWCS_WANT_VACATE 	= $(ActivationTimer) > 10 * $(MINUTE) \
			   || $(IsPVM) || $(IsVanilla)

##  The following START expression is the exact start expression that
##  we use here at UWCS.  Here at UWCS we require that people declare
##  how much RAM they are going to use (as we have a number of
##  machines that have a low amount of RAM).  To do so, they put the
##  following into their command file (what they give to condor_submit):
##  +MemoryRequirements = 12
##  (Where the first ## is not there, and 12 is the number of megabytes
##  of RAM they are going to use)
##  If they do NOT specify this (which is often), we'll assume that they'll
##  need 113 megabytes of RAM (128 - 15 megabytes that we typically save for the
##  operating system.)
##  So, the expression below is, if the CPU & Keyboard are both idle,
##  and the MemoryRequirements fit (or are not defined and this machine
##  has 128 or greater megabytes of RAM), then the job can start here.
##
##  If you decide to use this, please be aware that if you do not
##  have any (or many) machines with 128 megabytes (or more) of RAM, your
##  jobs will *NOT* start unless you specify MemoryRequirements in 
##  your command file!
#UWCS_START		= ( ($(CPU_Idle) && KeyboardIdle > $(StartIdleTime)) \
#			   && (TARGET.ImageSize <= ((Memory - 15)*1024)) \
#			   && ( (MemoryRequirements < (Memory - 15)) || \
#			   (MemoryRequirements =?= UNDEFINED && \
#			   (RemoteUserCpu > 0.0 || Memory > 127)) ) )

##  An easier-to-use start expression follows.  It is only dependent on
##  if the CPU is idle, and if the keyboard has been idle for a while.
##  (The memory requirements are implied to be that the amount of RAM
##  the incoming job requires will be less than the amount of memory on
##  this machine).
UWCS_START		= $(CPU_Idle) && KeyboardIdle > $(StartIdleTime)
UWCS_SUSPEND		= $(MachineBusy)
UWCS_CONTINUE		= $(CPU_Idle) && KeyboardIdle > $(ContinueIdleTime)
UWCS_PREEMPT		= ( ($(ActivityTimer) > $(MaxSuspendTime)) && \
			   (Activity == "Suspended") ) || \
			   ( SUSPEND && (WANT_SUSPEND == False) )
UWCS_KILL		= $(ActivityTimer) > $(MaxVacateTime) 

##  Only define vanilla versions of these if you want to make them
##  different from the above settings.
#SUSPEND_VANILLA	= $(MachineBusy)
#CONTINUE_VANILLA	= $(CPU_Idle) && KeyboardIdle > $(ContinueIdleTime)
#PREEMPT_VANILLA	= ( ($(ActivityTimer) > $(MaxSuspendTime)) && \
			   (Activity == "Suspended") ) || \
			  ( SUSPEND_VANILLA && (Activity != "Suspended") )
#KILL_VANILLA		= $(ActivityTimer) > $(MaxVacateTime)

##  We use a simple Periodic checkpointing mechanism, but then
##  again we have a very fast network.
UWCS_PERIODIC_CHECKPOINT	= $(LastCkpt) > (3 * $(HOUR))

##  You might want to checkpoint a little less often.  A good
##  example of this is below.  For jobs smaller than 60 megabytes, we
##  periodic checkpoint every 6 hours.  For larger jobs, we only
##  checkpoint every 12 hours.
#UWCS_PERIODIC_CHECKPOINT	= ( (ImageSize < 60000) && \
#			    ($(LastCkpt) > (6 * $(HOUR))) ) || \ 
#			  ( $(LastCkpt) > (12 * $(HOUR)) )

#####################################################################
##  This is a Configuration that will cause your Condor jobs to
##  always run.  This is intended for testing only.
######################################################################

##  This mode will cause your jobs to start on a machine an will let
##  them run to completion.  Condor will ignore all of what is going
##  on in the machine (load average, keyboard activity, etc.)

TESTINGMODE_WANT_SUSPEND	= False
TESTINGMODE_WANT_VACATE		= False
TESTINGMODE_START		= True
TESTINGMODE_SUSPEND		= False
TESTINGMODE_CONTINUE		= True
TESTINGMODE_PREEMPT		= False
TESTINGMODE_KILL		= False
TESTINGMODE_PERIODIC_CHECKPOINT	= False



