<p><style>
body {
  margin-left: auto;
  margin-right: auto;
  max-width: 8in;
  font-family: verdana, sans-serif;
}
code {
  font-family: andale mono, courier new, courier, monospace;
}
p {
  line-height: 150%;
}
iframe {
  width: 95%;
  height: 400px;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 2em;
}
.gallery iframe {
  width: 40%;
  height: 200px;
  margin: 1em;
  border: 0;
}
.gallery iframe.spark {
  display: block;
  width: 100px;
  height: 40px;
  margin-top: 0;
  margin-bottom: 0;
  margin-left: auto;
  margin-right: auto;
}
u {
  color: red;
}
</style></p>

<h1>Afterquery: the json post-processor and graphing tool</h1>

<h2>What does it do?</h2>

<p>Afterquery is a pure-client-side javascript tool that downloads
<a href="http://en.wikipedia.org/wiki/JSONP">jsonp</a>-formatted data from a
given URL, applies a configurable series of transformations, and then
renders the result as either a data table or a Google Visualizations
(gviz) chart.</p>

<p>Although the javascript file happens to be hosted on a server,
your data never gets uploaded; your browser handles all the
processing steps internally.  Also, the permissions to
download the jsonp data depends on the cookies in your
browser, so you can safely retrieve protected content
without granting authorization to an external server.</p>

<p>You can then embed it in an iframe to produce easy
dashboards like this:</p>

<iframe
src="/?url=example1.json&group=ver,serial;&filter=ver>&order=ver&group=ver;serial&order=-serial&limit=4&chart=pie">
</iframe>

<p>(That's actually a live graph generated by afterquery just
now.)</p>

<p>I wrote afterquery because I found that there are lots of
cool tools for extracting data from super huge databases
(so-called "big data") but those tools can take between a
few seconds and a few minutes to run.  Once you have a
smallish dataset produced by running your "big data" query
tools, it would be nice to be able to shrink, summarize,
and rotate the "not big data" as efficiently as possible. 
That's this.</p>

<h2>How to use</h2>

<p>First, you need to find a service that produces data in
"rows and columns" jsonp format.  That is, the structure of
the object is [row1,row2,...,rown] where each row is
[col1,col2,col3,...,coln].</p>

<p>Then you construct a afterquery URL with the jsonp URL you
want to retrieve from, followed by the set of transforms
you want to apply.  You can just type it into your web
browser's URL bar while you experiment.  Then, once you
have the query the way you want it, paste it into a web
page inside an &lt;iframe&gt; tag (like the graph above) or
just <a href="/?url=example1.json&amp;group=ver,serial;&amp;filter=ver>&amp;order=ver&amp;group=ver;serial&amp;order=-serial&amp;limit=4&amp;chart=pie">make a hyperlink to a full-screen
chart</a>.</p>

<p>The basic structure is:</p>

<pre><code>    https://afterquery.appspot.com?url=http://wherever/my/page/is&amp;&lt;transform1&gt;&amp;&lt;transform2&gt;&amp;&lt;transform3&gt;...
</code></pre>

<p>(The default with no transforms is to just show the data in
a handy table view without any changes.)</p>

<p>Available transforms:</p>

<ul>
<li><p><b>&amp;limit=<u>n</u></b> <br />
Discard all data after <u>n</u> rows.</p></li>
<li><p><b>&amp;filter=<u>key</u>>=<u>value1</u>,<u>value2</u>,...</b> <br />
Show only rows where the column named <u>key</u> has a
value >= <u>value1</u> or <u>value2</u> etc.  The
operator (>= in this example) can be one
of =, &lt;, >, &lt;=, >=, &lt;>, or !=.  If you specify more
than one value, they
are combined in an OR configuration (ie. a row matches
if any of the values match).  If you provide
more than one &amp;filter= clause, they are combined
successively in an AND configuration (ie. a row matches
only if all the filters are true).</p></li>
<li><p><b>&amp;q=<u>value1</u>,<u>value2</u>,...</b> <br />
Show only rows where any of the columns contain the
substring <u>value1</u> or <u>value2</u> etc.  If more
than one value is specified, they are combined in an OR
configuration.  If you provide more than one &amp;q= clause,
they are combined successively in an AND configuration.</p></li>
<li><p><b>&amp;order=<u>[-]key1</u>,<u>[-]key2</u></b> <br />
Sort the table in order of <u>key1</u> and then (if key1
is the same) by <u>key2</u> etc.  If a key starts with
'-' that means to sort that key in descending order
(largest to smallest).</p></li>
<li><p><b>&amp;extract_regexp=<u>key</u>=<u>regexp(match)regexp</u></b> <br />
Search for the given regular expression in each row in
the column named <u>key</u>.  If it's found, replace the
column with the substring in the <u>(match)</u> part of
the regexp.  For example,
<code>&amp;extract_regexp=ver=version-(.*)</code> would replace a
string <code>version-25.4</code> in column <code>ver</code> with the string <code>25.4</code>.</p></li>
<li><p><b>&amp;group=<u>key1</u>,<u>key2</u>,...;<u>val1</u>,<u>val2</u>,...</b> <br />
Summarize the table data by summing and counting.  This
operation works like a simplified version of SQL's
"group by" clause.  In the resulting output, the order
of the columns will be
<u>key1</u>,<u>key2</u>,...,<u>val1</u>,<u>val2</u>... 
and there will only be at most one row with any
particular combination of <u>key1</u>,<u>key2</u>,... 
fields.  The <u>val</u> columns will be summed (if they
were already numerical) or counted (if they were
non-numeric).</p>

<p>A clause like <code>&amp;group=a,b;x,y</code> (if x is a string and y
is a number) would be equivalent to this in SQL: <code>select
a, b, count(x) x, sum(y) y from MyTable group by a, b</code></p>

<p>If you apply multiple <b>&amp;group=</b> clauses, it works like
using multiple nested subqueries in SQL.  (That is, the
output of one <b>&amp;group=</b> clause becomes the MyTable
of the next one.)</p>

<p>If you leave out the ';' and the <u>val</u> column
names, the default is to automatically include all
columns other than the <u>key</u> columns.</p>

<p>If you include the ';' but leave out the <u>val</u>
column names, that means you don't want any value
columns (so only the key fields will be included, and
nothing will be summed or counted at that step).  So
<code>&amp;group=a,b;</code> (with a trailing semicolon) is equivalent
to this in SQL: <code>select a, b from MyTable group by a,
b</code>.</p></li>
<li><p><b>&amp;treegroup=<u>key1</u>,<u>key2</u>,...;[<u>val1</u>,[<u>val2</u>]]</b> <br />
Like <b>&amp;group=</b>, but produces an output table arranged hierarchically
by each <u>key1</u>..<u>keyn</u>, so you can drill down.  There can be
zero, one, or two <u>val</u> columns; the first value is the size of
each box in the tree view (if omitted, they are all the same size), and
the second value is the colour of each box (if omitted, the colour varies
with the size).  <b>&amp;treegroup=</b> isn't really useful unless you also
use <b>&amp;chart=tree</b>.</p></li>
<li><p><b>&amp;pivot=<u>rowkeys...</u>;<u>colkeys...</u>;<u>valkeys...</u></b> <br />
A <b>&amp;pivot=</b> clause works like a <b>&amp;group=</b>
clause, but creates a
<a href="http://en.wikipedia.org/wiki/Pivot_table">pivot table</a>. 
Pivot tables are a bit complicated; the easiest way to
learn about them is to play with an example.
<a href="/?url=example1.json&amp;group=date,flag,ver,serial;&amp;pivot=date,ver;flag;serial">Here's one to start
with</a>.</p>

<p>The simplest way to think of a pivot table is like this:
the values originally in the columns named by <u>rowkeys</u>
end up down the left of the output table.  The values
originally in the columns named by <u>colkeys</u> end up
as headings across the top of the output table.  The values
originally in the columns named by <u>valkeys</u> end up
as values in the body section of the output table.  A
pivot table is very handy when you have raw data in
SQL-like format and you want to rearrange it to be
suitable for charting (where each line in a line chart,
say, is usually one column of the table).</p>

<p>If the <u>rowkeys</u> section is empty, the output will
have exactly one row (with all the value fields counted
or summed into that one row).  If the <u>colkeys</u>
section is empty, the <b>&amp;pivot=</b> operation is
essentially equivalent to a
<b>&amp;group=<u>rowkeys...</u>;<u>valkeys...</u></b> operation. 
If the <u>valkeys</u> section is empty, there are no
values used to calculate the table body, so it is
equivalent to an <b>&amp;group=<u>rowkeys...</u>;</b>
operation.</p></li>
<li><p><b>&amp;chart=<u>charttype</u></b> <br />
Instead of showing a table of values, show a chart.  The
available <u>charttypes</u> are currently: stacked (a
stacked area chart), line, spark, column, bar, pie,
tree (see <b>treegroup</b>), candle, timeline, dygraph, dygraph+errors.</p></li>
<li><p><b>&amp;title=<u>title</u></b> <br />
Add a title to the chart.</p></li>
</ul>

<h2>Example 1</h2>

<p>Here is some raw data <a href="example2.json.txt">(source)</a> produced by an
analytics program:</p>

<iframe src="example2.json.txt">
</iframe>

<p>(Tip: in the tables and charts below, click the "Edit" link in the
upper-right corner to see how the query works.)</p>

<p>Afterquery can render it as a table like this:</p>

<iframe src="/?url=example2.json">
</iframe>

<p>Or pre-sort the table for you like this:</p>

<iframe src="/?url=example2.json&order=state,-date">
</iframe>

<p>Or filter it by date:</p>

<iframe src="/?url=example2.json&filter=date<2012-11-10&filter=date>=2012-11-01">
</iframe>

<p>Or summarize the results (like a "group by" in SQL):</p>

<iframe src="/?url=example2.json&group=date">
</iframe>

<p>Or summarize and display only a subset of columns:</p>

<iframe src="/?url=example2.json&group=date;NumDevices">
</iframe>

<p>Or do a <a href="http://en.wikipedia.org/wiki/Pivot_table">pivot table</a>
(converting rows into columns):</p>

<iframe src="/?url=example2.json&pivot=date;state;NumDevices">
</iframe>

<p>Or filter, then pivot, and then make a chart!</p>

<iframe
src="/?url=example2.json&order=date,state&filter=date>=2012-11-01&filter=date<2012-11-14&pivot=date;state;NumDevices&chart=stacked&title=Devices Rebooted/Upgraded by Date">
</iframe>

<h2>Example 2</h2>

<p>Here's another dataset:</p>

<iframe src="/?url=example1.json">
</iframe>

<p>We can use two consecutive grouping operations to first get
a list of serial numbers for each version, and then get the
count of serial numbers per version <a href="/?url=example1.json&amp;group=ver,serial;&amp;group=ver;serial&amp;order=ver">(link)</a>:</p>

<iframe src="/?url=example1.json&group=ver,serial;&group=ver;serial&order=ver">
</iframe>

<p>Hmm, those version numbers are ugly because some of them
have extra debug information after them.  Let's trim it
out using a regex:</p>

<iframe
src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=ver,serial;&group=ver;serial&order=ver">
</iframe>

<p>And make a pivot table to easily show the pattern over
time:</p>

<iframe
src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&pivot=date;ver;serial">
</iframe>

<p>Trim out some outliers:</p>

<iframe
src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&group=date,ver;serial&filter=serial&gt;10&filter=ver&gt;&pivot=date;ver;serial">
</iframe>

<p>And graph it:</p>

<iframe
src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&group=date,ver;serial&filter=serial&gt;10&filter=ver&gt;&pivot=date;ver;serial&chart=stacked">
</iframe>

<p>Or graph a subset of the data:</p>

<iframe
src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&q=v35,v37,v36&pivot=date;ver;serial&chart=line">
</iframe>

<p>Or maybe show the top 4 versions:</p>

<iframe
src="/?url=example1.json&group=ver,serial;&filter=ver&gt;&order=ver&group=ver;serial&order=-serial&limit=4&chart=pie">
</iframe>

<h2>Chart gallery</h2>

<div class="gallery">
<iframe src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&group=date,ver;serial&filter=serial&gt;10&filter=ver&gt;&pivot=date;ver;serial&chart=stacked"></iframe>
<iframe src="/?url=example1.json&extract_regexp=ver=(v)ersion-([^-.]*)&group=date,ver,serial;&order=date,ver&group=date,ver;serial&filter=serial&gt;10&filter=ver&gt;&pivot=date;ver;serial&chart=line"></iframe>
<iframe src="/?url=example1.json&group=ver,serial;&filter=ver&gt;&order=ver&group=ver;serial&order=-serial&limit=4&chart=column"></iframe>
<iframe src="/?url=example1.json&group=ver,serial;&filter=ver&gt;&order=ver&group=ver;serial&order=-serial&limit=4&chart=bar"></iframe>
<iframe src="/?url=example1.json&group=ver,serial;&filter=ver&gt;&order=ver&group=ver;serial&order=-serial&limit=4&chart=pie"></iframe>
<iframe src="/?url=example1.json&group=flag,ver,serial;&treegroup=flag,ver;serial&chart=tree"></iframe>
<iframe src="/?url=example2.json&pivot=date;state;NumDevices&group=date,upgraded,rebooted,rebooted,idle&chart=candle"></iframe>
<iframe src="/?url=example2.json&pivot=date;state;NumDevices&chart=timeline"></iframe>
<iframe src="/?url=example2.json&pivot=date;state;NumDevices&chart=dygraph"></iframe>
<iframe src="/?url=example2.json&pivot=date;state;NumDevices&group=date,idle,rebooted,rebooted,upgraded&chart=dygraph+errors"></iframe>
<iframe class='spark' src="/?url=example1.json&filter=ver=oldversion-1&group=date,ver,serial;&pivot=date;ver;serial&chart=spark"></iframe>
<iframe class='spark' src="/?url=example1.json&filter=ver=oldversion-17&group=date,ver,serial;&pivot=date;ver;serial&chart=spark"></iframe>
<iframe class='spark' src="/?url=example1.json&filter=ver=oldversion-19&group=date,ver,serial;&pivot=date;ver;serial&chart=spark"></iframe>
</div>

<h2>Where can I get a jsonp data source?</h2>

<p>There are lots of them out on the web.  If your favourite
database query or reporting engine doesn't support jsonp,
ask them to add it!</p>

<h2>Need help?  Want to contribute?</h2>

<p>Email <a href="&#x6D;&#x61;&#x69;&#x6C;&#116;&#x6F;:&#x61;p&#101;&#110;&#119;&#97;&#x72;&#114;&#64;&#103;&#x6F;&#x6F;&#x67;&#x6C;&#x65;.c&#x6F;&#x6D;">&#x61;p&#101;&#110;&#119;&#97;&#x72;&#114;&#64;&#103;&#x6F;&#x6F;&#x67;&#x6C;&#x65;.c&#x6F;&#x6D;</a>.  Probably there'll be a
mailing list eventually.</p>

<p>The complete source code is contained in <a
href="/render.js">render.js</a>.</p>

<div style='padding-bottom: 5in;'></div>
