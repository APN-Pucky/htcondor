#!/usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************


######################################################################
# $Id: platform_post,v 1.8 2007-11-14 22:20:28 bt Exp $
# post script to cleanup platform-specific files on the submit side
######################################################################

use POSIX;
use Getopt::Long;
use vars qw/ $opt_without_tests $opt_test_args $opt_submit_xtests /;
GetOptions(
            'without-tests' => \$opt_without_tests,
            'test-args=s' => \$opt_test_args,
            'submit-xtests!' => \$opt_submit_xtests,
);

# we just want to chmod everything in the local directory (the
# per-platform directory on the submit side, after everything was
# transfered back) to be world-readable so that other folks can see
# the results.  until Condor's file transfer mechanism preserves
# permissions, we'll have to use this hack. :(

print "Running 'chmod a+r *' to make build output world readable\n";
system("chmod a+r *");

print "Initializing values from the environment\n";
my $platform = $ENV{NMI_PLATFORM};
my $mode = "regular"; # if workspace, try to do a workspace test

print "ENV: NMI_PLATFORM = $platform\n";
$platform || die "No platform to use, NOT submitting tests\n";

if( defined $opt_without_tests ) {
    print "--without-tests specified on command-line, NOT submitting tests\n";
    exit 0;
}   

if( defined $opt_test_args ) {
    print "--test-args specified on command-line, additional args for " 
        . "condor_nmi_submit:\n   '$opt_test_args'\n";
}   

if($opt_test_args =~ /^--workspace=.*/) {
	print "Attempting workspace build auto test run!\n";
	$mode = "workspace";
}

my $tag = $ENV{NMI_tag};
my $module = $ENV{NMI_module};
my $notify = $ENV{NMI_notify};
my $gid = $ENV{_NMI_GID};
my $failed = $ENV{_NMI_STEP_FAILED};
print "ENV: NMI_tag = $tag\n";
print "ENV: NMI_module = $module\n";
print "ENV: NMI_notify = $notify\n";
print "ENV: _NMI_GID = $gid\n";
print "ENV: _NMI_STEP_FAILED = $failed\n";

if(defined $failed) {
	die "Stopping testing since step \"$failed\" failed\n";
}

my $notify_arg = '';
if( $notify ) {
    $notify_arg = "--notify=$notify";
}
my $xtests_arg = $opt_submit_xtests == 1 ? '--submit-xtests' : '--nosubmit-xtests';

if($mode ne "workspace") {
	$tag || die "No tag to use, NOT submitting tests\n";
	$module || die "No module to use, NOT submitting tests\n";
}
$gid || die "No gid to use, NOT submitting tests\n";

my $runid = `nmi_gid2runid $ENV{_NMI_GID}`;
chomp $runid;
$runid || die "Can't find runid from gid, NOT submitting tests\n";

# Skip MacOS 10.4 for now
my $status;
#unless ($platform =~ /macos_10\.4/) {
    print "Attempting to submit test job for platform: '$platform' "
        . "runid: '$runid' ...\n";

    # path to the condor_nmi_submit binary we're planning to use
    my $cns = "nmi_tools/condor_nmi_submit";
    -f $cns || die "Can't submit tests: $cns does not exist\n";
    if( ! -x $cns ) {
        chmod(0755, $cns) || die "Can't submit tests: $cns is not executable "
            . "and chmod() failed: $!\n";
    }

	my $cmd = "";
	if($mode ne "workspace") {
    	$cmd = "$cns --test --buildid=$runid --platform=$platform " .
       		"--tag=$tag --module=$module $notify_arg $opt_test_args $xtests_arg";
	} else {
		# set up tests for a workspace build
    	$cmd = "$cns --test --buildid=$runid --platform=$platform " .
       		"$notify_arg $opt_test_args";
		print "Workspace test command is <$cmd>\n";
	}

    print "Invoking CNS ($cmd)\n";
    open( CNS, "$cmd|" ) || 
        die "Can't submit tests: Can't open '$cmd' as a pipe: $!\n";
    while( <CNS> ) {
        print "CNS: $_";
    }
    close( CNS );
    $status = $?;
#} # UNLESS

if( ! $status ) {
    # exited with status 0, we're happy
    print "platform_post: SUCCESS\n";
    exit 0;
}

if( $status == -1 ) {
    die "$cns failed to execute: $!";
} elsif( WIFEXITED($status) ) {
    die "$cns exited with status " . WEXITSTATUS($status);
} elsif( WIFSIGNALED($status) ) {
    die "$cns died with signal " . WTERMSIG($status);
} else {
    die "$cns returned unrecognized status: $status";
}

