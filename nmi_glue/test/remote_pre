#!/usr/bin/perl

######################################################################
# $Id: remote_pre,v 1.1.2.4 2004-06-24 02:04:17 wright Exp $
# script to set up for Condor testsuite run
######################################################################

use Cwd;
use Env; 

my $logsize = "50000000"; # size for logs of personal Condor


######################################################################
# set up path and create path file for the rest of the scripts
######################################################################



my $HomeDir = getcwd();
my $SrcDir = "$HomeDir/src";

open(ENVSETUP, ">setup_test_env") || die "cannot open setup_test_env for writing\n";

print ENVSETUP "HOME=$HomeDir\n";
$ENV{"HOME"}="$HomeDir";
print ENVSETUP "CONDOR_CONFIG=$HomeDir/condor/etc/condor_config\n";
$ENV{"CONDOR_CONFIG"}="$HomeDir/condor/etc/condor_config";
print ENVSETUP "PATH=$HomeDir/condor/bin:$HomeDir/condor/sbin:\$PATH\n";
$ENV{"PATH"}="$HomeDir/condor/bin:$HomeDir/condor/sbin:$PATH";
print ENVSETUP "SRC_DIR=$SrcDir\n";
$ENV{"SRC_DIR"}="$SrcDir";

# for debugging
print "PATH is $ENV{PATH}\n";

######################################################################
# untar pre-built tarball
######################################################################

print "Untarring RELEASE tarball\n";
chdir("$HomeDir") || die "Can't chdir($HomeDir): $!\n";
my $release_tarball = $ENV{"_NMI_BUILD_condor_binary_tarball"} ||
    die "_NMI_BUILD_condor_binary_tarball not in environment!\n";
print "Release tarball is: $release_tarball\n";

my $configure;
my $reltar;
open( UNTAR, "tar -zxvf $release_tarball |" ) ||
     die "Can't untar $release_tarball: $!\n";
print "Untarring $release_tarball ...\n";
while( <UNTAR> ) {
  if( /.*\/condor_configure/ ) {
    $configure = "$HomeDir/$_";
     chomp( $configure );
  }
  if( /.*\/release.tar/ ) {
    $reltar = "$HomeDir/$_";
    chomp( $reltar );
  }
  print;
}
close UNTAR;


######################################################################
# setup the personal condor
######################################################################

# find the version - macosx doesn't work w/the "old" way  
# XXX TODO XXX !!!!
# this seems like a hack, maybe we can find a better way...
my $version = substr($release_tarball, 7, 5);
print "VERSION string is $version\n";
# XXX TODO XXX !!!!

my $configure = "$HomeDir/condor-$version/condor_configure";
my $reltar = "$HomeDir/condor-$version/release.tar";

print "SETTING UP PERSONAL CONDOR\n";
mkdir( "$HomeDir/local" ) || die "Can't mkdir $HomeDir/local: $!\n";
mkdir( "$HomeDir/condor" ) || die "Can't mkdir $HomeDir/condor: $!\n";

print "RUNNING condor_configure\n";
$conf = &verbose_system("$configure --make-personal-condor --local-dir=$HomeDir/local --install=$reltar --install-dir=$HomeDir/condor");
($conf == 0) || die "Problem installing Personal Condor. Return val $conf\n";

# make sure ports for Personal Condor are valid  
# high ports are a concern for irix, dux and aix. 
my $col_port = $PID;
if ($col_port > 65535){
   $col_port = int($col_port / 10000) + 1024;
} 
if ($col_port < 1024){
   $col_port = $col_port + 1024;
}
my $neg_port = $col_port + 1;

rename( "$HomeDir/local/condor_config.local",
	"$HomeDir/local/condor_config.local.orig" )
    || die "Can't rename condor_config.local: $!\n";

open( ORIG, "<$HomeDir/local/condor_config.local.orig" ) ||
    die "Can't open $HomeDir/local/condor_config.local.orig: $!\n";
open( FIX, ">$HomeDir/local/condor_config.local" ) ||
    die "Can't open $HomeDir/local/condor_config.local: $!\n";
while( <ORIG> ) {
  if( /CONDOR_HOST.*/ ) {
    print FIX;
    print FIX "COLLECTOR_HOST = \$(CONDOR_HOST):$col_port\n";
    print FIX "NEGOTIATOR_HOST = \$(CONDOR_HOST):$neg_port\n";
  } else {
    print FIX;
  }
}

# ADD NUM_CPUS and NUM_VMS to speed up tests
print FIX "NUM_CPUS = 3\n";
print FIX "NUM_VIRTUAL_MACHINES = 3\n";
print FIX "STARTD_EXPRS = NUM_CPUS\n";

# ADD size for log files and debug level
# default settings are in condor_config, set here to override 
print FIX "ALL_DEBUG               = ";

print FIX "MAX_COLLECTOR_LOG       = $logsize\n";
print FIX "COLLECTOR_DEBUG         = ";

print FIX "MAX_KBDD_LOG            = $logsize\n";
print FIX "KBDD_DEBUG              = ";

print FIX "MAX_NEGOTIATOR_LOG      = $logsize\n";
print FIX "NEGOTIATOR_DEBUG        = D_MATCH\n";
print FIX "MAX_NEGOTIATOR_MATCH_LOG = $logsize\n";

print FIX "MAX_SCHEDD_LOG          = $logsize\n";
print FIX "SCHEDD_DEBUG            = D_COMMAND";

print FIX "MAX_SHADOW_LOG          = $logsize\n";
print FIX "SHADOW_DEBUG            = D_FULLDEBUG\n";

print FIX "MAX_STARTD_LOG          = $logsize\n";
print FIX "STARTD_DEBUG            = D_COMMAND\n";

print FIX "MAX_STARTER_LOG         = $logsize\n";
print FIX "STARTER_DEBUG           = D_NODATE\n";

print FIX "MAX_MASTER_LOG          = $logsize\n";
print FIX "MASTER_DEBUG            = D_COMMAND\n";

close ORIG;
close FIX; 

print "PERSONAL CONDOR installed!\n";


######################################################################
# setup the src tree so the test suite finds condor_compile and its
# other dependencies.  
######################################################################

chdir( $SrcDir ) || die "Can't chdir($SrcDir): $!\n";
print "run CONFIGURE ...\n"; 
open( TESTCONFIG, "./configure --without-externals 2>&1 |") ||
    die "Can't open configure as a pipe: $!\n";
while ( <TESTCONFIG> ) {
  print $_;
}
close (TESTCONFIG);
$configstat = $?;
print "CONFIGURE returned a code of $configstat\n"; 
($configstat == 0) || die "CONFIGURE failed, aborting testsuite run.\n";  


chdir( "$SrcDir/condor_syscall_lib" )
    || die "Can't chdir($SrcDir/condor_syscall_lib): $!\n";
opendir( DIR, "$HomeDir/condor/lib" ) ||
  die "can't opendir $HomeDir/condor/lib for condor_syscall_lib: $!\n";
@files = readdir(DIR);
closedir DIR;
foreach $file ( @files ) {
    if( $file =~ /.*\.[oa]/ ) {
	symlink( "$HomeDir/condor/lib/$file", "$file" ) ||
	    die "Can't symlink($HomeDir/condor/lib/$file): $!\n";
    }
}

chdir( "$SrcDir/condor_scripts" ) || 
    die "Can't chdir($SrcDir/condor_scripts): $!\n";

unlink( "condor_compile" ) || die "Can't unlink(condor_compile): $!\n";
unlink( "ld" ) || die "Can't unlink(ld): $!\n";
symlink( "$HomeDir/condor/lib/ld", "ld" ) ||
    die "Can't symlink($HomeDir/condor/lib/ld): $!\n";
symlink( "$HomeDir/condor/bin/condor_compile", "condor_compile" ) ||
    die "Can't symlink($HomeDir/condor/lib/condor_compile): $!\n";


######################################################################
# spawn the personal condor
######################################################################

chdir($HomeDir);
print "Starting condor_master, about to FORK in $HomeDir\n";

$master_pid = fork();
if( $master_pid == 0) {
  exec("$HomeDir/condor/sbin/condor_master -f");
  print "MASTER EXEC FAILED!!!!!\n";
  exit 1;
}

# save the master pid for later use
print "Master PID is $master_pid\n";
open( PIDFILE, ">$HomeDir/condor_master_pid") || 
    die "cannot open $HomeDir/condor_master_pid: $!\n";
print PIDFILE "$master_pid";
close PIDFILE;   

# Give the master time to start before jobs are submitted.
print "Sleeping for 30 seconds to give the master time to start.\n";
sleep 30;


sub verbose_system {

  my @args = @_;
  my $rc = 0xffff & system @args;

  printf "system(%s) returned %#04x: ", @args, $rc;

  if ($rc == 0) {
   print "ran with normal exit\n";
   return $rc;
  }
  elsif ($rc == 0xff00) {
   print "command failed: $!\n";
   return $rc;
  }
  elsif (($rc & 0xff) == 0) {
   $rc >>= 8;
   print "ran with non-zero exit status $rc\n";
   return $rc;
  }
  else {
   print "ran with ";
   if ($rc &   0x80) {
       $rc &= ~0x80;
       print "coredump from ";
   return $rc;
   }
   print "signal $rc\n"
  }
}

