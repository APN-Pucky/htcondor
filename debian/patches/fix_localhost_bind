From: Dan Bradley <dan@hep.wisc.edu>
Subject: Ticket #2513: NETWORK_INTERFACE does not work as expected

As of 7.7.0, the following configuration does not cause the daemons to bind only to 127.0.0.1:
   BIND_ALL_INTERFACES = FALSE
   NETWORK_INTERFACE = 127.0.0.1
It does not even cause the daemon to advertise 127.0.0.1 as its public address.

I have verified that in 7.6.2, the above configuration does have the expected effect.

Here's what appears to be causing this problem:

Checkin [22136] attempted to fix problems in the new 7.7.0 IPv6
init_local_hostname(). However, this code caches the result of my_sin_addr(),
among other things. The problem with caching the result is that if
my_sin_addr() is called before the configuration has been fully initialized,
NETWORK_INTERFACE is not taken into account. init_local_hostname() is called
early during configuration in order to fill in config macros such as HOSTNAME.
From then on, the cached value is used, so NETWORK_INTERFACE is effectively
ignored.

Note that all cached values in my_hostname.cpp are cleared and re-initialized
by the config system after the configuration has been loaded. Something similar
needs to be done for the new IPv6 code, or it just needs to avoid caching.

--- a/src/condor_utils/condor_config.cpp
+++ b/src/condor_utils/condor_config.cpp
@@ -812,6 +812,12 @@
 		// parameter at this point, if it's set.
 	init_ipaddr( TRUE );
 
+		// The IPv6 code currently caches some results that depend
+		// on configuration settings such as NETWORK_INTERFACE.
+		// Therefore, force the cache to be reset, now that the
+		// configuration has been loaded.
+	init_local_hostname();
+
 		// Re-insert the special macros.  We don't want the user to
 		// override them, since it's not going to work.
 	reinsert_specials( host );
--- a/src/condor_utils/my_hostname.cpp
+++ b/src/condor_utils/my_hostname.cpp
@@ -145,6 +145,12 @@
 		if( network_interface_ips ) {
 			network_interface_ips->insert( ip );
 		}
+
+		dprintf(D_HOSTNAME,"%s=%s, so choosing IP %s\n",
+				interface_param_name,
+				interface_pattern,
+				ip.c_str());
+
 		return true;
 	}
 
