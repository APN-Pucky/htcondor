Source: condor
Section: science
Priority: extra
Maintainer: NeuroDebian team <team@neuro.debian.net>
Uploaders: Michael Hanke <mih@debian.org>, Yaroslav Halchenko <debian@onerussian.com>
Build-Depends: debhelper (>= 7.0.50~), po-debconf, cmake, libpq-dev, libcurl4-openssl-dev, zlib1g-dev, libglobus-gss-assist-dev, libglobus-gram-protocol-dev, libglobus-gram-client-dev, libglobus-gass-server-ez-dev, libglobus-ftp-client-dev, latex2html, transfig, libpcre3-dev, libboost-thread-dev, libboost-program-options-dev, libboost-system-dev, libboost-regex-dev, libboost-filesystem-dev, libexpat1-dev, libxml2-dev, libvirt-dev, zlib1g-dev, gcj-jdk | java-compiler, libcgroup-dev (>= 0.37~), uuid-dev, chrpath, libldap2-dev | libldap-dev, help2man
Standards-Version: 3.9.2


Package: condor
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}, ${python:Depends}, ${perl:Depends}, debconf (>= 0.5) | debconf-2.0, adduser, libdate-manip-perl
Recommends: dmtcp
Description: workload management system
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 The Debian package uses Debconf to determine an appropriate initial
 configuration for a machine that shall join an existing Condor pool, and
 moreover, allows creating a "Personal" (single machine) Condor pool
 automatically.


#Package: condor-tests
#Architecture: any
#Depends: ${misc:Depends}, ${shlibs:Depends}
#Description: test suite for Condor
# Like other full-featured batch systems, Condor provides a job queueing
# mechanism, scheduling policy, priority scheme, resource monitoring, and
# resource management. Users submit their serial or parallel jobs to Condor,
# Condor places them into a queue. It chooses when and where to run the jobs
# based upon a policy, carefully monitors their progress, and ultimately
# informs the user upon completion.
# .
# Unlike more traditional batch queueing system, Condor can also effectively
# harness wasted CPU power from otherwise idle desktop workstations. Condor
# does not require a shared file system across machines - if no shared file
# system is available, Condor can transfer the job's data files on behalf of
# the user.
# .
# This package provides Condor's test-suite that can be used to verify
# proper functioning of a Condor installation.


Package: condor-dev
Section: devel
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: development files for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This package provides headers and libraries for development of Condor add-ons.


Package: condor-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: documentation for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This package provides Condor's documentation in HTML and PDF format, as well
 as configuration and other examples.


Package: condor-dbg
Section: debug
Architecture: any
Depends: ${misc:Depends}, condor (= ${binary:Version})
Description: debugging symbols for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This package provides the debugging symbols for Condor.


Package: libclassad-dev
Replaces: libclassad0-dev
Conflicts: libclassad0-dev
Section: libdevel
Architecture: any
Depends: libclassad2 (= ${binary:Version}), ${misc:Depends}
Description: library for Condor's classads expression language (development)
 A classad (classified ad) is a mapping from attribute names to expressions. In
 the simplest cases, the expressions are simple constants (integer, floating
 point, or string), thus a form of property list. Attribute expressions
 can also be more complicated. There is a protocol for evaluating an attribute
 expression of a classad vis a vis another ad. Two classads match if each ad has
 attribute requirements that evaluate to true in the context of the other ad.
 Classad  matching is used by the Condor central manager to determine the
 compatibility of jobs and workstations where they may be run.
 .
 This package provides the static library and header files.


Package: libclassad2
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: library for Condor's classads expression language
 A classad (classified ad) is a mapping from attribute names to expressions. In
 the simplest cases, the expressions are simple constants (integer, floating
 point, or string), thus a form of property list. Attribute expressions
 can also be more complicated. There is a protocol for evaluating an attribute
 expression of a classad vis a vis another ad. Two classads match if each ad has
 attribute requirements that evaluate to true in the context of the other ad.
 Classad  matching is used by the Condor central manager to determine the
 compatibility of jobs and workstations where they may be run.
 .
 This package provides the runtime library.


