Source: condor
Section: science
Priority: extra
Maintainer: NeuroDebian team <team@neuro.debian.net>
Uploaders: Michael Hanke <mih@debian.org>, Yaroslav Halchenko <debian@onerussian.com>
Build-Depends: debhelper (>= 7.0.50~), po-debconf, cmake, libpq-dev, libcurl4-openssl-dev, zlib1g-dev, libglobus-gss-assist-dev, libglobus-gram-protocol-dev, libglobus-gram-client-dev, libglobus-gass-server-ez-dev, libglobus-ftp-client-dev, libclassad-dev, latex2html, transfig, libpcre3-dev, libboost-dev, libexpat1-dev, libxml2-dev, libvirt-dev, zlib1g-dev, gcj-jdk | java-compiler
Standards-Version: 3.9.1


Package: condor
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}, debconf (>= 0.5) | debconf-2.0, adduser
Description: workload management system
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 The Debian package uses Debconf to determine an appropriate initial
 configuration for a machine that shall join an existing Condor pool, and
 moreover, allows creating a "Personal" (single machine) Condor pool
 automatically.


Package: condor-tests
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: test suite for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This packages provides Condor's test-suite that can be used to verify
 proper functioning of a Condor installation.


Package: condor-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: documentation for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This packages provides Condor's documentation in HTML and PDF format, as well
 as configuration and other examples.


Package: condor-dbg
Section: debug
Architecture: any
Depends: condor (= ${binary:Version})
Description: debugging symbols for Condor
 Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue. It chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 Unlike more traditional batch queueing system, Condor can also effectively
 harness wasted CPU power from otherwise idle desktop workstations. Condor
 does not require a shared file system across machines - if no shared file
 system is available, Condor can transfer the job's data files on behalf of
 the user.
 .
 This packages provides the debugging symbols for Condor.
