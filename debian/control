Source: condor
Section: science
Priority: extra
Maintainer: NeuroDebian team <team@neuro.debian.net>
Uploaders: Michael Hanke <mih@debian.org>, Yaroslav Halchenko <debian@onerussian.com>
#Build-Depends: debhelper (>= 7.0.50~), po-debconf, pvm-dev, libkrb5-dev, libssl-dev, libpcre3-dev, zlib1g-dev, gcj | gcj-4.0, libstlport5.2-dev | libstlport4.6-dev, flex, csh, bison, libpq-dev, libvirt-dev, autoconf, xutils-dev, libxml2-dev, libexpat1-dev, libpcre3-dev, libsasl2-dev
Build-Depends: debhelper (>= 7.0.50~), po-debconf, libpq-dev, libcurl4-openssl-dev, zlib1g-dev, libglobus-gss-assist-dev, libglobus-gram-protocol-dev, libglobus-gram-client-dev, libglobus-gass-server-ez-dev, libglobus-ftp-client-dev, libclassad-dev, latex2html, ncompress
Standards-Version: 3.9.1


Package: condor
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}, debconf (>= 0.5) | debconf-2.0, adduser
Description: workload management system
 Condor is a specialized workload management system for compute-intensive
 jobs. Like other full-featured batch systems, Condor provides a job queueing
 mechanism, scheduling policy, priority scheme, resource monitoring, and
 resource management. Users submit their serial or parallel jobs to Condor,
 Condor places them into a queue, chooses when and where to run the jobs
 based upon a policy, carefully monitors their progress, and ultimately
 informs the user upon completion.
 .
 While providing functionality similar to that of a more traditional batch
 queueing system, Condor's novel architecture allows it to succeed in areas
 where traditional scheduling systems fail. Condor can be used to manage a
 cluster of dedicated compute nodes (such as a "Beowulf" cluster). In
 addition, unique mechanisms enable Condor to effectively harness wasted CPU
 power from otherwise idle desktop workstations. For instance, Condor can be
 configured to only use desktop machines where the keyboard and mouse are
 idle. Should Condor detect that a machine is no longer available (such as a
 key press detected), in many circumstances Condor is able to transparently
 produce a checkpoint and migrate a job to a different machine which would
 otherwise be idle. Condor does not require a shared file system across
 machines - if no shared file system is available, Condor can transfer the
 job's data files on behalf of the user, or Condor may be able to
 transparently redirect all the job's I/O requests back to the submit
 machine. As a result, Condor can be used to seamlessly combine all of an
 organization's computational power into one resource.


Package: condor-tests
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: test suite for Condor


Package: condor-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: documentation for Condor
 In HTML and PDF format.
