/***************************************************************
 *
 * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
 * University of Wisconsin-Madison, WI.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

/**************************************************************************
** These are all the definitions that are shared between all versions of 
** Linux, including i386 vs Alpha, and glibc vs. libc5
**
** At the end of this file, we include the arch/version-specific
** config files as needed.   
**************************************************************************/

/**************************************************************************
** Shared Linux Settings
**************************************************************************/

#if defined( IS_GLIBC )
#  if defined( IS_GLIBC22 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC22=GLIBC22
#  elif defined( IS_GLIBC23 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC23=GLIBC23
#  elif defined( IS_GLIBC24 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC24=GLIBC24
#  elif defined( IS_GLIBC25 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC25=GLIBC25
#  elif defined( IS_GLIBC26 )
#    define GlibCFlag           -DGLIBC=GLIBC -DGLIBC26=GLIBC26
#  endif
#else /* Non IS_GLIBC */
#  define GlibCFlag
#endif

#define PlatformFlags		ArchOptimizeFlag GlibCFlag

#define PlatformLdFlags		-lresolv

#if IS_CLIPPED
/* This is sort of odd, since we never use this defined when in clipped mode,
	but just in case, we'll give it a reasonable value */
#define SimpleLibC /usr/lib/libc.a
#else
	/* It used to be the case, before this checkin, that we would
		extract needed .o files from /usr/lib/libc.a and the link
		them against the glibc that we manually create which has
		nss statically linked in. However, on redhat 9, the rpm
		build of the static nss glibc differed from the system
		glibc in that they seemingly had different feature sets.
		The system glibc had run time signals, the hand built
		one did not, and no deciphering of the build arguments
		could determine what the incantation was to make the
		feature sets be identical.  Since variables came and
		went in certain .o files based upon this real time signal
		stuff, the extracted system .o could be using an undefined
		variable that the hand built glibc now never defines. Or
		vice versa.  This would cause .o files to be brought in
		multiple times from either libc as the two versions of
		the .o file fought over who defined what and where.

		A long time ago, we wondered if the extracting libc should
		be the same libc that we link a standard universe
		job against. The answer as of this checkin is now
		"yes". --psilord 12/09/03 */

#define SimpleLibC $(GLIBC_DIR)/libc.a
#endif

#define LibC SimpleLibC

#define DOES_SAVE_SIGSTATE		YES
#define HAS_DYNAMIC_USER_JOBS		NO

#define NEEDS_KBDD			NO	
#define HAS_AR_S_OPTION			YES
#define HAS_RANLIB_TOUCH		NO
/*?????*/
#define HAS_CP_PRESERVE			NO
#ifndef FORTRAN_HAS_RECURSION
#  define FORTRAN_HAS_RECURSION		NO
#endif
#define HAS_FLOCK			NO

/**************************************************************************
** Include Arch-specific config files
**************************************************************************/

#ifdef ArchIncludeFile
#include ArchIncludeFile
#endif

#ifdef OSVersionIncludeFile
#include OSVersionIncludeFile
#endif

