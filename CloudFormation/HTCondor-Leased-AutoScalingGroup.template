{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "HTCondor CloudFormation for leased AutoScaling Groups.",

	"Metadata" : { },

	"Parameters" : {
		"Size" : {
			"Type" : "Number",
			"Default" : 10,
			"MinValue" : 1,
			"Description" : "How many instances do you want to add to your pool?",
			"ConstraintDescription" : "You must add at least one instance to your pool."
		},
		"CentralManager" : {
			"Type" : "String",
			"Description" : "The pool whose size you're increasing."
		},
		"LeaseDuration" : {
			"Type" : "Number",
			"Default" : 900,
			"MinValue" : 0,
			"Description" : "How long should the lease be (in seconds)?",
			"ConstraintDescription" : "Lease durations (in seconds) must be positive."
		},
		"SSHKeypairName" : {
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"Description" : "Which SSH key pair should allow access to the instances?",
			"ConstraintDescription" : "SSH keypairs must already exist."
		}
	},

	"Mappings" : { },

	"Conditions" : { },

	"Resources" : {
		"HTCondorLeasedAutoScalingGroupLaunchConfiguration" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Properties" : {
				"KeyName" : { "Ref" : "SSHKeypairName" },
				"ImageId" : "ami-0f4cfd64",
				"InstanceType" : "t1.micro",
				"SecurityGroups" : [ "sg-31eaa85c" ]
			}
		},

		"HTCondorLeasedAutoScalingGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
				"AvailabilityZones" : { "Fn::GetAZs" : ""  },
				"MinSize" : 0,
				"DesiredCapacity" : { "Ref" : "Size" },
				"MaxSize" : { "Ref" : "Size" },
				"LaunchConfigurationName" : { "Ref" : "HTCondorLeasedAutoScalingGroupLaunchConfiguration" }
			}
		},

		"HTCondorLeasedAutoScalingGroupLambdaFunction" : {
			"Type" : "AWS::Lambda::Function",
			"Properties" : {
				"Code" : {
					"S3Bucket" : "htcondor-leased-autoscalinggroup",
					"S3Key" : "lambda-lease-1.jar"
				},
				"Description" : "Terminates all instances and then destroys the AutoScaling Group implied by the namespace of the triggering metric.",
				"Handler" : "org.HTCondor.Lease",
				"MemorySize" : 256,
				"Role" : "arn:aws:iam::844603466475:role/lambda_asg_execution",
				"Runtime" : "java8",
				"Timeout" : 30
			}
		},

		"HTCondorLeasedAutoScalingGroupAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Properties" : {
				"AlarmDescription" : "Remove ASG if not alive.",
				"MetricName" : "Lease",
				"Namespace" : { "Fn::Join" :
					[ "/",
						[
							"HTCondor",
							"Leases",
							"AutoScalingGroup",
							{ "Ref" : "HTCondorLeasedAutoScalingGroup" }
						]
					]
				},
				"Statistic" : "Sum",
				"Period" : { "Ref" : "LeaseDuration" },
				"EvaluationPeriods" : 1,
				"Threshold" : 1,
				"ComparisonOperator" : "LessThanThreshold",
				"AlarmActions" : [ { "Ref" : "HTCondorLeasedAutoScalingGroupNotificationTopic" } ],
				"InsufficientDataActions" : [ { "Ref" : "HTCondorLeasedAutoScalingGroupNotificationTopic" } ]
			}
		},


		"HTCondorLeasedAutoScalingGroupPlumberFunction" : {
			"Type" : "AWS::Lambda::Function",
			"Properties" : {
				"Code" : {
					"ZipFile" : { "Fn::Join" : [ "\n" , [
	"var response = require( 'cfn-response' );",
	"exports.handler = function( event, context ) {",
	"console.log( 'Received request:\\n', JSON.stringify( event ) );",
	"if( event.RequestType == 'Delete' ) {",
	"   // Delete subscription?",
	"   response.send( event, context, response.SUCCESS );",
	"}",
	"var functionName = event.ResourceProperties.functionName;",
	"var sourceARN = event.ResourceProperties.sourceARN;",
	"var responseData = {};",
	"if( sourceARN ) {",
	"   var aws = require( 'aws-sdk' );",
	"   var lambda = new aws.Lambda();",
	"   var params = {  Action : 'Lambda:Invoke*',",
	"                   FunctionName : functionName,",
	"                   Principal : 'sns.amazonaws.com',",
	"                   StatementId : 'HTCondor-Leased-AutoScalingGroup-Permissions',",
	"                   SourceArn : sourceARN",
	"   };",
	"   lambda.addPermision( params, function( error, data ) {",
	"       if( error ) { console.log( error, error.stack ); }",
	"       else { console.log( data ); }",
	"   });",
	"} else {",
	"   responseData = { Error : 'sourceARN not specified' };",
	"   console.log( responseData.Error );",
	"   response.send( event, context, response.FAILED, responseData );",
	"}",
"};"
						]]},
					"Handler" : "index.handler",
					"Runtime" : "nodejs",
					"Timeout" : 30,
					"Role" : "arn:aws:iam::844603466475:role/lambda_asg_execution"
				}
			}
		},



		"HTCondorLeasedAutoScalingGroupNotificationTopic" : {
			"Type" : "AWS::SNS::Topic",
			"Properties" : {
				"Subscription" : [ {
					"Protocol" : "lambda",
					"Endpoint" : { "Fn::GetAtt" : [ "HTCondorLeasedAutoScalingGroupLambdaFunction", "Arn" ] }
				} ]
			}
		}
	},

	"Outputs" : {
		"AutoScalingGroupName" : {
			"Description" : "The name of the AutoScaling Group created by this template.",
			"Value" : { "Ref" : "HTCondorLeasedAutoScalingGroup" }
		}
	}
}
